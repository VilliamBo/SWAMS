
LEDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000270c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002898  08002898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028d8  080028d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028d8  080028d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028d8  080028d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028d8  080028d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028dc  080028dc  000128dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080028ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080028ec  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4ae  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7b  00000000  00000000  0002b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0002cf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  0002dba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f8e1  00000000  00000000  0002e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cad8  00000000  00000000  0004dff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c28eb  00000000  00000000  0005aac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d3b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003254  00000000  00000000  0011d404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002880 	.word	0x08002880

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002880 	.word	0x08002880

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int32_t CH2_DC = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	607b      	str	r3, [r7, #4]
	int32_t delay = 1;
 80001d6:	2301      	movs	r3, #1
 80001d8:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fa4e 	bl	800067a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f82b 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f901 	bl	80003e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001e6:	f000 f889 	bl	80002fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //Starts PWM
 80001ea:	2104      	movs	r1, #4
 80001ec:	4811      	ldr	r0, [pc, #68]	; (8000234 <main+0x68>)
 80001ee:	f001 fc57 	bl	8001aa0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(CH2_DC < 65535){
 80001f2:	e00a      	b.n	800020a <main+0x3e>
		  TIM2->CCR2 = CH2_DC;
 80001f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	6393      	str	r3, [r2, #56]	; 0x38
		  CH2_DC += 70;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	3346      	adds	r3, #70	; 0x46
 8000200:	607b      	str	r3, [r7, #4]
		  HAL_Delay(delay);
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	4618      	mov	r0, r3
 8000206:	f000 faad 	bl	8000764 <HAL_Delay>
	  while(CH2_DC < 65535){
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000210:	4293      	cmp	r3, r2
 8000212:	ddef      	ble.n	80001f4 <main+0x28>
	  }
	  while(CH2_DC > 0){
 8000214:	e00a      	b.n	800022c <main+0x60>
		  TIM2->CCR2 = CH2_DC;
 8000216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	6393      	str	r3, [r2, #56]	; 0x38
		  CH2_DC -= 70;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	3b46      	subs	r3, #70	; 0x46
 8000222:	607b      	str	r3, [r7, #4]
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
		  HAL_Delay(delay);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fa9c 	bl	8000764 <HAL_Delay>
	  while(CH2_DC > 0){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b00      	cmp	r3, #0
 8000230:	dcf1      	bgt.n	8000216 <main+0x4a>
	  while(CH2_DC < 65535){
 8000232:	e7ea      	b.n	800020a <main+0x3e>
 8000234:	20000028 	.word	0x20000028

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b096      	sub	sp, #88	; 0x58
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0314 	add.w	r3, r7, #20
 8000242:	2244      	movs	r2, #68	; 0x44
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fb12 	bl	8002870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	463b      	mov	r3, r7
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800025a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800025e:	f000 fd13 	bl	8000c88 <HAL_PWREx_ControlVoltageScaling>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000268:	f000 f924 	bl	80004b4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800026c:	f000 fcee 	bl	8000c4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000270:	4b21      	ldr	r3, [pc, #132]	; (80002f8 <SystemClock_Config+0xc0>)
 8000272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000276:	4a20      	ldr	r2, [pc, #128]	; (80002f8 <SystemClock_Config+0xc0>)
 8000278:	f023 0318 	bic.w	r3, r3, #24
 800027c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000280:	2314      	movs	r3, #20
 8000282:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000284:	2301      	movs	r3, #1
 8000286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000290:	2360      	movs	r3, #96	; 0x60
 8000292:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	2302      	movs	r3, #2
 8000296:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000298:	2301      	movs	r3, #1
 800029a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800029c:	2301      	movs	r3, #1
 800029e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 80002a0:	2324      	movs	r3, #36	; 0x24
 80002a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002a4:	2307      	movs	r3, #7
 80002a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a8:	2302      	movs	r3, #2
 80002aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ac:	2302      	movs	r3, #2
 80002ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fd3d 	bl	8000d34 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002c0:	f000 f8f8 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2303      	movs	r3, #3
 80002ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002d8:	463b      	mov	r3, r7
 80002da:	2104      	movs	r1, #4
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 f949 	bl	8001574 <HAL_RCC_ClockConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002e8:	f000 f8e4 	bl	80004b4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80002ec:	f001 fb10 	bl	8001910 <HAL_RCCEx_EnableMSIPLLMode>
}
 80002f0:	bf00      	nop
 80002f2:	3758      	adds	r7, #88	; 0x58
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40021000 	.word	0x40021000

080002fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b08e      	sub	sp, #56	; 0x38
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000310:	f107 031c 	add.w	r3, r7, #28
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800031c:	463b      	mov	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]
 800032a:	615a      	str	r2, [r3, #20]
 800032c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800032e:	4b2d      	ldr	r3, [pc, #180]	; (80003e4 <MX_TIM2_Init+0xe8>)
 8000330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000334:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000336:	4b2b      	ldr	r3, [pc, #172]	; (80003e4 <MX_TIM2_Init+0xe8>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033c:	4b29      	ldr	r3, [pc, #164]	; (80003e4 <MX_TIM2_Init+0xe8>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000342:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <MX_TIM2_Init+0xe8>)
 8000344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000348:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034a:	4b26      	ldr	r3, [pc, #152]	; (80003e4 <MX_TIM2_Init+0xe8>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000350:	4b24      	ldr	r3, [pc, #144]	; (80003e4 <MX_TIM2_Init+0xe8>)
 8000352:	2280      	movs	r2, #128	; 0x80
 8000354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000356:	4823      	ldr	r0, [pc, #140]	; (80003e4 <MX_TIM2_Init+0xe8>)
 8000358:	f001 faea 	bl	8001930 <HAL_TIM_Base_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000362:	f000 f8a7 	bl	80004b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800036a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800036c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000370:	4619      	mov	r1, r3
 8000372:	481c      	ldr	r0, [pc, #112]	; (80003e4 <MX_TIM2_Init+0xe8>)
 8000374:	f001 fd86 	bl	8001e84 <HAL_TIM_ConfigClockSource>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800037e:	f000 f899 	bl	80004b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000382:	4818      	ldr	r0, [pc, #96]	; (80003e4 <MX_TIM2_Init+0xe8>)
 8000384:	f001 fb2b 	bl	80019de <HAL_TIM_PWM_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800038e:	f000 f891 	bl	80004b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000396:	2300      	movs	r3, #0
 8000398:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800039a:	f107 031c 	add.w	r3, r7, #28
 800039e:	4619      	mov	r1, r3
 80003a0:	4810      	ldr	r0, [pc, #64]	; (80003e4 <MX_TIM2_Init+0xe8>)
 80003a2:	f002 f9db 	bl	800275c <HAL_TIMEx_MasterConfigSynchronization>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80003ac:	f000 f882 	bl	80004b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003b0:	2360      	movs	r3, #96	; 0x60
 80003b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003bc:	2300      	movs	r3, #0
 80003be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003c0:	463b      	mov	r3, r7
 80003c2:	2204      	movs	r2, #4
 80003c4:	4619      	mov	r1, r3
 80003c6:	4807      	ldr	r0, [pc, #28]	; (80003e4 <MX_TIM2_Init+0xe8>)
 80003c8:	f001 fc48 	bl	8001c5c <HAL_TIM_PWM_ConfigChannel>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80003d2:	f000 f86f 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003d6:	4803      	ldr	r0, [pc, #12]	; (80003e4 <MX_TIM2_Init+0xe8>)
 80003d8:	f000 f8b4 	bl	8000544 <HAL_TIM_MspPostInit>

}
 80003dc:	bf00      	nop
 80003de:	3738      	adds	r7, #56	; 0x38
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000028 	.word	0x20000028

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 030c 	add.w	r3, r7, #12
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fe:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <MX_GPIO_Init+0xc8>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	4a2b      	ldr	r2, [pc, #172]	; (80004b0 <MX_GPIO_Init+0xc8>)
 8000404:	f043 0304 	orr.w	r3, r3, #4
 8000408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040a:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <MX_GPIO_Init+0xc8>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	f003 0304 	and.w	r3, r3, #4
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000416:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <MX_GPIO_Init+0xc8>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	4a25      	ldr	r2, [pc, #148]	; (80004b0 <MX_GPIO_Init+0xc8>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000422:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <MX_GPIO_Init+0xc8>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042e:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <MX_GPIO_Init+0xc8>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	4a1f      	ldr	r2, [pc, #124]	; (80004b0 <MX_GPIO_Init+0xc8>)
 8000434:	f043 0302 	orr.w	r3, r3, #2
 8000438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043a:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <MX_GPIO_Init+0xc8>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	f003 0302 	and.w	r3, r3, #2
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000446:	2304      	movs	r3, #4
 8000448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800044a:	2302      	movs	r3, #2
 800044c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000452:	2303      	movs	r3, #3
 8000454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000456:	2307      	movs	r3, #7
 8000458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	4619      	mov	r1, r3
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f000 fa88 	bl	8000978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800046c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 030c 	add.w	r3, r7, #12
 800047a:	4619      	mov	r1, r3
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f000 fa7a 	bl	8000978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048a:	2302      	movs	r3, #2
 800048c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000492:	2303      	movs	r3, #3
 8000494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000496:	2303      	movs	r3, #3
 8000498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	4619      	mov	r1, r3
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a4:	f000 fa68 	bl	8000978 <HAL_GPIO_Init>

}
 80004a8:	bf00      	nop
 80004aa:	3720      	adds	r7, #32
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004bc:	e7fe      	b.n	80004bc <Error_Handler+0x8>
	...

080004c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <HAL_MspInit+0x44>)
 80004c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ca:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <HAL_MspInit+0x44>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6613      	str	r3, [r2, #96]	; 0x60
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_MspInit+0x44>)
 80004d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <HAL_MspInit+0x44>)
 80004e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e2:	4a08      	ldr	r2, [pc, #32]	; (8000504 <HAL_MspInit+0x44>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e8:	6593      	str	r3, [r2, #88]	; 0x58
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <HAL_MspInit+0x44>)
 80004ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000

08000508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000518:	d10b      	bne.n	8000532 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <HAL_TIM_Base_MspInit+0x38>)
 800051c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800051e:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_TIM_Base_MspInit+0x38>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6593      	str	r3, [r2, #88]	; 0x58
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <HAL_TIM_Base_MspInit+0x38>)
 8000528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000564:	d11b      	bne.n	800059e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <HAL_TIM_MspPostInit+0x64>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	4a0f      	ldr	r2, [pc, #60]	; (80005a8 <HAL_TIM_MspPostInit+0x64>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <HAL_TIM_MspPostInit+0x64>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800057e:	2308      	movs	r3, #8
 8000580:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	2302      	movs	r3, #2
 8000584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800058e:	2301      	movs	r3, #1
 8000590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	4619      	mov	r1, r3
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <HAL_TIM_MspPostInit+0x68>)
 800059a:	f000 f9ed 	bl	8000978 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800059e:	bf00      	nop
 80005a0:	3720      	adds	r7, #32
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000
 80005ac:	48000400 	.word	0x48000400

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <NMI_Handler+0x4>

080005b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <MemManage_Handler+0x4>

080005c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler+0x4>

080005ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fc:	f000 f892 	bl	8000724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <SystemInit+0x20>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <SystemInit+0x20>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000660 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800062c:	f7ff ffea 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <LoopForever+0x6>)
  ldr r1, =_edata
 8000632:	490d      	ldr	r1, [pc, #52]	; (8000668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <LoopForever+0xe>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000648:	4c0a      	ldr	r4, [pc, #40]	; (8000674 <LoopForever+0x16>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000656:	f002 f8e7 	bl	8002828 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800065a:	f7ff fdb7 	bl	80001cc <main>

0800065e <LoopForever>:

LoopForever:
    b LoopForever
 800065e:	e7fe      	b.n	800065e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000660:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800066c:	080028e0 	.word	0x080028e0
  ldr r2, =_sbss
 8000670:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000674:	20000078 	.word	0x20000078

08000678 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC1_IRQHandler>

0800067a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000680:	2300      	movs	r3, #0
 8000682:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000684:	2003      	movs	r0, #3
 8000686:	f000 f943 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800068a:	2000      	movs	r0, #0
 800068c:	f000 f80e 	bl	80006ac <HAL_InitTick>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d002      	beq.n	800069c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	e001      	b.n	80006a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800069c:	f7ff ff10 	bl	80004c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <HAL_InitTick+0x6c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d023      	beq.n	8000708 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_InitTick+0x70>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <HAL_InitTick+0x6c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f941 	bl	800095e <HAL_SYSTICK_Config>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10f      	bne.n	8000702 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b0f      	cmp	r3, #15
 80006e6:	d809      	bhi.n	80006fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e8:	2200      	movs	r2, #0
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f000 f919 	bl	8000926 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006f4:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <HAL_InitTick+0x74>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6013      	str	r3, [r2, #0]
 80006fa:	e007      	b.n	800070c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006fc:	2301      	movs	r3, #1
 80006fe:	73fb      	strb	r3, [r7, #15]
 8000700:	e004      	b.n	800070c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e001      	b.n	800070c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800070c:	7bfb      	ldrb	r3, [r7, #15]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000008 	.word	0x20000008
 800071c:	20000000 	.word	0x20000000
 8000720:	20000004 	.word	0x20000004

08000724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_IncTick+0x20>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_IncTick+0x24>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4413      	add	r3, r2
 8000734:	4a04      	ldr	r2, [pc, #16]	; (8000748 <HAL_IncTick+0x24>)
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000008 	.word	0x20000008
 8000748:	20000074 	.word	0x20000074

0800074c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return uwTick;
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <HAL_GetTick+0x14>)
 8000752:	681b      	ldr	r3, [r3, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000074 	.word	0x20000074

08000764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800076c:	f7ff ffee 	bl	800074c <HAL_GetTick>
 8000770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800077c:	d005      	beq.n	800078a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_Delay+0x44>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4413      	add	r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800078a:	bf00      	nop
 800078c:	f7ff ffde 	bl	800074c <HAL_GetTick>
 8000790:	4602      	mov	r2, r0
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	429a      	cmp	r2, r3
 800079a:	d8f7      	bhi.n	800078c <HAL_Delay+0x28>
  {
  }
}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000008 	.word	0x20000008

080007ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	60d3      	str	r3, [r2, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <__NVIC_GetPriorityGrouping+0x18>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	f003 0307 	and.w	r3, r3, #7
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008dc:	d301      	bcc.n	80008e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008de:	2301      	movs	r3, #1
 80008e0:	e00f      	b.n	8000902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <SysTick_Config+0x40>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ea:	210f      	movs	r1, #15
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f7ff ff8e 	bl	8000810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <SysTick_Config+0x40>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <SysTick_Config+0x40>)
 80008fc:	2207      	movs	r2, #7
 80008fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000e010 	.word	0xe000e010

08000910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff47 	bl	80007ac <__NVIC_SetPriorityGrouping>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000938:	f7ff ff5c 	bl	80007f4 <__NVIC_GetPriorityGrouping>
 800093c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	6978      	ldr	r0, [r7, #20]
 8000944:	f7ff ff8e 	bl	8000864 <NVIC_EncodePriority>
 8000948:	4602      	mov	r2, r0
 800094a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff5d 	bl	8000810 <__NVIC_SetPriority>
}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ffb0 	bl	80008cc <SysTick_Config>
 800096c:	4603      	mov	r3, r0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000978:	b480      	push	{r7}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000986:	e148      	b.n	8000c1a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2101      	movs	r1, #1
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	fa01 f303 	lsl.w	r3, r1, r3
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b00      	cmp	r3, #0
 800099c:	f000 813a 	beq.w	8000c14 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 0303 	and.w	r3, r3, #3
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d005      	beq.n	80009b8 <HAL_GPIO_Init+0x40>
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 0303 	and.w	r3, r3, #3
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d130      	bne.n	8000a1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	2203      	movs	r2, #3
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68da      	ldr	r2, [r3, #12]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009ee:	2201      	movs	r2, #1
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	091b      	lsrs	r3, r3, #4
 8000a04:	f003 0201 	and.w	r2, r3, #1
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f003 0303 	and.w	r3, r3, #3
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d017      	beq.n	8000a56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	2203      	movs	r2, #3
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43db      	mvns	r3, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 0303 	and.w	r3, r3, #3
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d123      	bne.n	8000aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	08da      	lsrs	r2, r3, #3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3208      	adds	r2, #8
 8000a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	220f      	movs	r2, #15
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	691a      	ldr	r2, [r3, #16]
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f003 0307 	and.w	r3, r3, #7
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	08da      	lsrs	r2, r3, #3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3208      	adds	r2, #8
 8000aa4:	6939      	ldr	r1, [r7, #16]
 8000aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0203 	and.w	r2, r3, #3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 8094 	beq.w	8000c14 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aec:	4b52      	ldr	r3, [pc, #328]	; (8000c38 <HAL_GPIO_Init+0x2c0>)
 8000aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af0:	4a51      	ldr	r2, [pc, #324]	; (8000c38 <HAL_GPIO_Init+0x2c0>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6613      	str	r3, [r2, #96]	; 0x60
 8000af8:	4b4f      	ldr	r3, [pc, #316]	; (8000c38 <HAL_GPIO_Init+0x2c0>)
 8000afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b04:	4a4d      	ldr	r2, [pc, #308]	; (8000c3c <HAL_GPIO_Init+0x2c4>)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	220f      	movs	r2, #15
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b2e:	d00d      	beq.n	8000b4c <HAL_GPIO_Init+0x1d4>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a43      	ldr	r2, [pc, #268]	; (8000c40 <HAL_GPIO_Init+0x2c8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d007      	beq.n	8000b48 <HAL_GPIO_Init+0x1d0>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a42      	ldr	r2, [pc, #264]	; (8000c44 <HAL_GPIO_Init+0x2cc>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d101      	bne.n	8000b44 <HAL_GPIO_Init+0x1cc>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e004      	b.n	8000b4e <HAL_GPIO_Init+0x1d6>
 8000b44:	2307      	movs	r3, #7
 8000b46:	e002      	b.n	8000b4e <HAL_GPIO_Init+0x1d6>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <HAL_GPIO_Init+0x1d6>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	f002 0203 	and.w	r2, r2, #3
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	4093      	lsls	r3, r2
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b5e:	4937      	ldr	r1, [pc, #220]	; (8000c3c <HAL_GPIO_Init+0x2c4>)
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	3302      	adds	r3, #2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b6c:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b90:	4a2d      	ldr	r2, [pc, #180]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b96:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bba:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000be4:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	fa22 f303 	lsr.w	r3, r2, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f47f aeaf 	bne.w	8000988 <HAL_GPIO_Init+0x10>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	bf00      	nop
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	48000400 	.word	0x48000400
 8000c44:	48000800 	.word	0x48000800
 8000c48:	40010400 	.word	0x40010400

08000c4c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40007000 	.word	0x40007000

08000c6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40007000 	.word	0x40007000

08000c88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c96:	d130      	bne.n	8000cfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c98:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ca4:	d038      	beq.n	8000d18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cae:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2232      	movs	r2, #50	; 0x32
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	0c9b      	lsrs	r3, r3, #18
 8000cc8:	3301      	adds	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ccc:	e002      	b.n	8000cd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce0:	d102      	bne.n	8000ce8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f2      	bne.n	8000cce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf4:	d110      	bne.n	8000d18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e00f      	b.n	8000d1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d06:	d007      	beq.n	8000d18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d10:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40007000 	.word	0x40007000
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	431bde83 	.word	0x431bde83

08000d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	f000 bc10 	b.w	8001568 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d48:	4b96      	ldr	r3, [pc, #600]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f003 030c 	and.w	r3, r3, #12
 8000d50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d52:	4b94      	ldr	r3, [pc, #592]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0310 	and.w	r3, r3, #16
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f000 80e4 	beq.w	8000f32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d007      	beq.n	8000d80 <HAL_RCC_OscConfig+0x4c>
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2b0c      	cmp	r3, #12
 8000d74:	f040 808b 	bne.w	8000e8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	f040 8087 	bne.w	8000e8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d80:	4b88      	ldr	r3, [pc, #544]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d005      	beq.n	8000d98 <HAL_RCC_OscConfig+0x64>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e3e7      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a1a      	ldr	r2, [r3, #32]
 8000d9c:	4b81      	ldr	r3, [pc, #516]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0308 	and.w	r3, r3, #8
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <HAL_RCC_OscConfig+0x7e>
 8000da8:	4b7e      	ldr	r3, [pc, #504]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000db0:	e005      	b.n	8000dbe <HAL_RCC_OscConfig+0x8a>
 8000db2:	4b7c      	ldr	r3, [pc, #496]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000db8:	091b      	lsrs	r3, r3, #4
 8000dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d223      	bcs.n	8000e0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fd42 	bl	8001850 <RCC_SetFlashLatencyFromMSIRange>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e3c8      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dd6:	4b73      	ldr	r3, [pc, #460]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a72      	ldr	r2, [pc, #456]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4b70      	ldr	r3, [pc, #448]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a1b      	ldr	r3, [r3, #32]
 8000dee:	496d      	ldr	r1, [pc, #436]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000df0:	4313      	orrs	r3, r2
 8000df2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000df4:	4b6b      	ldr	r3, [pc, #428]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	4968      	ldr	r1, [pc, #416]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e04:	4313      	orrs	r3, r2
 8000e06:	604b      	str	r3, [r1, #4]
 8000e08:	e025      	b.n	8000e56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e0a:	4b66      	ldr	r3, [pc, #408]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a65      	ldr	r2, [pc, #404]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	4b63      	ldr	r3, [pc, #396]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	4960      	ldr	r1, [pc, #384]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e24:	4313      	orrs	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e28:	4b5e      	ldr	r3, [pc, #376]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69db      	ldr	r3, [r3, #28]
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	495b      	ldr	r1, [pc, #364]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a1b      	ldr	r3, [r3, #32]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fd02 	bl	8001850 <RCC_SetFlashLatencyFromMSIRange>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e388      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e56:	f000 fc6f 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	4b51      	ldr	r3, [pc, #324]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	4950      	ldr	r1, [pc, #320]	; (8000fa8 <HAL_RCC_OscConfig+0x274>)
 8000e68:	5ccb      	ldrb	r3, [r1, r3]
 8000e6a:	f003 031f 	and.w	r3, r3, #31
 8000e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e72:	4a4e      	ldr	r2, [pc, #312]	; (8000fac <HAL_RCC_OscConfig+0x278>)
 8000e74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e76:	4b4e      	ldr	r3, [pc, #312]	; (8000fb0 <HAL_RCC_OscConfig+0x27c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fc16 	bl	80006ac <HAL_InitTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d052      	beq.n	8000f30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	e36c      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d032      	beq.n	8000efc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e96:	4b43      	ldr	r3, [pc, #268]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a42      	ldr	r2, [pc, #264]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fc53 	bl	800074c <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fc4f 	bl	800074c <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e355      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ebc:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f0      	beq.n	8000eaa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ec8:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a35      	ldr	r2, [pc, #212]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4930      	ldr	r1, [pc, #192]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	492b      	ldr	r1, [pc, #172]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	604b      	str	r3, [r1, #4]
 8000efa:	e01a      	b.n	8000f32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000efc:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fc20 	bl	800074c <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f10:	f7ff fc1c 	bl	800074c <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e322      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f0      	bne.n	8000f10 <HAL_RCC_OscConfig+0x1dc>
 8000f2e:	e000      	b.n	8000f32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d073      	beq.n	8001026 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d005      	beq.n	8000f50 <HAL_RCC_OscConfig+0x21c>
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	2b0c      	cmp	r3, #12
 8000f48:	d10e      	bne.n	8000f68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d10b      	bne.n	8000f68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d063      	beq.n	8001024 <HAL_RCC_OscConfig+0x2f0>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d15f      	bne.n	8001024 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e2ff      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f70:	d106      	bne.n	8000f80 <HAL_RCC_OscConfig+0x24c>
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e025      	b.n	8000fcc <HAL_RCC_OscConfig+0x298>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f88:	d114      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x280>
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a02      	ldr	r2, [pc, #8]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e013      	b.n	8000fcc <HAL_RCC_OscConfig+0x298>
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	08002898 	.word	0x08002898
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	4ba0      	ldr	r3, [pc, #640]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a9f      	ldr	r2, [pc, #636]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8000fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b9d      	ldr	r3, [pc, #628]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a9c      	ldr	r2, [pc, #624]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fbba 	bl	800074c <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fbb6 	bl	800074c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e2bc      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fee:	4b92      	ldr	r3, [pc, #584]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x2a8>
 8000ffa:	e014      	b.n	8001026 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fba6 	bl	800074c <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fba2 	bl	800074c <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e2a8      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001016:	4b88      	ldr	r3, [pc, #544]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x2d0>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d060      	beq.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d005      	beq.n	8001044 <HAL_RCC_OscConfig+0x310>
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2b0c      	cmp	r3, #12
 800103c:	d119      	bne.n	8001072 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d116      	bne.n	8001072 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001044:	4b7c      	ldr	r3, [pc, #496]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <HAL_RCC_OscConfig+0x328>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e285      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4b76      	ldr	r3, [pc, #472]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	061b      	lsls	r3, r3, #24
 800106a:	4973      	ldr	r1, [pc, #460]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001070:	e040      	b.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d023      	beq.n	80010c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107a:	4b6f      	ldr	r3, [pc, #444]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a6e      	ldr	r2, [pc, #440]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001086:	f7ff fb61 	bl	800074c <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff fb5d 	bl	800074c <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e263      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a0:	4b65      	ldr	r3, [pc, #404]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ac:	4b62      	ldr	r3, [pc, #392]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	061b      	lsls	r3, r3, #24
 80010ba:	495f      	ldr	r1, [pc, #380]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
 80010c0:	e018      	b.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c2:	4b5d      	ldr	r3, [pc, #372]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a5c      	ldr	r2, [pc, #368]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80010c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ce:	f7ff fb3d 	bl	800074c <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d6:	f7ff fb39 	bl	800074c <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e23f      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010e8:	4b53      	ldr	r3, [pc, #332]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f0      	bne.n	80010d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d03c      	beq.n	800117a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d01c      	beq.n	8001142 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001108:	4b4b      	ldr	r3, [pc, #300]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800110a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110e:	4a4a      	ldr	r2, [pc, #296]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001118:	f7ff fb18 	bl	800074c <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff fb14 	bl	800074c <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e21a      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001132:	4b41      	ldr	r3, [pc, #260]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0ef      	beq.n	8001120 <HAL_RCC_OscConfig+0x3ec>
 8001140:	e01b      	b.n	800117a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001148:	4a3b      	ldr	r2, [pc, #236]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800114a:	f023 0301 	bic.w	r3, r3, #1
 800114e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001152:	f7ff fafb 	bl	800074c <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115a:	f7ff faf7 	bl	800074c <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e1fd      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800116e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1ef      	bne.n	800115a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80a6 	beq.w	80012d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800118c:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10d      	bne.n	80011b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800119e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a2:	6593      	str	r3, [r2, #88]	; 0x58
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b0:	2301      	movs	r3, #1
 80011b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <HAL_RCC_OscConfig+0x508>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d118      	bne.n	80011f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HAL_RCC_OscConfig+0x508>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_RCC_OscConfig+0x508>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011cc:	f7ff fabe 	bl	800074c <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d4:	f7ff faba 	bl	800074c <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e1c0      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_RCC_OscConfig+0x508>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d108      	bne.n	800120c <HAL_RCC_OscConfig+0x4d8>
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 80011fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800120a:	e029      	b.n	8001260 <HAL_RCC_OscConfig+0x52c>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b05      	cmp	r3, #5
 8001212:	d115      	bne.n	8001240 <HAL_RCC_OscConfig+0x50c>
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800121a:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 8001226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122a:	4a03      	ldr	r2, [pc, #12]	; (8001238 <HAL_RCC_OscConfig+0x504>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001234:	e014      	b.n	8001260 <HAL_RCC_OscConfig+0x52c>
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	40007000 	.word	0x40007000
 8001240:	4b9a      	ldr	r3, [pc, #616]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 8001242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001246:	4a99      	ldr	r2, [pc, #612]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001250:	4b96      	ldr	r3, [pc, #600]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 8001252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001256:	4a95      	ldr	r2, [pc, #596]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 8001258:	f023 0304 	bic.w	r3, r3, #4
 800125c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d016      	beq.n	8001296 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001268:	f7ff fa70 	bl	800074c <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800126e:	e00a      	b.n	8001286 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001270:	f7ff fa6c 	bl	800074c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f241 3288 	movw	r2, #5000	; 0x1388
 800127e:	4293      	cmp	r3, r2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e170      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001286:	4b89      	ldr	r3, [pc, #548]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 8001288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0ed      	beq.n	8001270 <HAL_RCC_OscConfig+0x53c>
 8001294:	e015      	b.n	80012c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001296:	f7ff fa59 	bl	800074c <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129e:	f7ff fa55 	bl	800074c <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e159      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012b4:	4b7d      	ldr	r3, [pc, #500]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 80012b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1ed      	bne.n	800129e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d105      	bne.n	80012d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c8:	4b78      	ldr	r3, [pc, #480]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	4a77      	ldr	r2, [pc, #476]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 80012ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d03c      	beq.n	800135a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d01c      	beq.n	8001322 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012e8:	4b70      	ldr	r3, [pc, #448]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 80012ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012ee:	4a6f      	ldr	r2, [pc, #444]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f8:	f7ff fa28 	bl	800074c <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001300:	f7ff fa24 	bl	800074c <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e12a      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001312:	4b66      	ldr	r3, [pc, #408]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 8001314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0ef      	beq.n	8001300 <HAL_RCC_OscConfig+0x5cc>
 8001320:	e01b      	b.n	800135a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001322:	4b62      	ldr	r3, [pc, #392]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 8001324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001328:	4a60      	ldr	r2, [pc, #384]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001332:	f7ff fa0b 	bl	800074c <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800133a:	f7ff fa07 	bl	800074c <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e10d      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800134c:	4b57      	ldr	r3, [pc, #348]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 800134e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1ef      	bne.n	800133a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 8101 	beq.w	8001566 <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	2b02      	cmp	r3, #2
 800136a:	f040 80c9 	bne.w	8001500 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800136e:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f003 0203 	and.w	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	429a      	cmp	r2, r3
 8001380:	d12c      	bne.n	80013dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	3b01      	subs	r3, #1
 800138e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001390:	429a      	cmp	r2, r3
 8001392:	d123      	bne.n	80013dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d11b      	bne.n	80013dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d113      	bne.n	80013dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013be:	085b      	lsrs	r3, r3, #1
 80013c0:	3b01      	subs	r3, #1
 80013c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d109      	bne.n	80013dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	3b01      	subs	r3, #1
 80013d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013d8:	429a      	cmp	r2, r3
 80013da:	d06b      	beq.n	80014b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	2b0c      	cmp	r3, #12
 80013e0:	d062      	beq.n	80014a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013e2:	4b32      	ldr	r3, [pc, #200]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0ba      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a2d      	ldr	r2, [pc, #180]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 80013f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013fe:	f7ff f9a5 	bl	800074c <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff f9a1 	bl	800074c <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e0a7      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f0      	bne.n	8001406 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001424:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_RCC_OscConfig+0x77c>)
 800142a:	4013      	ands	r3, r2
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001434:	3a01      	subs	r2, #1
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	4311      	orrs	r1, r2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800143e:	0212      	lsls	r2, r2, #8
 8001440:	4311      	orrs	r1, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001446:	0852      	lsrs	r2, r2, #1
 8001448:	3a01      	subs	r2, #1
 800144a:	0552      	lsls	r2, r2, #21
 800144c:	4311      	orrs	r1, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001452:	0852      	lsrs	r2, r2, #1
 8001454:	3a01      	subs	r2, #1
 8001456:	0652      	lsls	r2, r2, #25
 8001458:	4311      	orrs	r1, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800145e:	06d2      	lsls	r2, r2, #27
 8001460:	430a      	orrs	r2, r1
 8001462:	4912      	ldr	r1, [pc, #72]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 8001464:	4313      	orrs	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 800146e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001472:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 800147a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001480:	f7ff f964 	bl	800074c <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff f960 	bl	800074c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e066      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <HAL_RCC_OscConfig+0x778>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014a6:	e05e      	b.n	8001566 <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e05d      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
 80014ac:	40021000 	.word	0x40021000
 80014b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b4:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d152      	bne.n	8001566 <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a2a      	ldr	r2, [pc, #168]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 80014c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4a27      	ldr	r2, [pc, #156]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 80014d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014d8:	f7ff f938 	bl	800074c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff f934 	bl	800074c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e03a      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x7ac>
 80014fe:	e032      	b.n	8001566 <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b0c      	cmp	r3, #12
 8001504:	d02d      	beq.n	8001562 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a19      	ldr	r2, [pc, #100]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 800150c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001510:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d105      	bne.n	800152a <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 8001524:	f023 0303 	bic.w	r3, r3, #3
 8001528:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 8001530:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001538:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff f907 	bl	800074c <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff f903 	bl	800074c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e009      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_RCC_OscConfig+0x83c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x80e>
 8001560:	e001      	b.n	8001566 <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3720      	adds	r7, #32
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0c8      	b.n	800171a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001588:	4b66      	ldr	r3, [pc, #408]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d910      	bls.n	80015b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b63      	ldr	r3, [pc, #396]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 0207 	bic.w	r2, r3, #7
 800159e:	4961      	ldr	r1, [pc, #388]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a6:	4b5f      	ldr	r3, [pc, #380]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0b0      	b.n	800171a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d04c      	beq.n	800165e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d107      	bne.n	80015dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015cc:	4b56      	ldr	r3, [pc, #344]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d121      	bne.n	800161c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e09e      	b.n	800171a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d107      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d115      	bne.n	800161c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e092      	b.n	800171a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d107      	bne.n	800160c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015fc:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d109      	bne.n	800161c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e086      	b.n	800171a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800160c:	4b46      	ldr	r3, [pc, #280]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e07e      	b.n	800171a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800161c:	4b42      	ldr	r3, [pc, #264]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f023 0203 	bic.w	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	493f      	ldr	r1, [pc, #252]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800162e:	f7ff f88d 	bl	800074c <HAL_GetTick>
 8001632:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001634:	e00a      	b.n	800164c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001636:	f7ff f889 	bl	800074c <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f241 3288 	movw	r2, #5000	; 0x1388
 8001644:	4293      	cmp	r3, r2
 8001646:	d901      	bls.n	800164c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e066      	b.n	800171a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 020c 	and.w	r2, r3, #12
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	429a      	cmp	r2, r3
 800165c:	d1eb      	bne.n	8001636 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d008      	beq.n	800167c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800166a:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	492c      	ldr	r1, [pc, #176]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d210      	bcs.n	80016ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 0207 	bic.w	r2, r3, #7
 8001692:	4924      	ldr	r1, [pc, #144]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e036      	b.n	800171a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4918      	ldr	r1, [pc, #96]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4910      	ldr	r1, [pc, #64]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ea:	f000 f825 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	490c      	ldr	r1, [pc, #48]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	5ccb      	ldrb	r3, [r1, r3]
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ffcc 	bl	80006ac <HAL_InitTick>
 8001714:	4603      	mov	r3, r0
 8001716:	72fb      	strb	r3, [r7, #11]

  return status;
 8001718:	7afb      	ldrb	r3, [r7, #11]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000
 8001728:	40021000 	.word	0x40021000
 800172c:	08002898 	.word	0x08002898
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001746:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001750:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x34>
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	2b0c      	cmp	r3, #12
 8001764:	d121      	bne.n	80017aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d11e      	bne.n	80017aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800176c:	4b34      	ldr	r3, [pc, #208]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001778:	4b31      	ldr	r3, [pc, #196]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 800177a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	e005      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001788:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001794:	4a2b      	ldr	r2, [pc, #172]	; (8001844 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10d      	bne.n	80017c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d102      	bne.n	80017b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_RCC_GetSysClockFreq+0x110>)
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	e004      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_RCC_GetSysClockFreq+0x114>)
 80017be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d134      	bne.n	8001830 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017c6:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d003      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0xa6>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d003      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0xac>
 80017dc:	e005      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_RCC_GetSysClockFreq+0x110>)
 80017e0:	617b      	str	r3, [r7, #20]
      break;
 80017e2:	e005      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_RCC_GetSysClockFreq+0x114>)
 80017e6:	617b      	str	r3, [r7, #20]
      break;
 80017e8:	e002      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	617b      	str	r3, [r7, #20]
      break;
 80017ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	3301      	adds	r3, #1
 80017fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	fb03 f202 	mul.w	r2, r3, r2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	fbb2 f3f3 	udiv	r3, r2, r3
 8001814:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	0e5b      	lsrs	r3, r3, #25
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	3301      	adds	r3, #1
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001830:	69bb      	ldr	r3, [r7, #24]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	080028a8 	.word	0x080028a8
 8001848:	00f42400 	.word	0x00f42400
 800184c:	007a1200 	.word	0x007a1200

08001850 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001868:	f7ff fa00 	bl	8000c6c <HAL_PWREx_GetVoltageRange>
 800186c:	6178      	str	r0, [r7, #20]
 800186e:	e014      	b.n	800189a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	4a24      	ldr	r2, [pc, #144]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187a:	6593      	str	r3, [r2, #88]	; 0x58
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001888:	f7ff f9f0 	bl	8000c6c <HAL_PWREx_GetVoltageRange>
 800188c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800188e:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001898:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a0:	d10b      	bne.n	80018ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b80      	cmp	r3, #128	; 0x80
 80018a6:	d919      	bls.n	80018dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2ba0      	cmp	r3, #160	; 0xa0
 80018ac:	d902      	bls.n	80018b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018ae:	2302      	movs	r3, #2
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	e013      	b.n	80018dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018b4:	2301      	movs	r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	e010      	b.n	80018dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b80      	cmp	r3, #128	; 0x80
 80018be:	d902      	bls.n	80018c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018c0:	2303      	movs	r3, #3
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	e00a      	b.n	80018dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b80      	cmp	r3, #128	; 0x80
 80018ca:	d102      	bne.n	80018d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018cc:	2302      	movs	r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	e004      	b.n	80018dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b70      	cmp	r3, #112	; 0x70
 80018d6:	d101      	bne.n	80018dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018d8:	2301      	movs	r3, #1
 80018da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 0207 	bic.w	r2, r3, #7
 80018e4:	4909      	ldr	r1, [pc, #36]	; (800190c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d001      	beq.n	80018fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	40022000 	.word	0x40022000

08001910 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e049      	b.n	80019d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7fe fdd6 	bl	8000508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3304      	adds	r3, #4
 800196c:	4619      	mov	r1, r3
 800196e:	4610      	mov	r0, r2
 8001970:	f000 fb52 	bl	8002018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e049      	b.n	8001a84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d106      	bne.n	8001a0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f841 	bl	8001a8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	f000 fafb 	bl	8002018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d109      	bne.n	8001ac4 <HAL_TIM_PWM_Start+0x24>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	bf14      	ite	ne
 8001abc:	2301      	movne	r3, #1
 8001abe:	2300      	moveq	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	e03c      	b.n	8001b3e <HAL_TIM_PWM_Start+0x9e>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d109      	bne.n	8001ade <HAL_TIM_PWM_Start+0x3e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	bf14      	ite	ne
 8001ad6:	2301      	movne	r3, #1
 8001ad8:	2300      	moveq	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	e02f      	b.n	8001b3e <HAL_TIM_PWM_Start+0x9e>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d109      	bne.n	8001af8 <HAL_TIM_PWM_Start+0x58>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	e022      	b.n	8001b3e <HAL_TIM_PWM_Start+0x9e>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	d109      	bne.n	8001b12 <HAL_TIM_PWM_Start+0x72>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	bf14      	ite	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	2300      	moveq	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	e015      	b.n	8001b3e <HAL_TIM_PWM_Start+0x9e>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b10      	cmp	r3, #16
 8001b16:	d109      	bne.n	8001b2c <HAL_TIM_PWM_Start+0x8c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	bf14      	ite	ne
 8001b24:	2301      	movne	r3, #1
 8001b26:	2300      	moveq	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	e008      	b.n	8001b3e <HAL_TIM_PWM_Start+0x9e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	bf14      	ite	ne
 8001b38:	2301      	movne	r3, #1
 8001b3a:	2300      	moveq	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e07e      	b.n	8001c44 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d104      	bne.n	8001b56 <HAL_TIM_PWM_Start+0xb6>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b54:	e023      	b.n	8001b9e <HAL_TIM_PWM_Start+0xfe>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d104      	bne.n	8001b66 <HAL_TIM_PWM_Start+0xc6>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b64:	e01b      	b.n	8001b9e <HAL_TIM_PWM_Start+0xfe>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d104      	bne.n	8001b76 <HAL_TIM_PWM_Start+0xd6>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b74:	e013      	b.n	8001b9e <HAL_TIM_PWM_Start+0xfe>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	d104      	bne.n	8001b86 <HAL_TIM_PWM_Start+0xe6>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b84:	e00b      	b.n	8001b9e <HAL_TIM_PWM_Start+0xfe>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b10      	cmp	r3, #16
 8001b8a:	d104      	bne.n	8001b96 <HAL_TIM_PWM_Start+0xf6>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b94:	e003      	b.n	8001b9e <HAL_TIM_PWM_Start+0xfe>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	6839      	ldr	r1, [r7, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 fdb2 	bl	8002710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <HAL_TIM_PWM_Start+0x1ac>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d009      	beq.n	8001bca <HAL_TIM_PWM_Start+0x12a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a25      	ldr	r2, [pc, #148]	; (8001c50 <HAL_TIM_PWM_Start+0x1b0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d004      	beq.n	8001bca <HAL_TIM_PWM_Start+0x12a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_TIM_PWM_Start+0x1b4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_TIM_PWM_Start+0x12e>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_TIM_PWM_Start+0x130>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001be2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a18      	ldr	r2, [pc, #96]	; (8001c4c <HAL_TIM_PWM_Start+0x1ac>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d009      	beq.n	8001c02 <HAL_TIM_PWM_Start+0x162>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf6:	d004      	beq.n	8001c02 <HAL_TIM_PWM_Start+0x162>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_TIM_PWM_Start+0x1b0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d115      	bne.n	8001c2e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_TIM_PWM_Start+0x1b8>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d015      	beq.n	8001c40 <HAL_TIM_PWM_Start+0x1a0>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1a:	d011      	beq.n	8001c40 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2c:	e008      	b.n	8001c40 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e000      	b.n	8001c42 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40012c00 	.word	0x40012c00
 8001c50:	40014000 	.word	0x40014000
 8001c54:	40014400 	.word	0x40014400
 8001c58:	00010007 	.word	0x00010007

08001c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e0ff      	b.n	8001e7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b14      	cmp	r3, #20
 8001c86:	f200 80f0 	bhi.w	8001e6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001c8a:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c90:	08001ce5 	.word	0x08001ce5
 8001c94:	08001e6b 	.word	0x08001e6b
 8001c98:	08001e6b 	.word	0x08001e6b
 8001c9c:	08001e6b 	.word	0x08001e6b
 8001ca0:	08001d25 	.word	0x08001d25
 8001ca4:	08001e6b 	.word	0x08001e6b
 8001ca8:	08001e6b 	.word	0x08001e6b
 8001cac:	08001e6b 	.word	0x08001e6b
 8001cb0:	08001d67 	.word	0x08001d67
 8001cb4:	08001e6b 	.word	0x08001e6b
 8001cb8:	08001e6b 	.word	0x08001e6b
 8001cbc:	08001e6b 	.word	0x08001e6b
 8001cc0:	08001da7 	.word	0x08001da7
 8001cc4:	08001e6b 	.word	0x08001e6b
 8001cc8:	08001e6b 	.word	0x08001e6b
 8001ccc:	08001e6b 	.word	0x08001e6b
 8001cd0:	08001de9 	.word	0x08001de9
 8001cd4:	08001e6b 	.word	0x08001e6b
 8001cd8:	08001e6b 	.word	0x08001e6b
 8001cdc:	08001e6b 	.word	0x08001e6b
 8001ce0:	08001e29 	.word	0x08001e29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f9f8 	bl	80020e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0208 	orr.w	r2, r2, #8
 8001cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699a      	ldr	r2, [r3, #24]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0204 	bic.w	r2, r2, #4
 8001d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6999      	ldr	r1, [r3, #24]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	619a      	str	r2, [r3, #24]
      break;
 8001d22:	e0a5      	b.n	8001e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fa54 	bl	80021d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6999      	ldr	r1, [r3, #24]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	021a      	lsls	r2, r3, #8
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	619a      	str	r2, [r3, #24]
      break;
 8001d64:	e084      	b.n	8001e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68b9      	ldr	r1, [r7, #8]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 faad 	bl	80022cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	69da      	ldr	r2, [r3, #28]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0208 	orr.w	r2, r2, #8
 8001d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69da      	ldr	r2, [r3, #28]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0204 	bic.w	r2, r2, #4
 8001d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69d9      	ldr	r1, [r3, #28]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	61da      	str	r2, [r3, #28]
      break;
 8001da4:	e064      	b.n	8001e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fb05 	bl	80023bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69da      	ldr	r2, [r3, #28]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69da      	ldr	r2, [r3, #28]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69d9      	ldr	r1, [r3, #28]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	021a      	lsls	r2, r3, #8
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	61da      	str	r2, [r3, #28]
      break;
 8001de6:	e043      	b.n	8001e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 fb42 	bl	8002478 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0208 	orr.w	r2, r2, #8
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0204 	bic.w	r2, r2, #4
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001e26:	e023      	b.n	8001e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fb7a 	bl	8002528 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	021a      	lsls	r2, r3, #8
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001e68:	e002      	b.n	8001e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8001e6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop

08001e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e0b6      	b.n	800200e <HAL_TIM_ConfigClockSource+0x18a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001eca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001edc:	d03e      	beq.n	8001f5c <HAL_TIM_ConfigClockSource+0xd8>
 8001ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee2:	f200 8087 	bhi.w	8001ff4 <HAL_TIM_ConfigClockSource+0x170>
 8001ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eea:	f000 8086 	beq.w	8001ffa <HAL_TIM_ConfigClockSource+0x176>
 8001eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef2:	d87f      	bhi.n	8001ff4 <HAL_TIM_ConfigClockSource+0x170>
 8001ef4:	2b70      	cmp	r3, #112	; 0x70
 8001ef6:	d01a      	beq.n	8001f2e <HAL_TIM_ConfigClockSource+0xaa>
 8001ef8:	2b70      	cmp	r3, #112	; 0x70
 8001efa:	d87b      	bhi.n	8001ff4 <HAL_TIM_ConfigClockSource+0x170>
 8001efc:	2b60      	cmp	r3, #96	; 0x60
 8001efe:	d050      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0x11e>
 8001f00:	2b60      	cmp	r3, #96	; 0x60
 8001f02:	d877      	bhi.n	8001ff4 <HAL_TIM_ConfigClockSource+0x170>
 8001f04:	2b50      	cmp	r3, #80	; 0x50
 8001f06:	d03c      	beq.n	8001f82 <HAL_TIM_ConfigClockSource+0xfe>
 8001f08:	2b50      	cmp	r3, #80	; 0x50
 8001f0a:	d873      	bhi.n	8001ff4 <HAL_TIM_ConfigClockSource+0x170>
 8001f0c:	2b40      	cmp	r3, #64	; 0x40
 8001f0e:	d058      	beq.n	8001fc2 <HAL_TIM_ConfigClockSource+0x13e>
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d86f      	bhi.n	8001ff4 <HAL_TIM_ConfigClockSource+0x170>
 8001f14:	2b30      	cmp	r3, #48	; 0x30
 8001f16:	d064      	beq.n	8001fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8001f18:	2b30      	cmp	r3, #48	; 0x30
 8001f1a:	d86b      	bhi.n	8001ff4 <HAL_TIM_ConfigClockSource+0x170>
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d060      	beq.n	8001fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d867      	bhi.n	8001ff4 <HAL_TIM_ConfigClockSource+0x170>
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d05c      	beq.n	8001fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8001f28:	2b10      	cmp	r3, #16
 8001f2a:	d05a      	beq.n	8001fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8001f2c:	e062      	b.n	8001ff4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6899      	ldr	r1, [r3, #8]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f000 fbc7 	bl	80026d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	609a      	str	r2, [r3, #8]
      break;
 8001f5a:	e04f      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6899      	ldr	r1, [r3, #8]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f000 fbb0 	bl	80026d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f7e:	609a      	str	r2, [r3, #8]
      break;
 8001f80:	e03c      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6859      	ldr	r1, [r3, #4]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f000 fb24 	bl	80025dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2150      	movs	r1, #80	; 0x50
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fb7d 	bl	800269a <TIM_ITRx_SetConfig>
      break;
 8001fa0:	e02c      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f000 fb43 	bl	800263a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2160      	movs	r1, #96	; 0x60
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fb6d 	bl	800269a <TIM_ITRx_SetConfig>
      break;
 8001fc0:	e01c      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6859      	ldr	r1, [r3, #4]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f000 fb04 	bl	80025dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2140      	movs	r1, #64	; 0x40
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fb5d 	bl	800269a <TIM_ITRx_SetConfig>
      break;
 8001fe0:	e00c      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4619      	mov	r1, r3
 8001fec:	4610      	mov	r0, r2
 8001fee:	f000 fb54 	bl	800269a <TIM_ITRx_SetConfig>
      break;
 8001ff2:	e003      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff8:	e000      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8001ffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <TIM_Base_SetConfig+0xbc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d003      	beq.n	8002038 <TIM_Base_SetConfig+0x20>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002036:	d108      	bne.n	800204a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <TIM_Base_SetConfig+0xbc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00b      	beq.n	800206a <TIM_Base_SetConfig+0x52>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002058:	d007      	beq.n	800206a <TIM_Base_SetConfig+0x52>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <TIM_Base_SetConfig+0xc0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d003      	beq.n	800206a <TIM_Base_SetConfig+0x52>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <TIM_Base_SetConfig+0xc4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d108      	bne.n	800207c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <TIM_Base_SetConfig+0xbc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d007      	beq.n	80020b8 <TIM_Base_SetConfig+0xa0>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <TIM_Base_SetConfig+0xc0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d003      	beq.n	80020b8 <TIM_Base_SetConfig+0xa0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <TIM_Base_SetConfig+0xc4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d103      	bne.n	80020c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	615a      	str	r2, [r3, #20]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	40014000 	.word	0x40014000
 80020dc:	40014400 	.word	0x40014400

080020e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	f023 0201 	bic.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f023 0303 	bic.w	r3, r3, #3
 800211a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f023 0302 	bic.w	r3, r3, #2
 800212c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a24      	ldr	r2, [pc, #144]	; (80021cc <TIM_OC1_SetConfig+0xec>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d007      	beq.n	8002150 <TIM_OC1_SetConfig+0x70>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <TIM_OC1_SetConfig+0xf0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d003      	beq.n	8002150 <TIM_OC1_SetConfig+0x70>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a22      	ldr	r2, [pc, #136]	; (80021d4 <TIM_OC1_SetConfig+0xf4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d10c      	bne.n	800216a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f023 0308 	bic.w	r3, r3, #8
 8002156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <TIM_OC1_SetConfig+0xec>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <TIM_OC1_SetConfig+0xa2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a16      	ldr	r2, [pc, #88]	; (80021d0 <TIM_OC1_SetConfig+0xf0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d003      	beq.n	8002182 <TIM_OC1_SetConfig+0xa2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <TIM_OC1_SetConfig+0xf4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d111      	bne.n	80021a6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	621a      	str	r2, [r3, #32]
}
 80021c0:	bf00      	nop
 80021c2:	371c      	adds	r7, #28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40012c00 	.word	0x40012c00
 80021d0:	40014000 	.word	0x40014000
 80021d4:	40014400 	.word	0x40014400

080021d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	f023 0210 	bic.w	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800220a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f023 0320 	bic.w	r3, r3, #32
 8002226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4313      	orrs	r3, r2
 8002232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <TIM_OC2_SetConfig+0xe8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d10d      	bne.n	8002258 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002256:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <TIM_OC2_SetConfig+0xe8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d007      	beq.n	8002270 <TIM_OC2_SetConfig+0x98>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <TIM_OC2_SetConfig+0xec>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d003      	beq.n	8002270 <TIM_OC2_SetConfig+0x98>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <TIM_OC2_SetConfig+0xf0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d113      	bne.n	8002298 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800227e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	621a      	str	r2, [r3, #32]
}
 80022b2:	bf00      	nop
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40012c00 	.word	0x40012c00
 80022c4:	40014000 	.word	0x40014000
 80022c8:	40014400 	.word	0x40014400

080022cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a21      	ldr	r2, [pc, #132]	; (80023b0 <TIM_OC3_SetConfig+0xe4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10d      	bne.n	800234a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	4313      	orrs	r3, r2
 8002340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <TIM_OC3_SetConfig+0xe4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <TIM_OC3_SetConfig+0x96>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a17      	ldr	r2, [pc, #92]	; (80023b4 <TIM_OC3_SetConfig+0xe8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d003      	beq.n	8002362 <TIM_OC3_SetConfig+0x96>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <TIM_OC3_SetConfig+0xec>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d113      	bne.n	800238a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	621a      	str	r2, [r3, #32]
}
 80023a4:	bf00      	nop
 80023a6:	371c      	adds	r7, #28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40014000 	.word	0x40014000
 80023b8:	40014400 	.word	0x40014400

080023bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800240a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	031b      	lsls	r3, r3, #12
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a14      	ldr	r2, [pc, #80]	; (800246c <TIM_OC4_SetConfig+0xb0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d007      	beq.n	8002430 <TIM_OC4_SetConfig+0x74>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a13      	ldr	r2, [pc, #76]	; (8002470 <TIM_OC4_SetConfig+0xb4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d003      	beq.n	8002430 <TIM_OC4_SetConfig+0x74>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <TIM_OC4_SetConfig+0xb8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d109      	bne.n	8002444 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	019b      	lsls	r3, r3, #6
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	621a      	str	r2, [r3, #32]
}
 800245e:	bf00      	nop
 8002460:	371c      	adds	r7, #28
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40012c00 	.word	0x40012c00
 8002470:	40014000 	.word	0x40014000
 8002474:	40014400 	.word	0x40014400

08002478 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80024bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	041b      	lsls	r3, r3, #16
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a13      	ldr	r2, [pc, #76]	; (800251c <TIM_OC5_SetConfig+0xa4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d007      	beq.n	80024e2 <TIM_OC5_SetConfig+0x6a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a12      	ldr	r2, [pc, #72]	; (8002520 <TIM_OC5_SetConfig+0xa8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d003      	beq.n	80024e2 <TIM_OC5_SetConfig+0x6a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a11      	ldr	r2, [pc, #68]	; (8002524 <TIM_OC5_SetConfig+0xac>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d109      	bne.n	80024f6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	621a      	str	r2, [r3, #32]
}
 8002510:	bf00      	nop
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40012c00 	.word	0x40012c00
 8002520:	40014000 	.word	0x40014000
 8002524:	40014400 	.word	0x40014400

08002528 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800255a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800256e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	051b      	lsls	r3, r3, #20
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <TIM_OC6_SetConfig+0xa8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d007      	beq.n	8002594 <TIM_OC6_SetConfig+0x6c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <TIM_OC6_SetConfig+0xac>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d003      	beq.n	8002594 <TIM_OC6_SetConfig+0x6c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <TIM_OC6_SetConfig+0xb0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d109      	bne.n	80025a8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	029b      	lsls	r3, r3, #10
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	621a      	str	r2, [r3, #32]
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40012c00 	.word	0x40012c00
 80025d4:	40014000 	.word	0x40014000
 80025d8:	40014400 	.word	0x40014400

080025dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	f023 0201 	bic.w	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f023 030a 	bic.w	r3, r3, #10
 8002618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	621a      	str	r2, [r3, #32]
}
 800262e:	bf00      	nop
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800263a:	b480      	push	{r7}
 800263c:	b087      	sub	sp, #28
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f023 0210 	bic.w	r2, r3, #16
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	031b      	lsls	r3, r3, #12
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002676:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	621a      	str	r2, [r3, #32]
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800269a:	b480      	push	{r7}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f043 0307 	orr.w	r3, r3, #7
 80026bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	609a      	str	r2, [r3, #8]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	021a      	lsls	r2, r3, #8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	609a      	str	r2, [r3, #8]
}
 8002704:	bf00      	nop
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	2201      	movs	r2, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a1a      	ldr	r2, [r3, #32]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a1a      	ldr	r2, [r3, #32]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	431a      	orrs	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	621a      	str	r2, [r3, #32]
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002770:	2302      	movs	r3, #2
 8002772:	e04f      	b.n	8002814 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a21      	ldr	r2, [pc, #132]	; (8002820 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d108      	bne.n	80027b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80027a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a14      	ldr	r2, [pc, #80]	; (8002820 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d009      	beq.n	80027e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027dc:	d004      	beq.n	80027e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a10      	ldr	r2, [pc, #64]	; (8002824 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d10c      	bne.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	40012c00 	.word	0x40012c00
 8002824:	40014000 	.word	0x40014000

08002828 <__libc_init_array>:
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	4d0d      	ldr	r5, [pc, #52]	; (8002860 <__libc_init_array+0x38>)
 800282c:	4c0d      	ldr	r4, [pc, #52]	; (8002864 <__libc_init_array+0x3c>)
 800282e:	1b64      	subs	r4, r4, r5
 8002830:	10a4      	asrs	r4, r4, #2
 8002832:	2600      	movs	r6, #0
 8002834:	42a6      	cmp	r6, r4
 8002836:	d109      	bne.n	800284c <__libc_init_array+0x24>
 8002838:	4d0b      	ldr	r5, [pc, #44]	; (8002868 <__libc_init_array+0x40>)
 800283a:	4c0c      	ldr	r4, [pc, #48]	; (800286c <__libc_init_array+0x44>)
 800283c:	f000 f820 	bl	8002880 <_init>
 8002840:	1b64      	subs	r4, r4, r5
 8002842:	10a4      	asrs	r4, r4, #2
 8002844:	2600      	movs	r6, #0
 8002846:	42a6      	cmp	r6, r4
 8002848:	d105      	bne.n	8002856 <__libc_init_array+0x2e>
 800284a:	bd70      	pop	{r4, r5, r6, pc}
 800284c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002850:	4798      	blx	r3
 8002852:	3601      	adds	r6, #1
 8002854:	e7ee      	b.n	8002834 <__libc_init_array+0xc>
 8002856:	f855 3b04 	ldr.w	r3, [r5], #4
 800285a:	4798      	blx	r3
 800285c:	3601      	adds	r6, #1
 800285e:	e7f2      	b.n	8002846 <__libc_init_array+0x1e>
 8002860:	080028d8 	.word	0x080028d8
 8002864:	080028d8 	.word	0x080028d8
 8002868:	080028d8 	.word	0x080028d8
 800286c:	080028dc 	.word	0x080028dc

08002870 <memset>:
 8002870:	4402      	add	r2, r0
 8002872:	4603      	mov	r3, r0
 8002874:	4293      	cmp	r3, r2
 8002876:	d100      	bne.n	800287a <memset+0xa>
 8002878:	4770      	bx	lr
 800287a:	f803 1b01 	strb.w	r1, [r3], #1
 800287e:	e7f9      	b.n	8002874 <memset+0x4>

08002880 <_init>:
 8002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002882:	bf00      	nop
 8002884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002886:	bc08      	pop	{r3}
 8002888:	469e      	mov	lr, r3
 800288a:	4770      	bx	lr

0800288c <_fini>:
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288e:	bf00      	nop
 8002890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002892:	bc08      	pop	{r3}
 8002894:	469e      	mov	lr, r3
 8002896:	4770      	bx	lr

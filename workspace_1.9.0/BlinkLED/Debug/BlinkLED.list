
BlinkLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006078  08006078  00016078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006118  08006118  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006120  08006120  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006120  08006120  00016120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006124  08006124  00016124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08006198  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08006198  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001460c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002772  00000000  00000000  000346ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00036e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  000380a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b64  00000000  00000000  00039218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dad  00000000  00000000  0005ad7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc87a  00000000  00000000  00070b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d3a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c8  00000000  00000000  0013d3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006060 	.word	0x08006060

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006060 	.word	0x08006060

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__gedf2>:
 80005e8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ec:	e006      	b.n	80005fc <__cmpdf2+0x4>
 80005ee:	bf00      	nop

080005f0 <__ledf2>:
 80005f0:	f04f 0c01 	mov.w	ip, #1
 80005f4:	e002      	b.n	80005fc <__cmpdf2+0x4>
 80005f6:	bf00      	nop

080005f8 <__cmpdf2>:
 80005f8:	f04f 0c01 	mov.w	ip, #1
 80005fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000600:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000604:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000608:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800060c:	bf18      	it	ne
 800060e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000612:	d01b      	beq.n	800064c <__cmpdf2+0x54>
 8000614:	b001      	add	sp, #4
 8000616:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800061a:	bf0c      	ite	eq
 800061c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000620:	ea91 0f03 	teqne	r1, r3
 8000624:	bf02      	ittt	eq
 8000626:	ea90 0f02 	teqeq	r0, r2
 800062a:	2000      	moveq	r0, #0
 800062c:	4770      	bxeq	lr
 800062e:	f110 0f00 	cmn.w	r0, #0
 8000632:	ea91 0f03 	teq	r1, r3
 8000636:	bf58      	it	pl
 8000638:	4299      	cmppl	r1, r3
 800063a:	bf08      	it	eq
 800063c:	4290      	cmpeq	r0, r2
 800063e:	bf2c      	ite	cs
 8000640:	17d8      	asrcs	r0, r3, #31
 8000642:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000646:	f040 0001 	orr.w	r0, r0, #1
 800064a:	4770      	bx	lr
 800064c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000650:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000654:	d102      	bne.n	800065c <__cmpdf2+0x64>
 8000656:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800065a:	d107      	bne.n	800066c <__cmpdf2+0x74>
 800065c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d1d6      	bne.n	8000614 <__cmpdf2+0x1c>
 8000666:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800066a:	d0d3      	beq.n	8000614 <__cmpdf2+0x1c>
 800066c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <__aeabi_cdrcmple>:
 8000674:	4684      	mov	ip, r0
 8000676:	4610      	mov	r0, r2
 8000678:	4662      	mov	r2, ip
 800067a:	468c      	mov	ip, r1
 800067c:	4619      	mov	r1, r3
 800067e:	4663      	mov	r3, ip
 8000680:	e000      	b.n	8000684 <__aeabi_cdcmpeq>
 8000682:	bf00      	nop

08000684 <__aeabi_cdcmpeq>:
 8000684:	b501      	push	{r0, lr}
 8000686:	f7ff ffb7 	bl	80005f8 <__cmpdf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd01      	pop	{r0, pc}

08000694 <__aeabi_dcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cdcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_dcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cdcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_dcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cdcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_dcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffce 	bl	8000674 <__aeabi_cdrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_dcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc4 	bl	8000674 <__aeabi_cdrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_d2iz>:
 80006f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000700:	d215      	bcs.n	800072e <__aeabi_d2iz+0x36>
 8000702:	d511      	bpl.n	8000728 <__aeabi_d2iz+0x30>
 8000704:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000708:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800070c:	d912      	bls.n	8000734 <__aeabi_d2iz+0x3c>
 800070e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000716:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800071a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800071e:	fa23 f002 	lsr.w	r0, r3, r2
 8000722:	bf18      	it	ne
 8000724:	4240      	negne	r0, r0
 8000726:	4770      	bx	lr
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	4770      	bx	lr
 800072e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000732:	d105      	bne.n	8000740 <__aeabi_d2iz+0x48>
 8000734:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000738:	bf08      	it	eq
 800073a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800073e:	4770      	bx	lr
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <__aeabi_uldivmod>:
 8000748:	b953      	cbnz	r3, 8000760 <__aeabi_uldivmod+0x18>
 800074a:	b94a      	cbnz	r2, 8000760 <__aeabi_uldivmod+0x18>
 800074c:	2900      	cmp	r1, #0
 800074e:	bf08      	it	eq
 8000750:	2800      	cmpeq	r0, #0
 8000752:	bf1c      	itt	ne
 8000754:	f04f 31ff 	movne.w	r1, #4294967295
 8000758:	f04f 30ff 	movne.w	r0, #4294967295
 800075c:	f000 b974 	b.w	8000a48 <__aeabi_idiv0>
 8000760:	f1ad 0c08 	sub.w	ip, sp, #8
 8000764:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000768:	f000 f806 	bl	8000778 <__udivmoddi4>
 800076c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000774:	b004      	add	sp, #16
 8000776:	4770      	bx	lr

08000778 <__udivmoddi4>:
 8000778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800077c:	9d08      	ldr	r5, [sp, #32]
 800077e:	4604      	mov	r4, r0
 8000780:	468e      	mov	lr, r1
 8000782:	2b00      	cmp	r3, #0
 8000784:	d14d      	bne.n	8000822 <__udivmoddi4+0xaa>
 8000786:	428a      	cmp	r2, r1
 8000788:	4694      	mov	ip, r2
 800078a:	d969      	bls.n	8000860 <__udivmoddi4+0xe8>
 800078c:	fab2 f282 	clz	r2, r2
 8000790:	b152      	cbz	r2, 80007a8 <__udivmoddi4+0x30>
 8000792:	fa01 f302 	lsl.w	r3, r1, r2
 8000796:	f1c2 0120 	rsb	r1, r2, #32
 800079a:	fa20 f101 	lsr.w	r1, r0, r1
 800079e:	fa0c fc02 	lsl.w	ip, ip, r2
 80007a2:	ea41 0e03 	orr.w	lr, r1, r3
 80007a6:	4094      	lsls	r4, r2
 80007a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007ac:	0c21      	lsrs	r1, r4, #16
 80007ae:	fbbe f6f8 	udiv	r6, lr, r8
 80007b2:	fa1f f78c 	uxth.w	r7, ip
 80007b6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007be:	fb06 f107 	mul.w	r1, r6, r7
 80007c2:	4299      	cmp	r1, r3
 80007c4:	d90a      	bls.n	80007dc <__udivmoddi4+0x64>
 80007c6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80007ce:	f080 811f 	bcs.w	8000a10 <__udivmoddi4+0x298>
 80007d2:	4299      	cmp	r1, r3
 80007d4:	f240 811c 	bls.w	8000a10 <__udivmoddi4+0x298>
 80007d8:	3e02      	subs	r6, #2
 80007da:	4463      	add	r3, ip
 80007dc:	1a5b      	subs	r3, r3, r1
 80007de:	b2a4      	uxth	r4, r4
 80007e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007e4:	fb08 3310 	mls	r3, r8, r0, r3
 80007e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ec:	fb00 f707 	mul.w	r7, r0, r7
 80007f0:	42a7      	cmp	r7, r4
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x92>
 80007f4:	eb1c 0404 	adds.w	r4, ip, r4
 80007f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007fc:	f080 810a 	bcs.w	8000a14 <__udivmoddi4+0x29c>
 8000800:	42a7      	cmp	r7, r4
 8000802:	f240 8107 	bls.w	8000a14 <__udivmoddi4+0x29c>
 8000806:	4464      	add	r4, ip
 8000808:	3802      	subs	r0, #2
 800080a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800080e:	1be4      	subs	r4, r4, r7
 8000810:	2600      	movs	r6, #0
 8000812:	b11d      	cbz	r5, 800081c <__udivmoddi4+0xa4>
 8000814:	40d4      	lsrs	r4, r2
 8000816:	2300      	movs	r3, #0
 8000818:	e9c5 4300 	strd	r4, r3, [r5]
 800081c:	4631      	mov	r1, r6
 800081e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000822:	428b      	cmp	r3, r1
 8000824:	d909      	bls.n	800083a <__udivmoddi4+0xc2>
 8000826:	2d00      	cmp	r5, #0
 8000828:	f000 80ef 	beq.w	8000a0a <__udivmoddi4+0x292>
 800082c:	2600      	movs	r6, #0
 800082e:	e9c5 0100 	strd	r0, r1, [r5]
 8000832:	4630      	mov	r0, r6
 8000834:	4631      	mov	r1, r6
 8000836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083a:	fab3 f683 	clz	r6, r3
 800083e:	2e00      	cmp	r6, #0
 8000840:	d14a      	bne.n	80008d8 <__udivmoddi4+0x160>
 8000842:	428b      	cmp	r3, r1
 8000844:	d302      	bcc.n	800084c <__udivmoddi4+0xd4>
 8000846:	4282      	cmp	r2, r0
 8000848:	f200 80f9 	bhi.w	8000a3e <__udivmoddi4+0x2c6>
 800084c:	1a84      	subs	r4, r0, r2
 800084e:	eb61 0303 	sbc.w	r3, r1, r3
 8000852:	2001      	movs	r0, #1
 8000854:	469e      	mov	lr, r3
 8000856:	2d00      	cmp	r5, #0
 8000858:	d0e0      	beq.n	800081c <__udivmoddi4+0xa4>
 800085a:	e9c5 4e00 	strd	r4, lr, [r5]
 800085e:	e7dd      	b.n	800081c <__udivmoddi4+0xa4>
 8000860:	b902      	cbnz	r2, 8000864 <__udivmoddi4+0xec>
 8000862:	deff      	udf	#255	; 0xff
 8000864:	fab2 f282 	clz	r2, r2
 8000868:	2a00      	cmp	r2, #0
 800086a:	f040 8092 	bne.w	8000992 <__udivmoddi4+0x21a>
 800086e:	eba1 010c 	sub.w	r1, r1, ip
 8000872:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000876:	fa1f fe8c 	uxth.w	lr, ip
 800087a:	2601      	movs	r6, #1
 800087c:	0c20      	lsrs	r0, r4, #16
 800087e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000882:	fb07 1113 	mls	r1, r7, r3, r1
 8000886:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800088a:	fb0e f003 	mul.w	r0, lr, r3
 800088e:	4288      	cmp	r0, r1
 8000890:	d908      	bls.n	80008a4 <__udivmoddi4+0x12c>
 8000892:	eb1c 0101 	adds.w	r1, ip, r1
 8000896:	f103 38ff 	add.w	r8, r3, #4294967295
 800089a:	d202      	bcs.n	80008a2 <__udivmoddi4+0x12a>
 800089c:	4288      	cmp	r0, r1
 800089e:	f200 80cb 	bhi.w	8000a38 <__udivmoddi4+0x2c0>
 80008a2:	4643      	mov	r3, r8
 80008a4:	1a09      	subs	r1, r1, r0
 80008a6:	b2a4      	uxth	r4, r4
 80008a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ac:	fb07 1110 	mls	r1, r7, r0, r1
 80008b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008b4:	fb0e fe00 	mul.w	lr, lr, r0
 80008b8:	45a6      	cmp	lr, r4
 80008ba:	d908      	bls.n	80008ce <__udivmoddi4+0x156>
 80008bc:	eb1c 0404 	adds.w	r4, ip, r4
 80008c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008c4:	d202      	bcs.n	80008cc <__udivmoddi4+0x154>
 80008c6:	45a6      	cmp	lr, r4
 80008c8:	f200 80bb 	bhi.w	8000a42 <__udivmoddi4+0x2ca>
 80008cc:	4608      	mov	r0, r1
 80008ce:	eba4 040e 	sub.w	r4, r4, lr
 80008d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008d6:	e79c      	b.n	8000812 <__udivmoddi4+0x9a>
 80008d8:	f1c6 0720 	rsb	r7, r6, #32
 80008dc:	40b3      	lsls	r3, r6
 80008de:	fa22 fc07 	lsr.w	ip, r2, r7
 80008e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008e6:	fa20 f407 	lsr.w	r4, r0, r7
 80008ea:	fa01 f306 	lsl.w	r3, r1, r6
 80008ee:	431c      	orrs	r4, r3
 80008f0:	40f9      	lsrs	r1, r7
 80008f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008f6:	fa00 f306 	lsl.w	r3, r0, r6
 80008fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80008fe:	0c20      	lsrs	r0, r4, #16
 8000900:	fa1f fe8c 	uxth.w	lr, ip
 8000904:	fb09 1118 	mls	r1, r9, r8, r1
 8000908:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800090c:	fb08 f00e 	mul.w	r0, r8, lr
 8000910:	4288      	cmp	r0, r1
 8000912:	fa02 f206 	lsl.w	r2, r2, r6
 8000916:	d90b      	bls.n	8000930 <__udivmoddi4+0x1b8>
 8000918:	eb1c 0101 	adds.w	r1, ip, r1
 800091c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000920:	f080 8088 	bcs.w	8000a34 <__udivmoddi4+0x2bc>
 8000924:	4288      	cmp	r0, r1
 8000926:	f240 8085 	bls.w	8000a34 <__udivmoddi4+0x2bc>
 800092a:	f1a8 0802 	sub.w	r8, r8, #2
 800092e:	4461      	add	r1, ip
 8000930:	1a09      	subs	r1, r1, r0
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb1 f0f9 	udiv	r0, r1, r9
 8000938:	fb09 1110 	mls	r1, r9, r0, r1
 800093c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000940:	fb00 fe0e 	mul.w	lr, r0, lr
 8000944:	458e      	cmp	lr, r1
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x1e2>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000950:	d26c      	bcs.n	8000a2c <__udivmoddi4+0x2b4>
 8000952:	458e      	cmp	lr, r1
 8000954:	d96a      	bls.n	8000a2c <__udivmoddi4+0x2b4>
 8000956:	3802      	subs	r0, #2
 8000958:	4461      	add	r1, ip
 800095a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800095e:	fba0 9402 	umull	r9, r4, r0, r2
 8000962:	eba1 010e 	sub.w	r1, r1, lr
 8000966:	42a1      	cmp	r1, r4
 8000968:	46c8      	mov	r8, r9
 800096a:	46a6      	mov	lr, r4
 800096c:	d356      	bcc.n	8000a1c <__udivmoddi4+0x2a4>
 800096e:	d053      	beq.n	8000a18 <__udivmoddi4+0x2a0>
 8000970:	b15d      	cbz	r5, 800098a <__udivmoddi4+0x212>
 8000972:	ebb3 0208 	subs.w	r2, r3, r8
 8000976:	eb61 010e 	sbc.w	r1, r1, lr
 800097a:	fa01 f707 	lsl.w	r7, r1, r7
 800097e:	fa22 f306 	lsr.w	r3, r2, r6
 8000982:	40f1      	lsrs	r1, r6
 8000984:	431f      	orrs	r7, r3
 8000986:	e9c5 7100 	strd	r7, r1, [r5]
 800098a:	2600      	movs	r6, #0
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	f1c2 0320 	rsb	r3, r2, #32
 8000996:	40d8      	lsrs	r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	fa21 f303 	lsr.w	r3, r1, r3
 80009a0:	4091      	lsls	r1, r2
 80009a2:	4301      	orrs	r1, r0
 80009a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a8:	fa1f fe8c 	uxth.w	lr, ip
 80009ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80009b0:	fb07 3610 	mls	r6, r7, r0, r3
 80009b4:	0c0b      	lsrs	r3, r1, #16
 80009b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ba:	fb00 f60e 	mul.w	r6, r0, lr
 80009be:	429e      	cmp	r6, r3
 80009c0:	fa04 f402 	lsl.w	r4, r4, r2
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x260>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80009ce:	d22f      	bcs.n	8000a30 <__udivmoddi4+0x2b8>
 80009d0:	429e      	cmp	r6, r3
 80009d2:	d92d      	bls.n	8000a30 <__udivmoddi4+0x2b8>
 80009d4:	3802      	subs	r0, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1b9b      	subs	r3, r3, r6
 80009da:	b289      	uxth	r1, r1
 80009dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80009e0:	fb07 3316 	mls	r3, r7, r6, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb06 f30e 	mul.w	r3, r6, lr
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d908      	bls.n	8000a02 <__udivmoddi4+0x28a>
 80009f0:	eb1c 0101 	adds.w	r1, ip, r1
 80009f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80009f8:	d216      	bcs.n	8000a28 <__udivmoddi4+0x2b0>
 80009fa:	428b      	cmp	r3, r1
 80009fc:	d914      	bls.n	8000a28 <__udivmoddi4+0x2b0>
 80009fe:	3e02      	subs	r6, #2
 8000a00:	4461      	add	r1, ip
 8000a02:	1ac9      	subs	r1, r1, r3
 8000a04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a08:	e738      	b.n	800087c <__udivmoddi4+0x104>
 8000a0a:	462e      	mov	r6, r5
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	e705      	b.n	800081c <__udivmoddi4+0xa4>
 8000a10:	4606      	mov	r6, r0
 8000a12:	e6e3      	b.n	80007dc <__udivmoddi4+0x64>
 8000a14:	4618      	mov	r0, r3
 8000a16:	e6f8      	b.n	800080a <__udivmoddi4+0x92>
 8000a18:	454b      	cmp	r3, r9
 8000a1a:	d2a9      	bcs.n	8000970 <__udivmoddi4+0x1f8>
 8000a1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a24:	3801      	subs	r0, #1
 8000a26:	e7a3      	b.n	8000970 <__udivmoddi4+0x1f8>
 8000a28:	4646      	mov	r6, r8
 8000a2a:	e7ea      	b.n	8000a02 <__udivmoddi4+0x28a>
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	e794      	b.n	800095a <__udivmoddi4+0x1e2>
 8000a30:	4640      	mov	r0, r8
 8000a32:	e7d1      	b.n	80009d8 <__udivmoddi4+0x260>
 8000a34:	46d0      	mov	r8, sl
 8000a36:	e77b      	b.n	8000930 <__udivmoddi4+0x1b8>
 8000a38:	3b02      	subs	r3, #2
 8000a3a:	4461      	add	r1, ip
 8000a3c:	e732      	b.n	80008a4 <__udivmoddi4+0x12c>
 8000a3e:	4630      	mov	r0, r6
 8000a40:	e709      	b.n	8000856 <__udivmoddi4+0xde>
 8000a42:	4464      	add	r4, ip
 8000a44:	3802      	subs	r0, #2
 8000a46:	e742      	b.n	80008ce <__udivmoddi4+0x156>

08000a48 <__aeabi_idiv0>:
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8000a54:	224c      	movs	r2, #76	; 0x4c
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <MPU6050_Init+0x1c>)
 8000a5a:	f004 fe8b 	bl	8005774 <memcpy>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000008c 	.word	0x2000008c

08000a6c <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af02      	add	r7, sp, #8
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8000a7c:	23d0      	movs	r3, #208	; 0xd0
 8000a7e:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	b299      	uxth	r1, r3
 8000a88:	f107 020c 	add.w	r2, r7, #12
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2301      	movs	r3, #1
 8000a92:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <I2C_Read+0x48>)
 8000a94:	f001 fafa 	bl	800208c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	b299      	uxth	r1, r3
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	2264      	movs	r2, #100	; 0x64
 8000aa2:	9200      	str	r2, [sp, #0]
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <I2C_Read+0x48>)
 8000aa8:	f001 fbe4 	bl	8002274 <HAL_I2C_Master_Receive>
}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000008c 	.word	0x2000008c

08000ab8 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	4603      	mov	r3, r0
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8000acc:	79bb      	ldrb	r3, [r7, #6]
 8000ace:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8000ad0:	23d0      	movs	r3, #208	; 0xd0
 8000ad2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	b299      	uxth	r1, r3
 8000ad8:	f107 020c 	add.w	r2, r7, #12
 8000adc:	2364      	movs	r3, #100	; 0x64
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	4803      	ldr	r0, [pc, #12]	; (8000af0 <I2C_Write8+0x38>)
 8000ae4:	f001 fad2 	bl	800208c <HAL_I2C_Master_Transmit>
}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000008c 	.word	0x2000008c

08000af4 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	206b      	movs	r0, #107	; 0x6b
 8000b04:	f7ff ffd8 	bl	8000ab8 <I2C_Write8>
	HAL_Delay(100);
 8000b08:	2064      	movs	r0, #100	; 0x64
 8000b0a:	f000 ffa3 	bl	8001a54 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	791b      	ldrb	r3, [r3, #4]
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b24:	b25a      	sxtb	r2, r3
 8000b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	b25b      	sxtb	r3, r3
 8000b2e:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	4619      	mov	r1, r3
 8000b34:	206b      	movs	r0, #107	; 0x6b
 8000b36:	f7ff ffbf 	bl	8000ab8 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8000b3a:	2064      	movs	r0, #100	; 0x64
 8000b3c:	f000 ff8a 	bl	8001a54 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	78db      	ldrb	r3, [r3, #3]
 8000b48:	f003 0307 	and.w	r3, r3, #7
 8000b4c:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	4619      	mov	r1, r3
 8000b52:	201a      	movs	r0, #26
 8000b54:	f7ff ffb0 	bl	8000ab8 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	785b      	ldrb	r3, [r3, #1]
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	f003 0318 	and.w	r3, r3, #24
 8000b68:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	201b      	movs	r0, #27
 8000b70:	f7ff ffa2 	bl	8000ab8 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	789b      	ldrb	r3, [r3, #2]
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f003 0318 	and.w	r3, r3, #24
 8000b84:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	201c      	movs	r0, #28
 8000b8c:	f7ff ff94 	bl	8000ab8 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8000b90:	2004      	movs	r0, #4
 8000b92:	f000 f857 	bl	8000c44 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d81a      	bhi.n	8000bd4 <MPU6050_Config+0xe0>
 8000b9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <MPU6050_Config+0xb0>)
 8000ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba4:	08000bb5 	.word	0x08000bb5
 8000ba8:	08000bbd 	.word	0x08000bbd
 8000bac:	08000bc5 	.word	0x08000bc5
 8000bb0:	08000bcd 	.word	0x08000bcd
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MPU6050_Config+0x12c>)
 8000bb6:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <MPU6050_Config+0x130>)
 8000bb8:	601a      	str	r2, [r3, #0]
			break;
 8000bba:	e00c      	b.n	8000bd6 <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MPU6050_Config+0x12c>)
 8000bbe:	4a1a      	ldr	r2, [pc, #104]	; (8000c28 <MPU6050_Config+0x134>)
 8000bc0:	601a      	str	r2, [r3, #0]
				break;
 8000bc2:	e008      	b.n	8000bd6 <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MPU6050_Config+0x12c>)
 8000bc6:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <MPU6050_Config+0x138>)
 8000bc8:	601a      	str	r2, [r3, #0]
			break;
 8000bca:	e004      	b.n	8000bd6 <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MPU6050_Config+0x12c>)
 8000bce:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <MPU6050_Config+0x13c>)
 8000bd0:	601a      	str	r2, [r3, #0]
			break;
 8000bd2:	e000      	b.n	8000bd6 <MPU6050_Config+0xe2>
		
		default:
			break;
 8000bd4:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	785b      	ldrb	r3, [r3, #1]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d81a      	bhi.n	8000c14 <MPU6050_Config+0x120>
 8000bde:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <MPU6050_Config+0xf0>)
 8000be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be4:	08000bf5 	.word	0x08000bf5
 8000be8:	08000bfd 	.word	0x08000bfd
 8000bec:	08000c05 	.word	0x08000c05
 8000bf0:	08000c0d 	.word	0x08000c0d
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MPU6050_Config+0x140>)
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <MPU6050_Config+0x144>)
 8000bf8:	601a      	str	r2, [r3, #0]
			break;
 8000bfa:	e00c      	b.n	8000c16 <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <MPU6050_Config+0x140>)
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <MPU6050_Config+0x148>)
 8000c00:	601a      	str	r2, [r3, #0]
				break;
 8000c02:	e008      	b.n	8000c16 <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MPU6050_Config+0x140>)
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <MPU6050_Config+0x14c>)
 8000c08:	601a      	str	r2, [r3, #0]
			break;
 8000c0a:	e004      	b.n	8000c16 <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MPU6050_Config+0x140>)
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <MPU6050_Config+0x130>)
 8000c10:	601a      	str	r2, [r3, #0]
			break;
 8000c12:	e000      	b.n	8000c16 <MPU6050_Config+0x122>
		
		default:
			break;
 8000c14:	bf00      	nop
	}
	
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000d8 	.word	0x200000d8
 8000c24:	3d7a0000 	.word	0x3d7a0000
 8000c28:	3dfa0000 	.word	0x3dfa0000
 8000c2c:	3e7a0000 	.word	0x3e7a0000
 8000c30:	3efa0000 	.word	0x3efa0000
 8000c34:	200000dc 	.word	0x200000dc
 8000c38:	3bfa0000 	.word	0x3bfa0000
 8000c3c:	3c7a0000 	.word	0x3c7a0000
 8000c40:	3cfa0000 	.word	0x3cfa0000

08000c44 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4619      	mov	r1, r3
 8000c52:	2019      	movs	r0, #25
 8000c54:	f7ff ff30 	bl	8000ab8 <I2C_Write8>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4619      	mov	r1, r3
 8000c72:	203a      	movs	r0, #58	; 0x3a
 8000c74:	f7ff fefa 	bl	8000a6c <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8000c78:	7f7b      	ldrb	r3, [r7, #29]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d04f      	beq.n	8000d1e <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	2206      	movs	r2, #6
 8000c84:	4619      	mov	r1, r3
 8000c86:	203b      	movs	r0, #59	; 0x3b
 8000c88:	f7ff fef0 	bl	8000a6c <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8000c8c:	7d3b      	ldrb	r3, [r7, #20]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	021b      	lsls	r3, r3, #8
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	7d7b      	ldrb	r3, [r7, #21]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4413      	add	r3, r2
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8000ca2:	7dbb      	ldrb	r3, [r7, #22]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	7dfb      	ldrb	r3, [r7, #23]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4413      	add	r3, r2
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8000cb8:	7e3b      	ldrb	r3, [r7, #24]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	7e7b      	ldrb	r3, [r7, #25]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	4413      	add	r3, r2
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	b21a      	sxth	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2206      	movs	r2, #6
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2043      	movs	r0, #67	; 0x43
 8000cd8:	f7ff fec8 	bl	8000a6c <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	021b      	lsls	r3, r3, #8
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	7b7b      	ldrb	r3, [r7, #13]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	4413      	add	r3, r2
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	b21a      	sxth	r2, r3
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MPU6050_Get_Accel_RawData+0xc8>)
 8000cf0:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8000cf2:	7bbb      	ldrb	r3, [r7, #14]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	4413      	add	r3, r2
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b21a      	sxth	r2, r3
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <MPU6050_Get_Accel_RawData+0xc8>)
 8000d06:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8000d08:	7c3b      	ldrb	r3, [r7, #16]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	021b      	lsls	r3, r3, #8
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	7c7b      	ldrb	r3, [r7, #17]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4413      	add	r3, r2
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <MPU6050_Get_Accel_RawData+0xc8>)
 8000d1c:	809a      	strh	r2, [r3, #4]
	}
}
 8000d1e:	bf00      	nop
 8000d20:	3720      	adds	r7, #32
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000e0 	.word	0x200000e0

08000d2c <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff91 	bl	8000c60 <MPU6050_Get_Accel_RawData>
	
	//Accel Scale data 
	scaledDef->x = ((AccelRData.x+0.0f)*accelScalingFactor);
 8000d3e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000db4 <MPU6050_Get_Accel_Scale+0x88>
 8000d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MPU6050_Get_Accel_Scale+0x8c>)
 8000d54:	edd3 7a00 	vldr	s15, [r3]
 8000d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = ((AccelRData.y+0.0f)*accelScalingFactor);
 8000d62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000db4 <MPU6050_Get_Accel_Scale+0x88>
 8000d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MPU6050_Get_Accel_Scale+0x8c>)
 8000d78:	edd3 7a00 	vldr	s15, [r3]
 8000d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = ((AccelRData.z+0.0f)*accelScalingFactor);
 8000d86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d8a:	ee07 3a90 	vmov	s15, r3
 8000d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d92:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000db4 <MPU6050_Get_Accel_Scale+0x88>
 8000d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <MPU6050_Get_Accel_Scale+0x8c>)
 8000d9c:	edd3 7a00 	vldr	s15, [r3]
 8000da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	00000000 	.word	0x00000000
 8000db8:	200000d8 	.word	0x200000d8

08000dbc <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MPU6050_Get_Gyro_RawData+0x34>)
 8000dc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MPU6050_Get_Gyro_RawData+0x34>)
 8000dd0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <MPU6050_Get_Gyro_RawData+0x34>)
 8000dda:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	809a      	strh	r2, [r3, #4]
	
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	200000e0 	.word	0x200000e0

08000df4 <MPU6050_Get_Gyro_Scale>:

//13- Get Gyro scaled data
void MPU6050_Get_Gyro_Scale(ScaledData_Def *scaledDef)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	RawData_Def myGyroRaw;
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ffdb 	bl	8000dbc <MPU6050_Get_Gyro_RawData>
	
	//Gyro Scale data 
	scaledDef->x = (myGyroRaw.x)*gyroScalingFactor; // x-Axis
 8000e06:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e0a:	ee07 3a90 	vmov	s15, r3
 8000e0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MPU6050_Get_Gyro_Scale+0x70>)
 8000e14:	edd3 7a00 	vldr	s15, [r3]
 8000e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = (myGyroRaw.y)*gyroScalingFactor; // y-Axis
 8000e22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <MPU6050_Get_Gyro_Scale+0x70>)
 8000e30:	edd3 7a00 	vldr	s15, [r3]
 8000e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = (myGyroRaw.z)*gyroScalingFactor; // z-Axis
 8000e3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MPU6050_Get_Gyro_Scale+0x70>)
 8000e4c:	edd3 7a00 	vldr	s15, [r3]
 8000e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200000dc 	.word	0x200000dc

08000e68 <controlSpeed>:

#include "controller.h"
#include <math.h>


void controlSpeed(struct ControllerData* ctrData){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	int16_t err = ctrData->setPoint - ctrData->currentValue;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	81fb      	strh	r3, [r7, #14]
	int16_t P =  ceil(ctrData->Kp*err);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e90:	ee07 3a90 	vmov	s15, r3
 8000e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e9c:	ee17 0a90 	vmov	r0, s15
 8000ea0:	f7ff fb4a 	bl	8000538 <__aeabi_f2d>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	ec43 2b10 	vmov	d0, r2, r3
 8000eac:	f004 fbb4 	bl	8005618 <ceil>
 8000eb0:	ec53 2b10 	vmov	r2, r3, d0
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f7ff fc1e 	bl	80006f8 <__aeabi_d2iz>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	81bb      	strh	r3, [r7, #12]
	ctrData->IValue += err;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	821a      	strh	r2, [r3, #16]
	if(ctrData->IValue > ctrData->iMax){
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dd05      	ble.n	8000ef0 <controlSpeed+0x88>
		ctrData->IValue = ctrData->iMax;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	821a      	strh	r2, [r3, #16]
 8000eee:	e00c      	b.n	8000f0a <controlSpeed+0xa2>
	}else if(ctrData->IValue < ctrData->iMin){
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	da04      	bge.n	8000f0a <controlSpeed+0xa2>
		ctrData->IValue = ctrData->iMin;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	821a      	strh	r2, [r3, #16]
	}
	int16_t I =  ceil(ctrData->Ki* ctrData->IValue);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f22:	ee17 0a90 	vmov	r0, s15
 8000f26:	f7ff fb07 	bl	8000538 <__aeabi_f2d>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	ec43 2b10 	vmov	d0, r2, r3
 8000f32:	f004 fb71 	bl	8005618 <ceil>
 8000f36:	ec53 2b10 	vmov	r2, r3, d0
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f7ff fbdb 	bl	80006f8 <__aeabi_d2iz>
 8000f42:	4603      	mov	r3, r0
 8000f44:	817b      	strh	r3, [r7, #10]
	ctrData->out = ceil((P + I)/10);
 8000f46:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <controlSpeed+0x118>)
 8000f52:	fb82 1203 	smull	r1, r2, r2, r3
 8000f56:	1092      	asrs	r2, r2, #2
 8000f58:	17db      	asrs	r3, r3, #31
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fad9 	bl	8000514 <__aeabi_i2d>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f7ff fbc5 	bl	80006f8 <__aeabi_d2iz>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	825a      	strh	r2, [r3, #18]
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	66666667 	.word	0x66666667

08000f84 <initControllerdata>:

void initControllerdata(struct ControllerData* ctrData){
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	ctrData->Ki = 0.01;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <initControllerdata+0x44>)
 8000f90:	609a      	str	r2, [r3, #8]
	ctrData->Kp = 0.3;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <initControllerdata+0x48>)
 8000f96:	605a      	str	r2, [r3, #4]
	ctrData->iMax = 1000;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f9e:	819a      	strh	r2, [r3, #12]
	ctrData->iMin = -1000;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f64f 4218 	movw	r2, #64536	; 0xfc18
 8000fa6:	81da      	strh	r2, [r3, #14]
	ctrData->IValue = 0;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	821a      	strh	r2, [r3, #16]
	ctrData->setPoint = 0;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	801a      	strh	r2, [r3, #0]
	ctrData->currentValue = 0;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	805a      	strh	r2, [r3, #2]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	3c23d70a 	.word	0x3c23d70a
 8000fcc:	3e99999a 	.word	0x3e99999a

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0a0      	sub	sp, #128	; 0x80
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	MPU_ConfigTypeDef myMPUconfigs;
	RawData_Def accelRaw, gyroRaw;
	ScaledData_Def accelScal, gyroScal;

	int16_t x = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	int16_t y = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	int16_t z = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	struct a aStruct;
	aStruct.i = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44

	struct ControllerData ctrData;
	initControllerdata(&ctrData);
 8000fec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ffc7 	bl	8000f84 <initControllerdata>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 fcb8 	bl	800196a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f8b1 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 fa03 	bl	8001408 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001002:	f000 f9d1 	bl	80013a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001006:	f000 f94d 	bl	80012a4 <MX_TIM2_Init>
  MX_I2C1_Init();
 800100a:	f000 f90b 	bl	8001224 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //*********************************** MPU - I2C init *******************

  MPU6050_Init(&hi2c1);
 800100e:	484d      	ldr	r0, [pc, #308]	; (8001144 <main+0x174>)
 8001010:	f7ff fd1c 	bl	8000a4c <MPU6050_Init>
  myMPUconfigs.Accel_Full_Scale = AFS_SEL_4g;//Range and accuracy of accelometer (1)
 8001014:	2301      	movs	r3, #1
 8001016:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
  myMPUconfigs.CONFIG_DLPF = DLPF_184A_188G_Hz;
 800101a:	2301      	movs	r3, #1
 800101c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  myMPUconfigs.ClockSource = Internal_8MHz;
 8001020:	2300      	movs	r3, #0
 8001022:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  myMPUconfigs.Gyro_Full_Scale = FS_SEL_500;
 8001026:	2301      	movs	r3, #1
 8001028:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  myMPUconfigs.Sleep_Mode_Bit = 0; //1 = sleep mode
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  MPU6050_Config(&myMPUconfigs);
 8001032:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fd5c 	bl	8000af4 <MPU6050_Config>
  //**********************************************************************
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800103c:	2104      	movs	r1, #4
 800103e:	4842      	ldr	r0, [pc, #264]	; (8001148 <main+0x178>)
 8001040:	f002 ff68 	bl	8003f14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001044:	210c      	movs	r1, #12
 8001046:	4840      	ldr	r0, [pc, #256]	; (8001148 <main+0x178>)
 8001048:	f002 ff64 	bl	8003f14 <HAL_TIM_PWM_Start>
    /* USER CODE BEGIN 3 */

	  //MPU6050_Get_Accel_RawData(&accelRaw);
	  //MPU6050_Get_Gyro_RawData(&gyroRaw);

	  MPU6050_Get_Accel_Scale(&accelScal);
 800104c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fe6b 	bl	8000d2c <MPU6050_Get_Accel_Scale>
	  MPU6050_Get_Gyro_Scale(&gyroScal);
 8001056:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff feca 	bl	8000df4 <MPU6050_Get_Gyro_Scale>

	  char iStr[15];
	  char outStr[15];
	  char xStr[15];

	  for(int i = 0; i < sizeof(outStr); i++){
 8001060:	2300      	movs	r3, #0
 8001062:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001064:	e013      	b.n	800108e <main+0xbe>

		  outStr[i] = ' ';
 8001066:	f107 0210 	add.w	r2, r7, #16
 800106a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800106c:	4413      	add	r3, r2
 800106e:	2220      	movs	r2, #32
 8001070:	701a      	strb	r2, [r3, #0]
		  iStr[i] = ' ';
 8001072:	f107 0220 	add.w	r2, r7, #32
 8001076:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001078:	4413      	add	r3, r2
 800107a:	2220      	movs	r2, #32
 800107c:	701a      	strb	r2, [r3, #0]
		  xStr[i] = ' ';
 800107e:	463a      	mov	r2, r7
 8001080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001082:	4413      	add	r3, r2
 8001084:	2220      	movs	r2, #32
 8001086:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < sizeof(outStr); i++){
 8001088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800108a:	3301      	adds	r3, #1
 800108c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800108e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001090:	2b0e      	cmp	r3, #14
 8001092:	d9e8      	bls.n	8001066 <main+0x96>
	  }

	  sprintf(xStr, "x: %d", accelScal.x);
 8001094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa4e 	bl	8000538 <__aeabi_f2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4638      	mov	r0, r7
 80010a2:	492a      	ldr	r1, [pc, #168]	; (800114c <main+0x17c>)
 80010a4:	f004 fb7c 	bl	80057a0 <siprintf>

	  //char j[1];
	  //struct a* aStructPtr = &aStruct;
	  //increment(aStructPtr);
	  //sprintf(j, "%d", aStruct.i);
	  ctrData.currentValue = accelScal.x;
 80010a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80010ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b0:	ee17 3a90 	vmov	r3, s15
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	867b      	strh	r3, [r7, #50]	; 0x32

	  controlSpeed(&ctrData);
 80010b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fed3 	bl	8000e68 <controlSpeed>

	  sprintf(xStr, "x: %d\t", ctrData.currentValue);
 80010c2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80010c6:	461a      	mov	r2, r3
 80010c8:	463b      	mov	r3, r7
 80010ca:	4921      	ldr	r1, [pc, #132]	; (8001150 <main+0x180>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 fb67 	bl	80057a0 <siprintf>
	  HAL_UART_Transmit(&huart2, xStr, sizeof(xStr), 10);
 80010d2:	4639      	mov	r1, r7
 80010d4:	230a      	movs	r3, #10
 80010d6:	220f      	movs	r2, #15
 80010d8:	481e      	ldr	r0, [pc, #120]	; (8001154 <main+0x184>)
 80010da:	f003 fe2d 	bl	8004d38 <HAL_UART_Transmit>
	  sprintf(outStr, "out: %d\t", ctrData.out);
 80010de:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80010e2:	461a      	mov	r2, r3
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	491b      	ldr	r1, [pc, #108]	; (8001158 <main+0x188>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 fb58 	bl	80057a0 <siprintf>
	  HAL_UART_Transmit(&huart2, outStr, sizeof(outStr), 10);
 80010f0:	f107 0110 	add.w	r1, r7, #16
 80010f4:	230a      	movs	r3, #10
 80010f6:	220f      	movs	r2, #15
 80010f8:	4816      	ldr	r0, [pc, #88]	; (8001154 <main+0x184>)
 80010fa:	f003 fe1d 	bl	8004d38 <HAL_UART_Transmit>
	  sprintf(iStr, "I: %d\n\r", ctrData.IValue);
 80010fe:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001102:	461a      	mov	r2, r3
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	4914      	ldr	r1, [pc, #80]	; (800115c <main+0x18c>)
 800110a:	4618      	mov	r0, r3
 800110c:	f004 fb48 	bl	80057a0 <siprintf>
	  HAL_UART_Transmit(&huart2, iStr, sizeof(iStr), 10);
 8001110:	f107 0120 	add.w	r1, r7, #32
 8001114:	230a      	movs	r3, #10
 8001116:	220f      	movs	r2, #15
 8001118:	480e      	ldr	r0, [pc, #56]	; (8001154 <main+0x184>)
 800111a:	f003 fe0d 	bl	8004d38 <HAL_UART_Transmit>

	  setSpeed(ceil(ctrData.out));
 800111e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f9f6 	bl	8000514 <__aeabi_i2d>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fae2 	bl	80006f8 <__aeabi_d2iz>
 8001134:	4603      	mov	r3, r0
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f9cd 	bl	80014d6 <setSpeed>

	  //HAL_UART_Transmit(&huart2, xStr, sizeof(xStr), 10);
	  //HAL_UART_Transmit(&huart2, yStr, sizeof(yStr), 10);
	  //HAL_UART_Transmit(&huart2, zStr, sizeof(zStr), 10);

	  HAL_Delay(100);
 800113c:	2064      	movs	r0, #100	; 0x64
 800113e:	f000 fc89 	bl	8001a54 <HAL_Delay>
  {
 8001142:	e783      	b.n	800104c <main+0x7c>
 8001144:	200000e8 	.word	0x200000e8
 8001148:	20000134 	.word	0x20000134
 800114c:	08006078 	.word	0x08006078
 8001150:	08006080 	.word	0x08006080
 8001154:	20000180 	.word	0x20000180
 8001158:	08006088 	.word	0x08006088
 800115c:	08006094 	.word	0x08006094

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b096      	sub	sp, #88	; 0x58
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2244      	movs	r2, #68	; 0x44
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f004 fb0e 	bl	8005790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001182:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001186:	f001 fc99 	bl	8002abc <HAL_PWREx_ControlVoltageScaling>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001190:	f000 f99c 	bl	80014cc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001194:	f001 fc74 	bl	8002a80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <SystemClock_Config+0xc0>)
 800119a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119e:	4a20      	ldr	r2, [pc, #128]	; (8001220 <SystemClock_Config+0xc0>)
 80011a0:	f023 0318 	bic.w	r3, r3, #24
 80011a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80011a8:	2314      	movs	r3, #20
 80011aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011b0:	2301      	movs	r3, #1
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011b8:	2360      	movs	r3, #96	; 0x60
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011c0:	2301      	movs	r3, #1
 80011c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80011c8:	2310      	movs	r3, #16
 80011ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011cc:	2307      	movs	r3, #7
 80011ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fcc3 	bl	8002b68 <HAL_RCC_OscConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011e8:	f000 f970 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ec:	230f      	movs	r3, #15
 80011ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f0:	2303      	movs	r3, #3
 80011f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	2101      	movs	r1, #1
 8001204:	4618      	mov	r0, r3
 8001206:	f002 f8cf 	bl	80033a8 <HAL_RCC_ClockConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001210:	f000 f95c 	bl	80014cc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001214:	f002 fcc4 	bl	8003ba0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001218:	bf00      	nop
 800121a:	3758      	adds	r7, #88	; 0x58
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000

08001224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_I2C1_Init+0x74>)
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <MX_I2C1_Init+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_I2C1_Init+0x74>)
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <MX_I2C1_Init+0x7c>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_I2C1_Init+0x74>)
 800123c:	2201      	movs	r2, #1
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_I2C1_Init+0x74>)
 8001260:	f000 fe84 	bl	8001f6c <HAL_I2C_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800126a:	f000 f92f 	bl	80014cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126e:	2100      	movs	r1, #0
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <MX_I2C1_Init+0x74>)
 8001272:	f001 fb6d 	bl	8002950 <HAL_I2CEx_ConfigAnalogFilter>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800127c:	f000 f926 	bl	80014cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001280:	2100      	movs	r1, #0
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_I2C1_Init+0x74>)
 8001284:	f001 fbaf 	bl	80029e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800128e:	f000 f91d 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200000e8 	.word	0x200000e8
 800129c:	40005400 	.word	0x40005400
 80012a0:	00707cbb 	.word	0x00707cbb

080012a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	; 0x38
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]
 80012d2:	615a      	str	r2, [r3, #20]
 80012d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <MX_TIM2_Init+0x100>)
 80012d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012de:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <MX_TIM2_Init+0x100>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <MX_TIM2_Init+0x100>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1280;
 80012ea:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <MX_TIM2_Init+0x100>)
 80012ec:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80012f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <MX_TIM2_Init+0x100>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <MX_TIM2_Init+0x100>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012fe:	4829      	ldr	r0, [pc, #164]	; (80013a4 <MX_TIM2_Init+0x100>)
 8001300:	f002 fd50 	bl	8003da4 <HAL_TIM_Base_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800130a:	f000 f8df 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001314:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001318:	4619      	mov	r1, r3
 800131a:	4822      	ldr	r0, [pc, #136]	; (80013a4 <MX_TIM2_Init+0x100>)
 800131c:	f002 ffec 	bl	80042f8 <HAL_TIM_ConfigClockSource>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001326:	f000 f8d1 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800132a:	481e      	ldr	r0, [pc, #120]	; (80013a4 <MX_TIM2_Init+0x100>)
 800132c:	f002 fd91 	bl	8003e52 <HAL_TIM_PWM_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001336:	f000 f8c9 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	4816      	ldr	r0, [pc, #88]	; (80013a4 <MX_TIM2_Init+0x100>)
 800134a:	f003 fc41 	bl	8004bd0 <HAL_TIMEx_MasterConfigSynchronization>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001354:	f000 f8ba 	bl	80014cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001358:	2360      	movs	r3, #96	; 0x60
 800135a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	2204      	movs	r2, #4
 800136c:	4619      	mov	r1, r3
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <MX_TIM2_Init+0x100>)
 8001370:	f002 feae 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800137a:	f000 f8a7 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	220c      	movs	r2, #12
 8001382:	4619      	mov	r1, r3
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM2_Init+0x100>)
 8001386:	f002 fea3 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001390:	f000 f89c 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM2_Init+0x100>)
 8001396:	f000 f9af 	bl	80016f8 <HAL_TIM_MspPostInit>

}
 800139a:	bf00      	nop
 800139c:	3738      	adds	r7, #56	; 0x38
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000134 	.word	0x20000134

080013a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_USART2_UART_Init+0x58>)
 80013ae:	4a15      	ldr	r2, [pc, #84]	; (8001404 <MX_USART2_UART_Init+0x5c>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <MX_USART2_UART_Init+0x58>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_USART2_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_USART2_UART_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_USART2_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_USART2_UART_Init+0x58>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_USART2_UART_Init+0x58>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_USART2_UART_Init+0x58>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_USART2_UART_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_USART2_UART_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USART2_UART_Init+0x58>)
 80013ec:	f003 fc56 	bl	8004c9c <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013f6:	f000 f869 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000180 	.word	0x20000180
 8001404:	40004400 	.word	0x40004400

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <MX_GPIO_Init+0xbc>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <MX_GPIO_Init+0xbc>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_GPIO_Init+0xbc>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <MX_GPIO_Init+0xbc>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <MX_GPIO_Init+0xbc>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <MX_GPIO_Init+0xbc>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <MX_GPIO_Init+0xbc>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <MX_GPIO_Init+0xbc>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_GPIO_Init+0xbc>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800146c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001470:	f000 fd64 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2108      	movs	r1, #8
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <MX_GPIO_Init+0xc0>)
 800147a:	f000 fd5f 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800147e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f000 fbe5 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800149e:	2308      	movs	r3, #8
 80014a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_GPIO_Init+0xc0>)
 80014b6:	f000 fbd7 	bl	8001c68 <HAL_GPIO_Init>

}
 80014ba:	bf00      	nop
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000
 80014c8:	48000400 	.word	0x48000400

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>

080014d6 <setSpeed>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
	}
}

// main motorDriver function
void setSpeed(int PWM){
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	setDirection(PWM);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f807 	bl	80014f2 <setDirection>
	setPWM(PWM);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f849 	bl	800157c <setPWM>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <setDirection>:

void setDirection(int PWM){
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]

	if(PWM >= 0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db1c      	blt.n	800153a <setDirection+0x48>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001500:	2201      	movs	r2, #1
 8001502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f000 fd17 	bl	8001f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001518:	f000 fd10 	bl	8001f3c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001526:	f000 fd09 	bl	8001f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f000 fd02 	bl	8001f3c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);

	}
}
 8001538:	e01b      	b.n	8001572 <setDirection+0x80>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f000 fcfa 	bl	8001f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800154e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001552:	f000 fcf3 	bl	8001f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f000 fcec 	bl	8001f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156e:	f000 fce5 	bl	8001f3c <HAL_GPIO_WritePin>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <setPWM>:

void setPWM(int PWM){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

	PWM = ((abs(PWM)) * 1280 )/ 100;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800158a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <setPWM+0x44>)
 8001598:	fb82 1203 	smull	r1, r2, r2, r3
 800159c:	1152      	asrs	r2, r2, #5
 800159e:	17db      	asrs	r3, r3, #31
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	607b      	str	r3, [r7, #4]

	TIM2->CCR1 = PWM;
 80015a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = PWM;
 80015ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	51eb851f 	.word	0x51eb851f

080015c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_MspInit+0x44>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_MspInit+0x44>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6613      	str	r3, [r2, #96]	; 0x60
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_MspInit+0x44>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_MspInit+0x44>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_MspInit+0x44>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6593      	str	r3, [r2, #88]	; 0x58
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_MspInit+0x44>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b09e      	sub	sp, #120	; 0x78
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	2254      	movs	r2, #84	; 0x54
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f004 f8af 	bl	8005790 <memset>
  if(hi2c->Instance==I2C1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <HAL_I2C_MspInit+0xa4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d135      	bne.n	80016a8 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800163c:	2340      	movs	r3, #64	; 0x40
 800163e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001640:	2300      	movs	r3, #0
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4618      	mov	r0, r3
 800164a:	f002 f8b3 	bl	80037b4 <HAL_RCCEx_PeriphCLKConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001654:	f7ff ff3a 	bl	80014cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_I2C_MspInit+0xa8>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <HAL_I2C_MspInit+0xa8>)
 800165e:	f043 0302 	orr.w	r3, r3, #2
 8001662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <HAL_I2C_MspInit+0xa8>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001670:	23c0      	movs	r3, #192	; 0xc0
 8001672:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001674:	2312      	movs	r3, #18
 8001676:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001680:	2304      	movs	r3, #4
 8001682:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001688:	4619      	mov	r1, r3
 800168a:	480b      	ldr	r0, [pc, #44]	; (80016b8 <HAL_I2C_MspInit+0xac>)
 800168c:	f000 faec 	bl	8001c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_I2C_MspInit+0xa8>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_I2C_MspInit+0xa8>)
 8001696:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169a:	6593      	str	r3, [r2, #88]	; 0x58
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_I2C_MspInit+0xa8>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016a8:	bf00      	nop
 80016aa:	3778      	adds	r7, #120	; 0x78
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40005400 	.word	0x40005400
 80016b4:	40021000 	.word	0x40021000
 80016b8:	48000400 	.word	0x48000400

080016bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016cc:	d10b      	bne.n	80016e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_TIM_Base_MspInit+0x38>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_TIM_Base_MspInit+0x38>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6593      	str	r3, [r2, #88]	; 0x58
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_TIM_Base_MspInit+0x38>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001718:	d11c      	bne.n	8001754 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_TIM_MspPostInit+0x64>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_TIM_MspPostInit+0x64>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_TIM_MspPostInit+0x64>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001732:	230a      	movs	r3, #10
 8001734:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001742:	2301      	movs	r3, #1
 8001744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f000 fa8a 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b09e      	sub	sp, #120	; 0x78
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	2254      	movs	r2, #84	; 0x54
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f004 f805 	bl	8005790 <memset>
  if(huart->Instance==USART2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a28      	ldr	r2, [pc, #160]	; (800182c <HAL_UART_MspInit+0xcc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d148      	bne.n	8001822 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001790:	2302      	movs	r3, #2
 8001792:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001794:	2300      	movs	r3, #0
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	4618      	mov	r0, r3
 800179e:	f002 f809 	bl	80037b4 <HAL_RCCEx_PeriphCLKConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017a8:	f7ff fe90 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ac:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_UART_MspInit+0xd0>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	4a1f      	ldr	r2, [pc, #124]	; (8001830 <HAL_UART_MspInit+0xd0>)
 80017b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b6:	6593      	str	r3, [r2, #88]	; 0x58
 80017b8:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_UART_MspInit+0xd0>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_UART_MspInit+0xd0>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_UART_MspInit+0xd0>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_UART_MspInit+0xd0>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80017dc:	2304      	movs	r3, #4
 80017de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ec:	2307      	movs	r3, #7
 80017ee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017f4:	4619      	mov	r1, r3
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f000 fa35 	bl	8001c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80017fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001802:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001810:	2303      	movs	r3, #3
 8001812:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f000 fa23 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3778      	adds	r7, #120	; 0x78
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40004400 	.word	0x40004400
 8001830:	40021000 	.word	0x40021000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <NMI_Handler+0x4>

0800183a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler+0x4>

08001846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler+0x4>

08001852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001880:	f000 f8c8 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001890:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <_sbrk+0x5c>)
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <_sbrk+0x60>)
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <_sbrk+0x64>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <_sbrk+0x68>)
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d207      	bcs.n	80018c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b8:	f003 ff32 	bl	8005720 <__errno>
 80018bc:	4603      	mov	r3, r0
 80018be:	220c      	movs	r2, #12
 80018c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	e009      	b.n	80018dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <_sbrk+0x64>)
 80018d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20010000 	.word	0x20010000
 80018e8:	00000400 	.word	0x00000400
 80018ec:	20000204 	.word	0x20000204
 80018f0:	20000220 	.word	0x20000220

080018f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <SystemInit+0x20>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <SystemInit+0x20>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001950 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800191c:	f7ff ffea 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <LoopForever+0x6>)
  ldr r1, =_edata
 8001922:	490d      	ldr	r1, [pc, #52]	; (8001958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <LoopForever+0xe>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001938:	4c0a      	ldr	r4, [pc, #40]	; (8001964 <LoopForever+0x16>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001946:	f003 fef1 	bl	800572c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800194a:	f7ff fb41 	bl	8000fd0 <main>

0800194e <LoopForever>:

LoopForever:
    b LoopForever
 800194e:	e7fe      	b.n	800194e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001950:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800195c:	08006128 	.word	0x08006128
  ldr r2, =_sbss
 8001960:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001964:	2000021c 	.word	0x2000021c

08001968 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC1_IRQHandler>

0800196a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 f943 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800197a:	2000      	movs	r0, #0
 800197c:	f000 f80e 	bl	800199c <HAL_InitTick>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	e001      	b.n	8001990 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800198c:	f7ff fe1a 	bl	80015c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001990:	79fb      	ldrb	r3, [r7, #7]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_InitTick+0x6c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d023      	beq.n	80019f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <HAL_InitTick+0x70>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_InitTick+0x6c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f941 	bl	8001c4e <HAL_SYSTICK_Config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d809      	bhi.n	80019ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f000 f919 	bl	8001c16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_InitTick+0x74>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e007      	b.n	80019fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	e004      	b.n	80019fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	e001      	b.n	80019fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x20>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x24>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_IncTick+0x24>)
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000208 	.word	0x20000208

08001a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_GetTick+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000208 	.word	0x20000208

08001a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff ffee 	bl	8001a3c <HAL_GetTick>
 8001a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6c:	d005      	beq.n	8001a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_Delay+0x44>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a7a:	bf00      	nop
 8001a7c:	f7ff ffde 	bl	8001a3c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d8f7      	bhi.n	8001a7c <HAL_Delay+0x28>
  {
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000008 	.word	0x20000008

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff47 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff5c 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff8e 	bl	8001b54 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5d 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffb0 	bl	8001bbc <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c76:	e148      	b.n	8001f0a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 813a 	beq.w	8001f04 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d005      	beq.n	8001ca8 <HAL_GPIO_Init+0x40>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d130      	bne.n	8001d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 0201 	and.w	r2, r3, #1
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d017      	beq.n	8001d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d123      	bne.n	8001d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	220f      	movs	r2, #15
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	6939      	ldr	r1, [r7, #16]
 8001d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0203 	and.w	r2, r3, #3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8094 	beq.w	8001f04 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ddc:	4b52      	ldr	r3, [pc, #328]	; (8001f28 <HAL_GPIO_Init+0x2c0>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de0:	4a51      	ldr	r2, [pc, #324]	; (8001f28 <HAL_GPIO_Init+0x2c0>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6613      	str	r3, [r2, #96]	; 0x60
 8001de8:	4b4f      	ldr	r3, [pc, #316]	; (8001f28 <HAL_GPIO_Init+0x2c0>)
 8001dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001df4:	4a4d      	ldr	r2, [pc, #308]	; (8001f2c <HAL_GPIO_Init+0x2c4>)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	220f      	movs	r2, #15
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e1e:	d00d      	beq.n	8001e3c <HAL_GPIO_Init+0x1d4>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a43      	ldr	r2, [pc, #268]	; (8001f30 <HAL_GPIO_Init+0x2c8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <HAL_GPIO_Init+0x1d0>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a42      	ldr	r2, [pc, #264]	; (8001f34 <HAL_GPIO_Init+0x2cc>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_GPIO_Init+0x1cc>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e004      	b.n	8001e3e <HAL_GPIO_Init+0x1d6>
 8001e34:	2307      	movs	r3, #7
 8001e36:	e002      	b.n	8001e3e <HAL_GPIO_Init+0x1d6>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_GPIO_Init+0x1d6>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	f002 0203 	and.w	r2, r2, #3
 8001e44:	0092      	lsls	r2, r2, #2
 8001e46:	4093      	lsls	r3, r2
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e4e:	4937      	ldr	r1, [pc, #220]	; (8001f2c <HAL_GPIO_Init+0x2c4>)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e5c:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e80:	4a2d      	ldr	r2, [pc, #180]	; (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eaa:	4a23      	ldr	r2, [pc, #140]	; (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ed4:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001efe:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f47f aeaf 	bne.w	8001c78 <HAL_GPIO_Init+0x10>
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	48000400 	.word	0x48000400
 8001f34:	48000800 	.word	0x48000800
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f4c:	787b      	ldrb	r3, [r7, #1]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e081      	b.n	8002082 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fb3a 	bl	800160c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2224      	movs	r2, #36	; 0x24
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d107      	bne.n	8001fe6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	e006      	b.n	8001ff4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ff2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d104      	bne.n	8002006 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002004:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002018:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002028:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69d9      	ldr	r1, [r3, #28]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af02      	add	r7, sp, #8
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	461a      	mov	r2, r3
 8002098:	460b      	mov	r3, r1
 800209a:	817b      	strh	r3, [r7, #10]
 800209c:	4613      	mov	r3, r2
 800209e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	f040 80da 	bne.w	8002262 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2C_Master_Transmit+0x30>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e0d3      	b.n	8002264 <HAL_I2C_Master_Transmit+0x1d8>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020c4:	f7ff fcba 	bl	8001a3c <HAL_GetTick>
 80020c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2319      	movs	r3, #25
 80020d0:	2201      	movs	r2, #1
 80020d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f9e6 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0be      	b.n	8002264 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2221      	movs	r2, #33	; 0x21
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2210      	movs	r2, #16
 80020f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	893a      	ldrh	r2, [r7, #8]
 8002106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	2bff      	cmp	r3, #255	; 0xff
 8002116:	d90e      	bls.n	8002136 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	22ff      	movs	r2, #255	; 0xff
 800211c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002122:	b2da      	uxtb	r2, r3
 8002124:	8979      	ldrh	r1, [r7, #10]
 8002126:	4b51      	ldr	r3, [pc, #324]	; (800226c <HAL_I2C_Master_Transmit+0x1e0>)
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fbdc 	bl	80028ec <I2C_TransferConfig>
 8002134:	e06c      	b.n	8002210 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	b2da      	uxtb	r2, r3
 8002146:	8979      	ldrh	r1, [r7, #10]
 8002148:	4b48      	ldr	r3, [pc, #288]	; (800226c <HAL_I2C_Master_Transmit+0x1e0>)
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fbcb 	bl	80028ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002156:	e05b      	b.n	8002210 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	6a39      	ldr	r1, [r7, #32]
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f9e3 	bl	8002528 <I2C_WaitOnTXISFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e07b      	b.n	8002264 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d034      	beq.n	8002210 <HAL_I2C_Master_Transmit+0x184>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d130      	bne.n	8002210 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f975 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e04d      	b.n	8002264 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2bff      	cmp	r3, #255	; 0xff
 80021d0:	d90e      	bls.n	80021f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	22ff      	movs	r2, #255	; 0xff
 80021d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	8979      	ldrh	r1, [r7, #10]
 80021e0:	2300      	movs	r3, #0
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 fb7f 	bl	80028ec <I2C_TransferConfig>
 80021ee:	e00f      	b.n	8002210 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	8979      	ldrh	r1, [r7, #10]
 8002202:	2300      	movs	r3, #0
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 fb6e 	bl	80028ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d19e      	bne.n	8002158 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	6a39      	ldr	r1, [r7, #32]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f9c2 	bl	80025a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e01a      	b.n	8002264 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2220      	movs	r2, #32
 8002234:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_I2C_Master_Transmit+0x1e4>)
 8002242:	400b      	ands	r3, r1
 8002244:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002262:	2302      	movs	r3, #2
  }
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	80002000 	.word	0x80002000
 8002270:	fe00e800 	.word	0xfe00e800

08002274 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	461a      	mov	r2, r3
 8002280:	460b      	mov	r3, r1
 8002282:	817b      	strh	r3, [r7, #10]
 8002284:	4613      	mov	r3, r2
 8002286:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b20      	cmp	r3, #32
 8002292:	f040 80db 	bne.w	800244c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_I2C_Master_Receive+0x30>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e0d4      	b.n	800244e <HAL_I2C_Master_Receive+0x1da>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022ac:	f7ff fbc6 	bl	8001a3c <HAL_GetTick>
 80022b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2319      	movs	r3, #25
 80022b8:	2201      	movs	r2, #1
 80022ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f8f2 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0bf      	b.n	800244e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2222      	movs	r2, #34	; 0x22
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2210      	movs	r2, #16
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	893a      	ldrh	r2, [r7, #8]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2bff      	cmp	r3, #255	; 0xff
 80022fe:	d90e      	bls.n	800231e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	22ff      	movs	r2, #255	; 0xff
 8002304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	b2da      	uxtb	r2, r3
 800230c:	8979      	ldrh	r1, [r7, #10]
 800230e:	4b52      	ldr	r3, [pc, #328]	; (8002458 <HAL_I2C_Master_Receive+0x1e4>)
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fae8 	bl	80028ec <I2C_TransferConfig>
 800231c:	e06d      	b.n	80023fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	b2da      	uxtb	r2, r3
 800232e:	8979      	ldrh	r1, [r7, #10]
 8002330:	4b49      	ldr	r3, [pc, #292]	; (8002458 <HAL_I2C_Master_Receive+0x1e4>)
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 fad7 	bl	80028ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800233e:	e05c      	b.n	80023fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	6a39      	ldr	r1, [r7, #32]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f96b 	bl	8002620 <I2C_WaitOnRXNEFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e07c      	b.n	800244e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d034      	beq.n	80023fa <HAL_I2C_Master_Receive+0x186>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	d130      	bne.n	80023fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	2200      	movs	r2, #0
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f880 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e04d      	b.n	800244e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2bff      	cmp	r3, #255	; 0xff
 80023ba:	d90e      	bls.n	80023da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	8979      	ldrh	r1, [r7, #10]
 80023ca:	2300      	movs	r3, #0
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fa8a 	bl	80028ec <I2C_TransferConfig>
 80023d8:	e00f      	b.n	80023fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	2300      	movs	r3, #0
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fa79 	bl	80028ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d19d      	bne.n	8002340 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	6a39      	ldr	r1, [r7, #32]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f8cd 	bl	80025a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e01a      	b.n	800244e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2220      	movs	r2, #32
 800241e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6859      	ldr	r1, [r3, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_I2C_Master_Receive+0x1e8>)
 800242c:	400b      	ands	r3, r1
 800242e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	80002400 	.word	0x80002400
 800245c:	fe00e800 	.word	0xfe00e800

08002460 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d103      	bne.n	800247e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2200      	movs	r2, #0
 800247c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d007      	beq.n	800249c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	619a      	str	r2, [r3, #24]
  }
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b8:	e022      	b.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d01e      	beq.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c2:	f7ff fabb 	bl	8001a3c <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d302      	bcc.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d113      	bne.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e00f      	b.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4013      	ands	r3, r2
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	429a      	cmp	r2, r3
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	429a      	cmp	r2, r3
 800251c:	d0cd      	beq.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002534:	e02c      	b.n	8002590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f8ea 	bl	8002714 <I2C_IsErrorOccurred>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e02a      	b.n	80025a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d01e      	beq.n	8002590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002552:	f7ff fa73 	bl	8001a3c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	429a      	cmp	r2, r3
 8002560:	d302      	bcc.n	8002568 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d113      	bne.n	8002590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	f043 0220 	orr.w	r2, r3, #32
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e007      	b.n	80025a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d1cb      	bne.n	8002536 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b4:	e028      	b.n	8002608 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f8aa 	bl	8002714 <I2C_IsErrorOccurred>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e026      	b.n	8002618 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7ff fa37 	bl	8001a3c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d113      	bne.n	8002608 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e007      	b.n	8002618 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b20      	cmp	r3, #32
 8002614:	d1cf      	bne.n	80025b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800262c:	e064      	b.n	80026f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f86e 	bl	8002714 <I2C_IsErrorOccurred>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e062      	b.n	8002708 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b20      	cmp	r3, #32
 800264e:	d138      	bne.n	80026c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b04      	cmp	r3, #4
 800265c:	d105      	bne.n	800266a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e04e      	b.n	8002708 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b10      	cmp	r3, #16
 8002676:	d107      	bne.n	8002688 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2210      	movs	r2, #16
 800267e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2204      	movs	r2, #4
 8002684:	645a      	str	r2, [r3, #68]	; 0x44
 8002686:	e002      	b.n	800268e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2220      	movs	r2, #32
 8002694:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80026a2:	400b      	ands	r3, r1
 80026a4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e022      	b.n	8002708 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c2:	f7ff f9bb 	bl	8001a3c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d302      	bcc.n	80026d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10f      	bne.n	80026f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026dc:	f043 0220 	orr.w	r2, r3, #32
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e007      	b.n	8002708 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b04      	cmp	r3, #4
 8002704:	d193      	bne.n	800262e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	fe00e800 	.word	0xfe00e800

08002714 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d075      	beq.n	800282c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2210      	movs	r2, #16
 8002746:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002748:	e056      	b.n	80027f8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d052      	beq.n	80027f8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002752:	f7ff f973 	bl	8001a3c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <I2C_IsErrorOccurred+0x54>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d147      	bne.n	80027f8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002772:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800277a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800278a:	d12e      	bne.n	80027ea <I2C_IsErrorOccurred+0xd6>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002792:	d02a      	beq.n	80027ea <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	2b20      	cmp	r3, #32
 8002798:	d027      	beq.n	80027ea <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027a8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027aa:	f7ff f947 	bl	8001a3c <HAL_GetTick>
 80027ae:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b0:	e01b      	b.n	80027ea <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027b2:	f7ff f943 	bl	8001a3c <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b19      	cmp	r3, #25
 80027be:	d914      	bls.n	80027ea <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d1dc      	bne.n	80027b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b20      	cmp	r3, #32
 8002804:	d003      	beq.n	800280e <I2C_IsErrorOccurred+0xfa>
 8002806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800280a:	2b00      	cmp	r3, #0
 800280c:	d09d      	beq.n	800274a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800280e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2220      	movs	r2, #32
 800281c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800284e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002870:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002892:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800289a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01c      	beq.n	80028dc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f7ff fddc 	bl	8002460 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <I2C_IsErrorOccurred+0x1d4>)
 80028b4:	400b      	ands	r3, r1
 80028b6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	431a      	orrs	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80028dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3728      	adds	r7, #40	; 0x28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	fe00e800 	.word	0xfe00e800

080028ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	817b      	strh	r3, [r7, #10]
 80028fa:	4613      	mov	r3, r2
 80028fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028fe:	897b      	ldrh	r3, [r7, #10]
 8002900:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002904:	7a7b      	ldrb	r3, [r7, #9]
 8002906:	041b      	lsls	r3, r3, #16
 8002908:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800290c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	4313      	orrs	r3, r2
 8002916:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800291a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	0d5b      	lsrs	r3, r3, #21
 8002926:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <I2C_TransferConfig+0x60>)
 800292c:	430b      	orrs	r3, r1
 800292e:	43db      	mvns	r3, r3
 8002930:	ea02 0103 	and.w	r1, r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	03ff63ff 	.word	0x03ff63ff

08002950 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b20      	cmp	r3, #32
 8002964:	d138      	bne.n	80029d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002970:	2302      	movs	r3, #2
 8002972:	e032      	b.n	80029da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	; 0x24
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e000      	b.n	80029da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029d8:	2302      	movs	r3, #2
  }
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d139      	bne.n	8002a70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e033      	b.n	8002a72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2224      	movs	r2, #36	; 0x24
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40007000 	.word	0x40007000

08002aa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40007000 	.word	0x40007000

08002abc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aca:	d130      	bne.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002acc:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad8:	d038      	beq.n	8002b4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ae8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002aea:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2232      	movs	r2, #50	; 0x32
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0c9b      	lsrs	r3, r3, #18
 8002afc:	3301      	adds	r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b00:	e002      	b.n	8002b08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b08:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b14:	d102      	bne.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f2      	bne.n	8002b02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b28:	d110      	bne.n	8002b4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e00f      	b.n	8002b4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3a:	d007      	beq.n	8002b4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b44:	4a05      	ldr	r2, [pc, #20]	; (8002b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	20000000 	.word	0x20000000
 8002b64:	431bde83 	.word	0x431bde83

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f000 bc10 	b.w	800339c <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7c:	4b96      	ldr	r3, [pc, #600]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b86:	4b94      	ldr	r3, [pc, #592]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80e4 	beq.w	8002d66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x4c>
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	f040 808b 	bne.w	8002cc2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	f040 8087 	bne.w	8002cc2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bb4:	4b88      	ldr	r3, [pc, #544]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_OscConfig+0x64>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e3e7      	b.n	800339c <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1a      	ldr	r2, [r3, #32]
 8002bd0:	4b81      	ldr	r3, [pc, #516]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d004      	beq.n	8002be6 <HAL_RCC_OscConfig+0x7e>
 8002bdc:	4b7e      	ldr	r3, [pc, #504]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be4:	e005      	b.n	8002bf2 <HAL_RCC_OscConfig+0x8a>
 8002be6:	4b7c      	ldr	r3, [pc, #496]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d223      	bcs.n	8002c3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fd7a 	bl	80036f4 <RCC_SetFlashLatencyFromMSIRange>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e3c8      	b.n	800339c <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c0a:	4b73      	ldr	r3, [pc, #460]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a72      	ldr	r2, [pc, #456]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002c10:	f043 0308 	orr.w	r3, r3, #8
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b70      	ldr	r3, [pc, #448]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	496d      	ldr	r1, [pc, #436]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c28:	4b6b      	ldr	r3, [pc, #428]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	4968      	ldr	r1, [pc, #416]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
 8002c3c:	e025      	b.n	8002c8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c3e:	4b66      	ldr	r3, [pc, #408]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a65      	ldr	r2, [pc, #404]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002c44:	f043 0308 	orr.w	r3, r3, #8
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b63      	ldr	r3, [pc, #396]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4960      	ldr	r1, [pc, #384]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c5c:	4b5e      	ldr	r3, [pc, #376]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	495b      	ldr	r1, [pc, #364]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fd3a 	bl	80036f4 <RCC_SetFlashLatencyFromMSIRange>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e388      	b.n	800339c <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c8a:	f000 fc6f 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	4b51      	ldr	r3, [pc, #324]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	4950      	ldr	r1, [pc, #320]	; (8002ddc <HAL_RCC_OscConfig+0x274>)
 8002c9c:	5ccb      	ldrb	r3, [r1, r3]
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a4e      	ldr	r2, [pc, #312]	; (8002de0 <HAL_RCC_OscConfig+0x278>)
 8002ca8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002caa:	4b4e      	ldr	r3, [pc, #312]	; (8002de4 <HAL_RCC_OscConfig+0x27c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe fe74 	bl	800199c <HAL_InitTick>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d052      	beq.n	8002d64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	e36c      	b.n	800339c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d032      	beq.n	8002d30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cca:	4b43      	ldr	r3, [pc, #268]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a42      	ldr	r2, [pc, #264]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cd6:	f7fe feb1 	bl	8001a3c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cde:	f7fe fead 	bl	8001a3c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e355      	b.n	800339c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf0:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cfc:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a35      	ldr	r2, [pc, #212]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002d02:	f043 0308 	orr.w	r3, r3, #8
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4930      	ldr	r1, [pc, #192]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	492b      	ldr	r1, [pc, #172]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
 8002d2e:	e01a      	b.n	8002d66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d30:	4b29      	ldr	r3, [pc, #164]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fe7e 	bl	8001a3c <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d44:	f7fe fe7a 	bl	8001a3c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e322      	b.n	800339c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d56:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x1dc>
 8002d62:	e000      	b.n	8002d66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d073      	beq.n	8002e5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_OscConfig+0x21c>
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d10e      	bne.n	8002d9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d10b      	bne.n	8002d9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d84:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d063      	beq.n	8002e58 <HAL_RCC_OscConfig+0x2f0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d15f      	bne.n	8002e58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e2ff      	b.n	800339c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da4:	d106      	bne.n	8002db4 <HAL_RCC_OscConfig+0x24c>
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e025      	b.n	8002e00 <HAL_RCC_OscConfig+0x298>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dbc:	d114      	bne.n	8002de8 <HAL_RCC_OscConfig+0x280>
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a02      	ldr	r2, [pc, #8]	; (8002dd8 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e013      	b.n	8002e00 <HAL_RCC_OscConfig+0x298>
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	0800609c 	.word	0x0800609c
 8002de0:	20000000 	.word	0x20000000
 8002de4:	20000004 	.word	0x20000004
 8002de8:	4ba0      	ldr	r3, [pc, #640]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a9f      	ldr	r2, [pc, #636]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	4b9d      	ldr	r3, [pc, #628]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a9c      	ldr	r2, [pc, #624]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d013      	beq.n	8002e30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fe18 	bl	8001a3c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fe fe14 	bl	8001a3c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e2bc      	b.n	800339c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e22:	4b92      	ldr	r3, [pc, #584]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x2a8>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe fe04 	bl	8001a3c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe fe00 	bl	8001a3c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e2a8      	b.n	800339c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e4a:	4b88      	ldr	r3, [pc, #544]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2d0>
 8002e56:	e000      	b.n	8002e5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d060      	beq.n	8002f28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_OscConfig+0x310>
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b0c      	cmp	r3, #12
 8002e70:	d119      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d116      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e78:	4b7c      	ldr	r3, [pc, #496]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_OscConfig+0x328>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e285      	b.n	800339c <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e90:	4b76      	ldr	r3, [pc, #472]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	4973      	ldr	r1, [pc, #460]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea4:	e040      	b.n	8002f28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d023      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eae:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6e      	ldr	r2, [pc, #440]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7fe fdbf 	bl	8001a3c <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec2:	f7fe fdbb 	bl	8001a3c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e263      	b.n	800339c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed4:	4b65      	ldr	r3, [pc, #404]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee0:	4b62      	ldr	r3, [pc, #392]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	061b      	lsls	r3, r3, #24
 8002eee:	495f      	ldr	r1, [pc, #380]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
 8002ef4:	e018      	b.n	8002f28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef6:	4b5d      	ldr	r3, [pc, #372]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a5c      	ldr	r2, [pc, #368]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f02:	f7fe fd9b 	bl	8001a3c <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fd97 	bl	8001a3c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e23f      	b.n	800339c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f1c:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f0      	bne.n	8002f0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d03c      	beq.n	8002fae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01c      	beq.n	8002f76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f3c:	4b4b      	ldr	r3, [pc, #300]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f42:	4a4a      	ldr	r2, [pc, #296]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7fe fd76 	bl	8001a3c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f54:	f7fe fd72 	bl	8001a3c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e21a      	b.n	800339c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f66:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ef      	beq.n	8002f54 <HAL_RCC_OscConfig+0x3ec>
 8002f74:	e01b      	b.n	8002fae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7c:	4a3b      	ldr	r2, [pc, #236]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002f7e:	f023 0301 	bic.w	r3, r3, #1
 8002f82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f86:	f7fe fd59 	bl	8001a3c <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fd55 	bl	8001a3c <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e1fd      	b.n	800339c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fa0:	4b32      	ldr	r3, [pc, #200]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1ef      	bne.n	8002f8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80a6 	beq.w	8003108 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10d      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fcc:	4b27      	ldr	r3, [pc, #156]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	4a26      	ldr	r2, [pc, #152]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe8:	4b21      	ldr	r3, [pc, #132]	; (8003070 <HAL_RCC_OscConfig+0x508>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d118      	bne.n	8003026 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <HAL_RCC_OscConfig+0x508>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1d      	ldr	r2, [pc, #116]	; (8003070 <HAL_RCC_OscConfig+0x508>)
 8002ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003000:	f7fe fd1c 	bl	8001a3c <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003008:	f7fe fd18 	bl	8001a3c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e1c0      	b.n	800339c <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <HAL_RCC_OscConfig+0x508>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d108      	bne.n	8003040 <HAL_RCC_OscConfig+0x4d8>
 800302e:	4b0f      	ldr	r3, [pc, #60]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	4a0d      	ldr	r2, [pc, #52]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800303e:	e029      	b.n	8003094 <HAL_RCC_OscConfig+0x52c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b05      	cmp	r3, #5
 8003046:	d115      	bne.n	8003074 <HAL_RCC_OscConfig+0x50c>
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <HAL_RCC_OscConfig+0x504>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304e:	4a07      	ldr	r2, [pc, #28]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <HAL_RCC_OscConfig+0x504>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	4a03      	ldr	r2, [pc, #12]	; (800306c <HAL_RCC_OscConfig+0x504>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003068:	e014      	b.n	8003094 <HAL_RCC_OscConfig+0x52c>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	40007000 	.word	0x40007000
 8003074:	4b9a      	ldr	r3, [pc, #616]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	4a99      	ldr	r2, [pc, #612]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003084:	4b96      	ldr	r3, [pc, #600]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308a:	4a95      	ldr	r2, [pc, #596]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 800308c:	f023 0304 	bic.w	r3, r3, #4
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d016      	beq.n	80030ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fe fcce 	bl	8001a3c <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a4:	f7fe fcca 	bl	8001a3c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e170      	b.n	800339c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ba:	4b89      	ldr	r3, [pc, #548]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ed      	beq.n	80030a4 <HAL_RCC_OscConfig+0x53c>
 80030c8:	e015      	b.n	80030f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fe fcb7 	bl	8001a3c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe fcb3 	bl	8001a3c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e159      	b.n	800339c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030e8:	4b7d      	ldr	r3, [pc, #500]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1ed      	bne.n	80030d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f6:	7ffb      	ldrb	r3, [r7, #31]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d105      	bne.n	8003108 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fc:	4b78      	ldr	r3, [pc, #480]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	4a77      	ldr	r2, [pc, #476]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 8003102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003106:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d03c      	beq.n	800318e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01c      	beq.n	8003156 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800311c:	4b70      	ldr	r3, [pc, #448]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 800311e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003122:	4a6f      	ldr	r2, [pc, #444]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312c:	f7fe fc86 	bl	8001a3c <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003134:	f7fe fc82 	bl	8001a3c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e12a      	b.n	800339c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003146:	4b66      	ldr	r3, [pc, #408]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 8003148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0ef      	beq.n	8003134 <HAL_RCC_OscConfig+0x5cc>
 8003154:	e01b      	b.n	800318e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003156:	4b62      	ldr	r3, [pc, #392]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 8003158:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800315c:	4a60      	ldr	r2, [pc, #384]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003166:	f7fe fc69 	bl	8001a3c <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800316e:	f7fe fc65 	bl	8001a3c <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e10d      	b.n	800339c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003180:	4b57      	ldr	r3, [pc, #348]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 8003182:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1ef      	bne.n	800316e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8101 	beq.w	800339a <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	2b02      	cmp	r3, #2
 800319e:	f040 80c9 	bne.w	8003334 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031a2:	4b4f      	ldr	r3, [pc, #316]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f003 0203 	and.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d12c      	bne.n	8003210 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	3b01      	subs	r3, #1
 80031c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d123      	bne.n	8003210 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d11b      	bne.n	8003210 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d113      	bne.n	8003210 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	3b01      	subs	r3, #1
 80031f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d109      	bne.n	8003210 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	3b01      	subs	r3, #1
 800320a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d06b      	beq.n	80032e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d062      	beq.n	80032dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003216:	4b32      	ldr	r3, [pc, #200]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0ba      	b.n	800339c <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003226:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2d      	ldr	r2, [pc, #180]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 800322c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003230:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003232:	f7fe fc03 	bl	8001a3c <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe fbff 	bl	8001a3c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0a7      	b.n	800339c <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800324c:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003258:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_RCC_OscConfig+0x77c>)
 800325e:	4013      	ands	r3, r2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003268:	3a01      	subs	r2, #1
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	4311      	orrs	r1, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003272:	0212      	lsls	r2, r2, #8
 8003274:	4311      	orrs	r1, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800327a:	0852      	lsrs	r2, r2, #1
 800327c:	3a01      	subs	r2, #1
 800327e:	0552      	lsls	r2, r2, #21
 8003280:	4311      	orrs	r1, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003286:	0852      	lsrs	r2, r2, #1
 8003288:	3a01      	subs	r2, #1
 800328a:	0652      	lsls	r2, r2, #25
 800328c:	4311      	orrs	r1, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003292:	06d2      	lsls	r2, r2, #27
 8003294:	430a      	orrs	r2, r1
 8003296:	4912      	ldr	r1, [pc, #72]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 8003298:	4313      	orrs	r3, r2
 800329a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800329c:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 80032a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 80032ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032b4:	f7fe fbc2 	bl	8001a3c <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fe fbbe 	bl	8001a3c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e066      	b.n	800339c <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <HAL_RCC_OscConfig+0x778>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032da:	e05e      	b.n	800339a <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e05d      	b.n	800339c <HAL_RCC_OscConfig+0x834>
 80032e0:	40021000 	.word	0x40021000
 80032e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e8:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d152      	bne.n	800339a <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032f4:	4b2b      	ldr	r3, [pc, #172]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a2a      	ldr	r2, [pc, #168]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003300:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4a27      	ldr	r2, [pc, #156]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 8003306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800330a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800330c:	f7fe fb96 	bl	8001a3c <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fe fb92 	bl	8001a3c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e03a      	b.n	800339c <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003326:	4b1f      	ldr	r3, [pc, #124]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x7ac>
 8003332:	e032      	b.n	800339a <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d02d      	beq.n	8003396 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 8003340:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003344:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003346:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003352:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 8003358:	f023 0303 	bic.w	r3, r3, #3
 800335c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800335e:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 8003364:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fe fb65 	bl	8001a3c <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003376:	f7fe fb61 	bl	8001a3c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e009      	b.n	800339c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_RCC_OscConfig+0x83c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x80e>
 8003394:	e001      	b.n	800339a <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40021000 	.word	0x40021000

080033a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0c8      	b.n	800354e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033bc:	4b66      	ldr	r3, [pc, #408]	; (8003558 <HAL_RCC_ClockConfig+0x1b0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d910      	bls.n	80033ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b63      	ldr	r3, [pc, #396]	; (8003558 <HAL_RCC_ClockConfig+0x1b0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 0207 	bic.w	r2, r3, #7
 80033d2:	4961      	ldr	r1, [pc, #388]	; (8003558 <HAL_RCC_ClockConfig+0x1b0>)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b5f      	ldr	r3, [pc, #380]	; (8003558 <HAL_RCC_ClockConfig+0x1b0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0b0      	b.n	800354e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d04c      	beq.n	8003492 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003400:	4b56      	ldr	r3, [pc, #344]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d121      	bne.n	8003450 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e09e      	b.n	800354e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d107      	bne.n	8003428 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003418:	4b50      	ldr	r3, [pc, #320]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d115      	bne.n	8003450 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e092      	b.n	800354e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d107      	bne.n	8003440 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003430:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e086      	b.n	800354e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003440:	4b46      	ldr	r3, [pc, #280]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e07e      	b.n	800354e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003450:	4b42      	ldr	r3, [pc, #264]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f023 0203 	bic.w	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	493f      	ldr	r1, [pc, #252]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003462:	f7fe faeb 	bl	8001a3c <HAL_GetTick>
 8003466:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003468:	e00a      	b.n	8003480 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346a:	f7fe fae7 	bl	8001a3c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	; 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e066      	b.n	800354e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003480:	4b36      	ldr	r3, [pc, #216]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 020c 	and.w	r2, r3, #12
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	429a      	cmp	r2, r3
 8003490:	d1eb      	bne.n	800346a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800349e:	4b2f      	ldr	r3, [pc, #188]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	492c      	ldr	r1, [pc, #176]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b0:	4b29      	ldr	r3, [pc, #164]	; (8003558 <HAL_RCC_ClockConfig+0x1b0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d210      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b26      	ldr	r3, [pc, #152]	; (8003558 <HAL_RCC_ClockConfig+0x1b0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 0207 	bic.w	r2, r3, #7
 80034c6:	4924      	ldr	r1, [pc, #144]	; (8003558 <HAL_RCC_ClockConfig+0x1b0>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b22      	ldr	r3, [pc, #136]	; (8003558 <HAL_RCC_ClockConfig+0x1b0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e036      	b.n	800354e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ec:	4b1b      	ldr	r3, [pc, #108]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4918      	ldr	r1, [pc, #96]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4910      	ldr	r1, [pc, #64]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800351e:	f000 f825 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8003522:	4602      	mov	r2, r0
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_RCC_ClockConfig+0x1b4>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	490c      	ldr	r1, [pc, #48]	; (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 8003530:	5ccb      	ldrb	r3, [r1, r3]
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fa2a 	bl	800199c <HAL_InitTick>
 8003548:	4603      	mov	r3, r0
 800354a:	72fb      	strb	r3, [r7, #11]

  return status;
 800354c:	7afb      	ldrb	r3, [r7, #11]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40022000 	.word	0x40022000
 800355c:	40021000 	.word	0x40021000
 8003560:	0800609c 	.word	0x0800609c
 8003564:	20000000 	.word	0x20000000
 8003568:	20000004 	.word	0x20000004

0800356c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b089      	sub	sp, #36	; 0x24
 8003570:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800357a:	4b3e      	ldr	r3, [pc, #248]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003584:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d121      	bne.n	80035de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d11e      	bne.n	80035de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035a0:	4b34      	ldr	r3, [pc, #208]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035ac:	4b31      	ldr	r3, [pc, #196]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	e005      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035bc:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035c8:	4a2b      	ldr	r2, [pc, #172]	; (8003678 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10d      	bne.n	80035f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d102      	bne.n	80035ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035e4:	4b25      	ldr	r3, [pc, #148]	; (800367c <HAL_RCC_GetSysClockFreq+0x110>)
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	e004      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035f0:	4b23      	ldr	r3, [pc, #140]	; (8003680 <HAL_RCC_GetSysClockFreq+0x114>)
 80035f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b0c      	cmp	r3, #12
 80035f8:	d134      	bne.n	8003664 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d003      	beq.n	8003612 <HAL_RCC_GetSysClockFreq+0xa6>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d003      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0xac>
 8003610:	e005      	b.n	800361e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003612:	4b1a      	ldr	r3, [pc, #104]	; (800367c <HAL_RCC_GetSysClockFreq+0x110>)
 8003614:	617b      	str	r3, [r7, #20]
      break;
 8003616:	e005      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <HAL_RCC_GetSysClockFreq+0x114>)
 800361a:	617b      	str	r3, [r7, #20]
      break;
 800361c:	e002      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	617b      	str	r3, [r7, #20]
      break;
 8003622:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003624:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	3301      	adds	r3, #1
 8003630:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	fb03 f202 	mul.w	r2, r3, r2
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	0e5b      	lsrs	r3, r3, #25
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	3301      	adds	r3, #1
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003662:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003664:	69bb      	ldr	r3, [r7, #24]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
 8003678:	080060b4 	.word	0x080060b4
 800367c:	00f42400 	.word	0x00f42400
 8003680:	007a1200 	.word	0x007a1200

08003684 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <HAL_RCC_GetHCLKFreq+0x14>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000000 	.word	0x20000000

0800369c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036a0:	f7ff fff0 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4904      	ldr	r1, [pc, #16]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	080060ac 	.word	0x080060ac

080036c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036cc:	f7ff ffda 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	0adb      	lsrs	r3, r3, #11
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	4904      	ldr	r1, [pc, #16]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40021000 	.word	0x40021000
 80036f0:	080060ac 	.word	0x080060ac

080036f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003700:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800370c:	f7ff f9c8 	bl	8002aa0 <HAL_PWREx_GetVoltageRange>
 8003710:	6178      	str	r0, [r7, #20]
 8003712:	e014      	b.n	800373e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	4a24      	ldr	r2, [pc, #144]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371e:	6593      	str	r3, [r2, #88]	; 0x58
 8003720:	4b22      	ldr	r3, [pc, #136]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800372c:	f7ff f9b8 	bl	8002aa0 <HAL_PWREx_GetVoltageRange>
 8003730:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003744:	d10b      	bne.n	800375e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b80      	cmp	r3, #128	; 0x80
 800374a:	d919      	bls.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2ba0      	cmp	r3, #160	; 0xa0
 8003750:	d902      	bls.n	8003758 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003752:	2302      	movs	r3, #2
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	e013      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003758:	2301      	movs	r3, #1
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	e010      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d902      	bls.n	800376a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003764:	2303      	movs	r3, #3
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e00a      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b80      	cmp	r3, #128	; 0x80
 800376e:	d102      	bne.n	8003776 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003770:	2302      	movs	r3, #2
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	e004      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b70      	cmp	r3, #112	; 0x70
 800377a:	d101      	bne.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800377c:	2301      	movs	r3, #1
 800377e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 0207 	bic.w	r2, r3, #7
 8003788:	4909      	ldr	r1, [pc, #36]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	429a      	cmp	r2, r3
 800379c:	d001      	beq.n	80037a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40022000 	.word	0x40022000

080037b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037bc:	2300      	movs	r3, #0
 80037be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037c0:	2300      	movs	r3, #0
 80037c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d031      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037d8:	d01a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80037da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037de:	d814      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037e8:	d10f      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80037ea:	4b5d      	ldr	r3, [pc, #372]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	4a5c      	ldr	r2, [pc, #368]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037f6:	e00c      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3304      	adds	r3, #4
 80037fc:	2100      	movs	r1, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f9de 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003808:	e003      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	74fb      	strb	r3, [r7, #19]
      break;
 800380e:	e000      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003812:	7cfb      	ldrb	r3, [r7, #19]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003818:	4b51      	ldr	r3, [pc, #324]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	494e      	ldr	r1, [pc, #312]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800382e:	e001      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 809e 	beq.w	800397e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003842:	2300      	movs	r3, #0
 8003844:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003846:	4b46      	ldr	r3, [pc, #280]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003856:	2300      	movs	r3, #0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00d      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385c:	4b40      	ldr	r3, [pc, #256]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	4a3f      	ldr	r2, [pc, #252]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003866:	6593      	str	r3, [r2, #88]	; 0x58
 8003868:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800386a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003874:	2301      	movs	r3, #1
 8003876:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003878:	4b3a      	ldr	r3, [pc, #232]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a39      	ldr	r2, [pc, #228]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800387e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003882:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003884:	f7fe f8da 	bl	8001a3c <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800388a:	e009      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388c:	f7fe f8d6 	bl	8001a3c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d902      	bls.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	74fb      	strb	r3, [r7, #19]
        break;
 800389e:	e005      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038a0:	4b30      	ldr	r3, [pc, #192]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0ef      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80038ac:	7cfb      	ldrb	r3, [r7, #19]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d15a      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038b2:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01e      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d019      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038ce:	4b24      	ldr	r3, [pc, #144]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038da:	4b21      	ldr	r3, [pc, #132]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e0:	4a1f      	ldr	r2, [pc, #124]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038ea:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038fa:	4a19      	ldr	r2, [pc, #100]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d016      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fe f896 	bl	8001a3c <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003912:	e00b      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003914:	f7fe f892 	bl	8001a3c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d902      	bls.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	74fb      	strb	r3, [r7, #19]
            break;
 800392a:	e006      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392c:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0ec      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003940:	4b07      	ldr	r3, [pc, #28]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394e:	4904      	ldr	r1, [pc, #16]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003956:	e009      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
 800395c:	e006      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000
 8003964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800396c:	7c7b      	ldrb	r3, [r7, #17]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d105      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003972:	4b8a      	ldr	r3, [pc, #552]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	4a89      	ldr	r2, [pc, #548]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800398a:	4b84      	ldr	r3, [pc, #528]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	f023 0203 	bic.w	r2, r3, #3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	4980      	ldr	r1, [pc, #512]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039ac:	4b7b      	ldr	r3, [pc, #492]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	f023 020c 	bic.w	r2, r3, #12
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	4978      	ldr	r1, [pc, #480]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039ce:	4b73      	ldr	r3, [pc, #460]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	496f      	ldr	r1, [pc, #444]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f0:	4b6a      	ldr	r3, [pc, #424]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fe:	4967      	ldr	r1, [pc, #412]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a12:	4b62      	ldr	r3, [pc, #392]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	495e      	ldr	r1, [pc, #376]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a34:	4b59      	ldr	r3, [pc, #356]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	4956      	ldr	r1, [pc, #344]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a56:	4b51      	ldr	r3, [pc, #324]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	494d      	ldr	r1, [pc, #308]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d028      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a78:	4b48      	ldr	r3, [pc, #288]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4945      	ldr	r1, [pc, #276]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a96:	d106      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a98:	4b40      	ldr	r3, [pc, #256]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a3f      	ldr	r2, [pc, #252]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aa2:	60d3      	str	r3, [r2, #12]
 8003aa4:	e011      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aae:	d10c      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f882 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ac0:	7cfb      	ldrb	r3, [r7, #19]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003ac6:	7cfb      	ldrb	r3, [r7, #19]
 8003ac8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d028      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ad6:	4b31      	ldr	r3, [pc, #196]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	492d      	ldr	r1, [pc, #180]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af4:	d106      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af6:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	4a28      	ldr	r2, [pc, #160]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b00:	60d3      	str	r3, [r2, #12]
 8003b02:	e011      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2101      	movs	r1, #1
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f853 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01c      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b42:	4916      	ldr	r1, [pc, #88]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b52:	d10c      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	2102      	movs	r1, #2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f830 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	4904      	ldr	r1, [pc, #16]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b90:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000

08003ba0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003baa:	f043 0304 	orr.w	r3, r3, #4
 8003bae:	6013      	str	r3, [r2, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000

08003bc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bce:	4b74      	ldr	r3, [pc, #464]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d018      	beq.n	8003c0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bda:	4b71      	ldr	r3, [pc, #452]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0203 	and.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d10d      	bne.n	8003c06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
       ||
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bf2:	4b6b      	ldr	r3, [pc, #428]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	091b      	lsrs	r3, r3, #4
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
       ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d047      	beq.n	8003c96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	e044      	b.n	8003c96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d018      	beq.n	8003c46 <RCCEx_PLLSAI1_Config+0x86>
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d825      	bhi.n	8003c64 <RCCEx_PLLSAI1_Config+0xa4>
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d002      	beq.n	8003c22 <RCCEx_PLLSAI1_Config+0x62>
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d009      	beq.n	8003c34 <RCCEx_PLLSAI1_Config+0x74>
 8003c20:	e020      	b.n	8003c64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c22:	4b5f      	ldr	r3, [pc, #380]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d11d      	bne.n	8003c6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c32:	e01a      	b.n	8003c6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c34:	4b5a      	ldr	r3, [pc, #360]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d116      	bne.n	8003c6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c44:	e013      	b.n	8003c6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c46:	4b56      	ldr	r3, [pc, #344]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c52:	4b53      	ldr	r3, [pc, #332]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c62:	e006      	b.n	8003c72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	73fb      	strb	r3, [r7, #15]
      break;
 8003c68:	e004      	b.n	8003c74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c72:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10d      	bne.n	8003c96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c7a:	4b49      	ldr	r3, [pc, #292]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6819      	ldr	r1, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	4943      	ldr	r1, [pc, #268]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d17c      	bne.n	8003d96 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c9c:	4b40      	ldr	r3, [pc, #256]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a3f      	ldr	r2, [pc, #252]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca8:	f7fd fec8 	bl	8001a3c <HAL_GetTick>
 8003cac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cae:	e009      	b.n	8003cc4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cb0:	f7fd fec4 	bl	8001a3c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d902      	bls.n	8003cc4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	73fb      	strb	r3, [r7, #15]
        break;
 8003cc2:	e005      	b.n	8003cd0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cc4:	4b36      	ldr	r3, [pc, #216]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1ef      	bne.n	8003cb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d15f      	bne.n	8003d96 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d110      	bne.n	8003cfe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cdc:	4b30      	ldr	r3, [pc, #192]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003ce4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6892      	ldr	r2, [r2, #8]
 8003cec:	0211      	lsls	r1, r2, #8
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68d2      	ldr	r2, [r2, #12]
 8003cf2:	06d2      	lsls	r2, r2, #27
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	492a      	ldr	r1, [pc, #168]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	610b      	str	r3, [r1, #16]
 8003cfc:	e027      	b.n	8003d4e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d112      	bne.n	8003d2a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d04:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6892      	ldr	r2, [r2, #8]
 8003d14:	0211      	lsls	r1, r2, #8
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6912      	ldr	r2, [r2, #16]
 8003d1a:	0852      	lsrs	r2, r2, #1
 8003d1c:	3a01      	subs	r2, #1
 8003d1e:	0552      	lsls	r2, r2, #21
 8003d20:	430a      	orrs	r2, r1
 8003d22:	491f      	ldr	r1, [pc, #124]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	610b      	str	r3, [r1, #16]
 8003d28:	e011      	b.n	8003d4e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6892      	ldr	r2, [r2, #8]
 8003d3a:	0211      	lsls	r1, r2, #8
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6952      	ldr	r2, [r2, #20]
 8003d40:	0852      	lsrs	r2, r2, #1
 8003d42:	3a01      	subs	r2, #1
 8003d44:	0652      	lsls	r2, r2, #25
 8003d46:	430a      	orrs	r2, r1
 8003d48:	4915      	ldr	r1, [pc, #84]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d4e:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a13      	ldr	r2, [pc, #76]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5a:	f7fd fe6f 	bl	8001a3c <HAL_GetTick>
 8003d5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d60:	e009      	b.n	8003d76 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d62:	f7fd fe6b 	bl	8001a3c <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d902      	bls.n	8003d76 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	73fb      	strb	r3, [r7, #15]
          break;
 8003d74:	e005      	b.n	8003d82 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d76:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0ef      	beq.n	8003d62 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d106      	bne.n	8003d96 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000

08003da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e049      	b.n	8003e4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fd fc76 	bl	80016bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f000 fb52 	bl	800448c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e049      	b.n	8003ef8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d106      	bne.n	8003e7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f841 	bl	8003f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f000 fafb 	bl	800448c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <HAL_TIM_PWM_Start+0x24>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e03c      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x9e>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d109      	bne.n	8003f52 <HAL_TIM_PWM_Start+0x3e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	e02f      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x9e>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d109      	bne.n	8003f6c <HAL_TIM_PWM_Start+0x58>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e022      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x9e>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b0c      	cmp	r3, #12
 8003f70:	d109      	bne.n	8003f86 <HAL_TIM_PWM_Start+0x72>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	bf14      	ite	ne
 8003f7e:	2301      	movne	r3, #1
 8003f80:	2300      	moveq	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	e015      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x9e>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d109      	bne.n	8003fa0 <HAL_TIM_PWM_Start+0x8c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	bf14      	ite	ne
 8003f98:	2301      	movne	r3, #1
 8003f9a:	2300      	moveq	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	e008      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x9e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	bf14      	ite	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	2300      	moveq	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e07e      	b.n	80040b8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_PWM_Start+0xb6>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc8:	e023      	b.n	8004012 <HAL_TIM_PWM_Start+0xfe>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_PWM_Start+0xc6>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd8:	e01b      	b.n	8004012 <HAL_TIM_PWM_Start+0xfe>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d104      	bne.n	8003fea <HAL_TIM_PWM_Start+0xd6>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe8:	e013      	b.n	8004012 <HAL_TIM_PWM_Start+0xfe>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	d104      	bne.n	8003ffa <HAL_TIM_PWM_Start+0xe6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ff8:	e00b      	b.n	8004012 <HAL_TIM_PWM_Start+0xfe>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b10      	cmp	r3, #16
 8003ffe:	d104      	bne.n	800400a <HAL_TIM_PWM_Start+0xf6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004008:	e003      	b.n	8004012 <HAL_TIM_PWM_Start+0xfe>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2201      	movs	r2, #1
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fdb2 	bl	8004b84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <HAL_TIM_PWM_Start+0x1ac>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_TIM_PWM_Start+0x12a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a25      	ldr	r2, [pc, #148]	; (80040c4 <HAL_TIM_PWM_Start+0x1b0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_TIM_PWM_Start+0x12a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a23      	ldr	r2, [pc, #140]	; (80040c8 <HAL_TIM_PWM_Start+0x1b4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d101      	bne.n	8004042 <HAL_TIM_PWM_Start+0x12e>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <HAL_TIM_PWM_Start+0x130>
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004056:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <HAL_TIM_PWM_Start+0x1ac>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d009      	beq.n	8004076 <HAL_TIM_PWM_Start+0x162>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406a:	d004      	beq.n	8004076 <HAL_TIM_PWM_Start+0x162>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a14      	ldr	r2, [pc, #80]	; (80040c4 <HAL_TIM_PWM_Start+0x1b0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d115      	bne.n	80040a2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	4b13      	ldr	r3, [pc, #76]	; (80040cc <HAL_TIM_PWM_Start+0x1b8>)
 800407e:	4013      	ands	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b06      	cmp	r3, #6
 8004086:	d015      	beq.n	80040b4 <HAL_TIM_PWM_Start+0x1a0>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408e:	d011      	beq.n	80040b4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a0:	e008      	b.n	80040b4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	e000      	b.n	80040b6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40014400 	.word	0x40014400
 80040cc:	00010007 	.word	0x00010007

080040d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e0ff      	b.n	80042ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b14      	cmp	r3, #20
 80040fa:	f200 80f0 	bhi.w	80042de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040fe:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004159 	.word	0x08004159
 8004108:	080042df 	.word	0x080042df
 800410c:	080042df 	.word	0x080042df
 8004110:	080042df 	.word	0x080042df
 8004114:	08004199 	.word	0x08004199
 8004118:	080042df 	.word	0x080042df
 800411c:	080042df 	.word	0x080042df
 8004120:	080042df 	.word	0x080042df
 8004124:	080041db 	.word	0x080041db
 8004128:	080042df 	.word	0x080042df
 800412c:	080042df 	.word	0x080042df
 8004130:	080042df 	.word	0x080042df
 8004134:	0800421b 	.word	0x0800421b
 8004138:	080042df 	.word	0x080042df
 800413c:	080042df 	.word	0x080042df
 8004140:	080042df 	.word	0x080042df
 8004144:	0800425d 	.word	0x0800425d
 8004148:	080042df 	.word	0x080042df
 800414c:	080042df 	.word	0x080042df
 8004150:	080042df 	.word	0x080042df
 8004154:	0800429d 	.word	0x0800429d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f9f8 	bl	8004554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0208 	orr.w	r2, r2, #8
 8004172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0204 	bic.w	r2, r2, #4
 8004182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6999      	ldr	r1, [r3, #24]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	619a      	str	r2, [r3, #24]
      break;
 8004196:	e0a5      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fa54 	bl	800464c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	021a      	lsls	r2, r3, #8
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	619a      	str	r2, [r3, #24]
      break;
 80041d8:	e084      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 faad 	bl	8004740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0208 	orr.w	r2, r2, #8
 80041f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0204 	bic.w	r2, r2, #4
 8004204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69d9      	ldr	r1, [r3, #28]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	61da      	str	r2, [r3, #28]
      break;
 8004218:	e064      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fb05 	bl	8004830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69d9      	ldr	r1, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	021a      	lsls	r2, r3, #8
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	61da      	str	r2, [r3, #28]
      break;
 800425a:	e043      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fb42 	bl	80048ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0208 	orr.w	r2, r2, #8
 8004276:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0204 	bic.w	r2, r2, #4
 8004286:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800429a:	e023      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fb7a 	bl	800499c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	021a      	lsls	r2, r3, #8
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042dc:	e002      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	75fb      	strb	r3, [r7, #23]
      break;
 80042e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop

080042f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_TIM_ConfigClockSource+0x1c>
 8004310:	2302      	movs	r3, #2
 8004312:	e0b6      	b.n	8004482 <HAL_TIM_ConfigClockSource+0x18a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004332:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800433e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004350:	d03e      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0xd8>
 8004352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004356:	f200 8087 	bhi.w	8004468 <HAL_TIM_ConfigClockSource+0x170>
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435e:	f000 8086 	beq.w	800446e <HAL_TIM_ConfigClockSource+0x176>
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004366:	d87f      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004368:	2b70      	cmp	r3, #112	; 0x70
 800436a:	d01a      	beq.n	80043a2 <HAL_TIM_ConfigClockSource+0xaa>
 800436c:	2b70      	cmp	r3, #112	; 0x70
 800436e:	d87b      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004370:	2b60      	cmp	r3, #96	; 0x60
 8004372:	d050      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0x11e>
 8004374:	2b60      	cmp	r3, #96	; 0x60
 8004376:	d877      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004378:	2b50      	cmp	r3, #80	; 0x50
 800437a:	d03c      	beq.n	80043f6 <HAL_TIM_ConfigClockSource+0xfe>
 800437c:	2b50      	cmp	r3, #80	; 0x50
 800437e:	d873      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004380:	2b40      	cmp	r3, #64	; 0x40
 8004382:	d058      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0x13e>
 8004384:	2b40      	cmp	r3, #64	; 0x40
 8004386:	d86f      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004388:	2b30      	cmp	r3, #48	; 0x30
 800438a:	d064      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x15e>
 800438c:	2b30      	cmp	r3, #48	; 0x30
 800438e:	d86b      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004390:	2b20      	cmp	r3, #32
 8004392:	d060      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x15e>
 8004394:	2b20      	cmp	r3, #32
 8004396:	d867      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d05c      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x15e>
 800439c:	2b10      	cmp	r3, #16
 800439e:	d05a      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x15e>
 80043a0:	e062      	b.n	8004468 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6899      	ldr	r1, [r3, #8]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f000 fbc7 	bl	8004b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	609a      	str	r2, [r3, #8]
      break;
 80043ce:	e04f      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6899      	ldr	r1, [r3, #8]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f000 fbb0 	bl	8004b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043f2:	609a      	str	r2, [r3, #8]
      break;
 80043f4:	e03c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6859      	ldr	r1, [r3, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	461a      	mov	r2, r3
 8004404:	f000 fb24 	bl	8004a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2150      	movs	r1, #80	; 0x50
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fb7d 	bl	8004b0e <TIM_ITRx_SetConfig>
      break;
 8004414:	e02c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6859      	ldr	r1, [r3, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	461a      	mov	r2, r3
 8004424:	f000 fb43 	bl	8004aae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2160      	movs	r1, #96	; 0x60
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fb6d 	bl	8004b0e <TIM_ITRx_SetConfig>
      break;
 8004434:	e01c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	461a      	mov	r2, r3
 8004444:	f000 fb04 	bl	8004a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2140      	movs	r1, #64	; 0x40
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fb5d 	bl	8004b0e <TIM_ITRx_SetConfig>
      break;
 8004454:	e00c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f000 fb54 	bl	8004b0e <TIM_ITRx_SetConfig>
      break;
 8004466:	e003      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      break;
 800446c:	e000      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800446e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004480:	7bfb      	ldrb	r3, [r7, #15]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a2a      	ldr	r2, [pc, #168]	; (8004548 <TIM_Base_SetConfig+0xbc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_Base_SetConfig+0x20>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044aa:	d108      	bne.n	80044be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a21      	ldr	r2, [pc, #132]	; (8004548 <TIM_Base_SetConfig+0xbc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_Base_SetConfig+0x52>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044cc:	d007      	beq.n	80044de <TIM_Base_SetConfig+0x52>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a1e      	ldr	r2, [pc, #120]	; (800454c <TIM_Base_SetConfig+0xc0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_Base_SetConfig+0x52>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <TIM_Base_SetConfig+0xc4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a0c      	ldr	r2, [pc, #48]	; (8004548 <TIM_Base_SetConfig+0xbc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d007      	beq.n	800452c <TIM_Base_SetConfig+0xa0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a0b      	ldr	r2, [pc, #44]	; (800454c <TIM_Base_SetConfig+0xc0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <TIM_Base_SetConfig+0xa0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a0a      	ldr	r2, [pc, #40]	; (8004550 <TIM_Base_SetConfig+0xc4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d103      	bne.n	8004534 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	615a      	str	r2, [r3, #20]
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40014000 	.word	0x40014000
 8004550:	40014400 	.word	0x40014400

08004554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f023 0201 	bic.w	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0303 	bic.w	r3, r3, #3
 800458e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f023 0302 	bic.w	r3, r3, #2
 80045a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a24      	ldr	r2, [pc, #144]	; (8004640 <TIM_OC1_SetConfig+0xec>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <TIM_OC1_SetConfig+0x70>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a23      	ldr	r2, [pc, #140]	; (8004644 <TIM_OC1_SetConfig+0xf0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_OC1_SetConfig+0x70>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a22      	ldr	r2, [pc, #136]	; (8004648 <TIM_OC1_SetConfig+0xf4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d10c      	bne.n	80045de <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0308 	bic.w	r3, r3, #8
 80045ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f023 0304 	bic.w	r3, r3, #4
 80045dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a17      	ldr	r2, [pc, #92]	; (8004640 <TIM_OC1_SetConfig+0xec>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d007      	beq.n	80045f6 <TIM_OC1_SetConfig+0xa2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a16      	ldr	r2, [pc, #88]	; (8004644 <TIM_OC1_SetConfig+0xf0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d003      	beq.n	80045f6 <TIM_OC1_SetConfig+0xa2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a15      	ldr	r2, [pc, #84]	; (8004648 <TIM_OC1_SetConfig+0xf4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d111      	bne.n	800461a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	621a      	str	r2, [r3, #32]
}
 8004634:	bf00      	nop
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400

0800464c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f023 0210 	bic.w	r2, r3, #16
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800467a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800467e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 0320 	bic.w	r3, r3, #32
 800469a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a22      	ldr	r2, [pc, #136]	; (8004734 <TIM_OC2_SetConfig+0xe8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d10d      	bne.n	80046cc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a19      	ldr	r2, [pc, #100]	; (8004734 <TIM_OC2_SetConfig+0xe8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_OC2_SetConfig+0x98>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a18      	ldr	r2, [pc, #96]	; (8004738 <TIM_OC2_SetConfig+0xec>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_OC2_SetConfig+0x98>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a17      	ldr	r2, [pc, #92]	; (800473c <TIM_OC2_SetConfig+0xf0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d113      	bne.n	800470c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40012c00 	.word	0x40012c00
 8004738:	40014000 	.word	0x40014000
 800473c:	40014400 	.word	0x40014400

08004740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800478c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a21      	ldr	r2, [pc, #132]	; (8004824 <TIM_OC3_SetConfig+0xe4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d10d      	bne.n	80047be <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a18      	ldr	r2, [pc, #96]	; (8004824 <TIM_OC3_SetConfig+0xe4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <TIM_OC3_SetConfig+0x96>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a17      	ldr	r2, [pc, #92]	; (8004828 <TIM_OC3_SetConfig+0xe8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_OC3_SetConfig+0x96>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a16      	ldr	r2, [pc, #88]	; (800482c <TIM_OC3_SetConfig+0xec>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d113      	bne.n	80047fe <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40014000 	.word	0x40014000
 800482c:	40014400 	.word	0x40014400

08004830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800487e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a14      	ldr	r2, [pc, #80]	; (80048e0 <TIM_OC4_SetConfig+0xb0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d007      	beq.n	80048a4 <TIM_OC4_SetConfig+0x74>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <TIM_OC4_SetConfig+0xb4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d003      	beq.n	80048a4 <TIM_OC4_SetConfig+0x74>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a12      	ldr	r2, [pc, #72]	; (80048e8 <TIM_OC4_SetConfig+0xb8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d109      	bne.n	80048b8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	019b      	lsls	r3, r3, #6
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40012c00 	.word	0x40012c00
 80048e4:	40014000 	.word	0x40014000
 80048e8:	40014400 	.word	0x40014400

080048ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004930:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	041b      	lsls	r3, r3, #16
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a13      	ldr	r2, [pc, #76]	; (8004990 <TIM_OC5_SetConfig+0xa4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <TIM_OC5_SetConfig+0x6a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a12      	ldr	r2, [pc, #72]	; (8004994 <TIM_OC5_SetConfig+0xa8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d003      	beq.n	8004956 <TIM_OC5_SetConfig+0x6a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a11      	ldr	r2, [pc, #68]	; (8004998 <TIM_OC5_SetConfig+0xac>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d109      	bne.n	800496a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800495c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	621a      	str	r2, [r3, #32]
}
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40014000 	.word	0x40014000
 8004998:	40014400 	.word	0x40014400

0800499c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	051b      	lsls	r3, r3, #20
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a14      	ldr	r2, [pc, #80]	; (8004a44 <TIM_OC6_SetConfig+0xa8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d007      	beq.n	8004a08 <TIM_OC6_SetConfig+0x6c>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <TIM_OC6_SetConfig+0xac>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_OC6_SetConfig+0x6c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <TIM_OC6_SetConfig+0xb0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d109      	bne.n	8004a1c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	029b      	lsls	r3, r3, #10
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	621a      	str	r2, [r3, #32]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40014400 	.word	0x40014400

08004a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f023 0201 	bic.w	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f023 030a 	bic.w	r3, r3, #10
 8004a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b087      	sub	sp, #28
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f023 0210 	bic.w	r2, r3, #16
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	031b      	lsls	r3, r3, #12
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f043 0307 	orr.w	r3, r3, #7
 8004b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	609a      	str	r2, [r3, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	021a      	lsls	r2, r3, #8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 031f 	and.w	r3, r3, #31
 8004b96:	2201      	movs	r2, #1
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1a      	ldr	r2, [r3, #32]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	401a      	ands	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	621a      	str	r2, [r3, #32]
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e04f      	b.n	8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a21      	ldr	r2, [pc, #132]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d108      	bne.n	8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c50:	d004      	beq.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a10      	ldr	r2, [pc, #64]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d10c      	bne.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40014000 	.word	0x40014000

08004c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e040      	b.n	8004d30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fc fd4e 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2224      	movs	r2, #36	; 0x24
 8004cc8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f8c0 	bl	8004e60 <UART_SetConfig>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e022      	b.n	8004d30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fae0 	bl	80052b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fb67 	bl	80053fc <UART_CheckIdleState>
 8004d2e:	4603      	mov	r3, r0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	; 0x28
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	f040 8082 	bne.w	8004e56 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_UART_Transmit+0x26>
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e07a      	b.n	8004e58 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_UART_Transmit+0x38>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e073      	b.n	8004e58 <HAL_UART_Transmit+0x120>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2221      	movs	r2, #33	; 0x21
 8004d84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d86:	f7fc fe59 	bl	8001a3c <HAL_GetTick>
 8004d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	88fa      	ldrh	r2, [r7, #6]
 8004d90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	88fa      	ldrh	r2, [r7, #6]
 8004d98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da4:	d108      	bne.n	8004db8 <HAL_UART_Transmit+0x80>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d104      	bne.n	8004db8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	e003      	b.n	8004dc0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004dc8:	e02d      	b.n	8004e26 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2180      	movs	r1, #128	; 0x80
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fb5a 	bl	800548e <UART_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e039      	b.n	8004e58 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10b      	bne.n	8004e02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	881a      	ldrh	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004df6:	b292      	uxth	r2, r2
 8004df8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	3302      	adds	r3, #2
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	e008      	b.n	8004e14 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	781a      	ldrb	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	b292      	uxth	r2, r2
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	3301      	adds	r3, #1
 8004e12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1cb      	bne.n	8004dca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2140      	movs	r1, #64	; 0x40
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fb26 	bl	800548e <UART_WaitOnFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e005      	b.n	8004e58 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e000      	b.n	8004e58 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
  }
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e64:	b08a      	sub	sp, #40	; 0x28
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4bb4      	ldr	r3, [pc, #720]	; (8005160 <UART_SetConfig+0x300>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4aa9      	ldr	r2, [pc, #676]	; (8005164 <UART_SetConfig+0x304>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004edc:	430a      	orrs	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4aa0      	ldr	r2, [pc, #640]	; (8005168 <UART_SetConfig+0x308>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d126      	bne.n	8004f38 <UART_SetConfig+0xd8>
 8004eea:	4ba0      	ldr	r3, [pc, #640]	; (800516c <UART_SetConfig+0x30c>)
 8004eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d81b      	bhi.n	8004f30 <UART_SetConfig+0xd0>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0xa0>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f11 	.word	0x08004f11
 8004f04:	08004f21 	.word	0x08004f21
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f29 	.word	0x08004f29
 8004f10:	2301      	movs	r3, #1
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f16:	e080      	b.n	800501a <UART_SetConfig+0x1ba>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1e:	e07c      	b.n	800501a <UART_SetConfig+0x1ba>
 8004f20:	2304      	movs	r3, #4
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f26:	e078      	b.n	800501a <UART_SetConfig+0x1ba>
 8004f28:	2308      	movs	r3, #8
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f2e:	e074      	b.n	800501a <UART_SetConfig+0x1ba>
 8004f30:	2310      	movs	r3, #16
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f36:	e070      	b.n	800501a <UART_SetConfig+0x1ba>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a8c      	ldr	r2, [pc, #560]	; (8005170 <UART_SetConfig+0x310>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d138      	bne.n	8004fb4 <UART_SetConfig+0x154>
 8004f42:	4b8a      	ldr	r3, [pc, #552]	; (800516c <UART_SetConfig+0x30c>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	f003 030c 	and.w	r3, r3, #12
 8004f4c:	2b0c      	cmp	r3, #12
 8004f4e:	d82d      	bhi.n	8004fac <UART_SetConfig+0x14c>
 8004f50:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <UART_SetConfig+0xf8>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f8d 	.word	0x08004f8d
 8004f5c:	08004fad 	.word	0x08004fad
 8004f60:	08004fad 	.word	0x08004fad
 8004f64:	08004fad 	.word	0x08004fad
 8004f68:	08004f9d 	.word	0x08004f9d
 8004f6c:	08004fad 	.word	0x08004fad
 8004f70:	08004fad 	.word	0x08004fad
 8004f74:	08004fad 	.word	0x08004fad
 8004f78:	08004f95 	.word	0x08004f95
 8004f7c:	08004fad 	.word	0x08004fad
 8004f80:	08004fad 	.word	0x08004fad
 8004f84:	08004fad 	.word	0x08004fad
 8004f88:	08004fa5 	.word	0x08004fa5
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f92:	e042      	b.n	800501a <UART_SetConfig+0x1ba>
 8004f94:	2302      	movs	r3, #2
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9a:	e03e      	b.n	800501a <UART_SetConfig+0x1ba>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa2:	e03a      	b.n	800501a <UART_SetConfig+0x1ba>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004faa:	e036      	b.n	800501a <UART_SetConfig+0x1ba>
 8004fac:	2310      	movs	r3, #16
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb2:	e032      	b.n	800501a <UART_SetConfig+0x1ba>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a6a      	ldr	r2, [pc, #424]	; (8005164 <UART_SetConfig+0x304>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d12a      	bne.n	8005014 <UART_SetConfig+0x1b4>
 8004fbe:	4b6b      	ldr	r3, [pc, #428]	; (800516c <UART_SetConfig+0x30c>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fcc:	d01a      	beq.n	8005004 <UART_SetConfig+0x1a4>
 8004fce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fd2:	d81b      	bhi.n	800500c <UART_SetConfig+0x1ac>
 8004fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd8:	d00c      	beq.n	8004ff4 <UART_SetConfig+0x194>
 8004fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fde:	d815      	bhi.n	800500c <UART_SetConfig+0x1ac>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <UART_SetConfig+0x18c>
 8004fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe8:	d008      	beq.n	8004ffc <UART_SetConfig+0x19c>
 8004fea:	e00f      	b.n	800500c <UART_SetConfig+0x1ac>
 8004fec:	2300      	movs	r3, #0
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff2:	e012      	b.n	800501a <UART_SetConfig+0x1ba>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffa:	e00e      	b.n	800501a <UART_SetConfig+0x1ba>
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005002:	e00a      	b.n	800501a <UART_SetConfig+0x1ba>
 8005004:	2308      	movs	r3, #8
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800500a:	e006      	b.n	800501a <UART_SetConfig+0x1ba>
 800500c:	2310      	movs	r3, #16
 800500e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005012:	e002      	b.n	800501a <UART_SetConfig+0x1ba>
 8005014:	2310      	movs	r3, #16
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a51      	ldr	r2, [pc, #324]	; (8005164 <UART_SetConfig+0x304>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d17a      	bne.n	800511a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005024:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005028:	2b08      	cmp	r3, #8
 800502a:	d824      	bhi.n	8005076 <UART_SetConfig+0x216>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <UART_SetConfig+0x1d4>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005059 	.word	0x08005059
 8005038:	08005077 	.word	0x08005077
 800503c:	08005061 	.word	0x08005061
 8005040:	08005077 	.word	0x08005077
 8005044:	08005067 	.word	0x08005067
 8005048:	08005077 	.word	0x08005077
 800504c:	08005077 	.word	0x08005077
 8005050:	08005077 	.word	0x08005077
 8005054:	0800506f 	.word	0x0800506f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005058:	f7fe fb20 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 800505c:	61f8      	str	r0, [r7, #28]
        break;
 800505e:	e010      	b.n	8005082 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005060:	4b44      	ldr	r3, [pc, #272]	; (8005174 <UART_SetConfig+0x314>)
 8005062:	61fb      	str	r3, [r7, #28]
        break;
 8005064:	e00d      	b.n	8005082 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005066:	f7fe fa81 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800506a:	61f8      	str	r0, [r7, #28]
        break;
 800506c:	e009      	b.n	8005082 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800506e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005072:	61fb      	str	r3, [r7, #28]
        break;
 8005074:	e005      	b.n	8005082 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005080:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8107 	beq.w	8005298 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	4413      	add	r3, r2
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	429a      	cmp	r2, r3
 8005098:	d305      	bcc.n	80050a6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d903      	bls.n	80050ae <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050ac:	e0f4      	b.n	8005298 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2200      	movs	r2, #0
 80050b2:	461c      	mov	r4, r3
 80050b4:	4615      	mov	r5, r2
 80050b6:	f04f 0200 	mov.w	r2, #0
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	022b      	lsls	r3, r5, #8
 80050c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80050c4:	0222      	lsls	r2, r4, #8
 80050c6:	68f9      	ldr	r1, [r7, #12]
 80050c8:	6849      	ldr	r1, [r1, #4]
 80050ca:	0849      	lsrs	r1, r1, #1
 80050cc:	2000      	movs	r0, #0
 80050ce:	4688      	mov	r8, r1
 80050d0:	4681      	mov	r9, r0
 80050d2:	eb12 0a08 	adds.w	sl, r2, r8
 80050d6:	eb43 0b09 	adc.w	fp, r3, r9
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	603b      	str	r3, [r7, #0]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050e8:	4650      	mov	r0, sl
 80050ea:	4659      	mov	r1, fp
 80050ec:	f7fb fb2c 	bl	8000748 <__aeabi_uldivmod>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4613      	mov	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050fe:	d308      	bcc.n	8005112 <UART_SetConfig+0x2b2>
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005106:	d204      	bcs.n	8005112 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	60da      	str	r2, [r3, #12]
 8005110:	e0c2      	b.n	8005298 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005118:	e0be      	b.n	8005298 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005122:	d16a      	bne.n	80051fa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005128:	2b08      	cmp	r3, #8
 800512a:	d834      	bhi.n	8005196 <UART_SetConfig+0x336>
 800512c:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <UART_SetConfig+0x2d4>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005159 	.word	0x08005159
 8005138:	08005179 	.word	0x08005179
 800513c:	08005181 	.word	0x08005181
 8005140:	08005197 	.word	0x08005197
 8005144:	08005187 	.word	0x08005187
 8005148:	08005197 	.word	0x08005197
 800514c:	08005197 	.word	0x08005197
 8005150:	08005197 	.word	0x08005197
 8005154:	0800518f 	.word	0x0800518f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005158:	f7fe faa0 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 800515c:	61f8      	str	r0, [r7, #28]
        break;
 800515e:	e020      	b.n	80051a2 <UART_SetConfig+0x342>
 8005160:	efff69f3 	.word	0xefff69f3
 8005164:	40008000 	.word	0x40008000
 8005168:	40013800 	.word	0x40013800
 800516c:	40021000 	.word	0x40021000
 8005170:	40004400 	.word	0x40004400
 8005174:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005178:	f7fe faa6 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 800517c:	61f8      	str	r0, [r7, #28]
        break;
 800517e:	e010      	b.n	80051a2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005180:	4b4c      	ldr	r3, [pc, #304]	; (80052b4 <UART_SetConfig+0x454>)
 8005182:	61fb      	str	r3, [r7, #28]
        break;
 8005184:	e00d      	b.n	80051a2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005186:	f7fe f9f1 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800518a:	61f8      	str	r0, [r7, #28]
        break;
 800518c:	e009      	b.n	80051a2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800518e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005192:	61fb      	str	r3, [r7, #28]
        break;
 8005194:	e005      	b.n	80051a2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d077      	beq.n	8005298 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	005a      	lsls	r2, r3, #1
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	441a      	add	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b0f      	cmp	r3, #15
 80051c2:	d916      	bls.n	80051f2 <UART_SetConfig+0x392>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ca:	d212      	bcs.n	80051f2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f023 030f 	bic.w	r3, r3, #15
 80051d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	085b      	lsrs	r3, r3, #1
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	8afb      	ldrh	r3, [r7, #22]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	8afa      	ldrh	r2, [r7, #22]
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	e052      	b.n	8005298 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051f8:	e04e      	b.n	8005298 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d827      	bhi.n	8005252 <UART_SetConfig+0x3f2>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <UART_SetConfig+0x3a8>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	0800522d 	.word	0x0800522d
 800520c:	08005235 	.word	0x08005235
 8005210:	0800523d 	.word	0x0800523d
 8005214:	08005253 	.word	0x08005253
 8005218:	08005243 	.word	0x08005243
 800521c:	08005253 	.word	0x08005253
 8005220:	08005253 	.word	0x08005253
 8005224:	08005253 	.word	0x08005253
 8005228:	0800524b 	.word	0x0800524b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800522c:	f7fe fa36 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8005230:	61f8      	str	r0, [r7, #28]
        break;
 8005232:	e014      	b.n	800525e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005234:	f7fe fa48 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8005238:	61f8      	str	r0, [r7, #28]
        break;
 800523a:	e010      	b.n	800525e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800523c:	4b1d      	ldr	r3, [pc, #116]	; (80052b4 <UART_SetConfig+0x454>)
 800523e:	61fb      	str	r3, [r7, #28]
        break;
 8005240:	e00d      	b.n	800525e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005242:	f7fe f993 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8005246:	61f8      	str	r0, [r7, #28]
        break;
 8005248:	e009      	b.n	800525e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800524a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800524e:	61fb      	str	r3, [r7, #28]
        break;
 8005250:	e005      	b.n	800525e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800525c:	bf00      	nop
    }

    if (pclk != 0U)
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d019      	beq.n	8005298 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	085a      	lsrs	r2, r3, #1
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	441a      	add	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	fbb2 f3f3 	udiv	r3, r2, r3
 8005276:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b0f      	cmp	r3, #15
 800527c:	d909      	bls.n	8005292 <UART_SetConfig+0x432>
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005284:	d205      	bcs.n	8005292 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60da      	str	r2, [r3, #12]
 8005290:	e002      	b.n	8005298 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3728      	adds	r7, #40	; 0x28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b2:	bf00      	nop
 80052b4:	00f42400 	.word	0x00f42400

080052b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01a      	beq.n	80053ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b6:	d10a      	bne.n	80053ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]
  }
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af02      	add	r7, sp, #8
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800540c:	f7fc fb16 	bl	8001a3c <HAL_GetTick>
 8005410:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b08      	cmp	r3, #8
 800541e:	d10e      	bne.n	800543e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f82d 	bl	800548e <UART_WaitOnFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e023      	b.n	8005486 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b04      	cmp	r3, #4
 800544a:	d10e      	bne.n	800546a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800544c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f817 	bl	800548e <UART_WaitOnFlagUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e00d      	b.n	8005486 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b09c      	sub	sp, #112	; 0x70
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	603b      	str	r3, [r7, #0]
 800549a:	4613      	mov	r3, r2
 800549c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800549e:	e0a5      	b.n	80055ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	f000 80a1 	beq.w	80055ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054aa:	f7fc fac7 	bl	8001a3c <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d302      	bcc.n	80054c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80054ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d13e      	bne.n	800553e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054d4:	667b      	str	r3, [r7, #100]	; 0x64
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054e6:	e841 2300 	strex	r3, r2, [r1]
 80054ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e6      	bne.n	80054c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3308      	adds	r3, #8
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	663b      	str	r3, [r7, #96]	; 0x60
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3308      	adds	r3, #8
 8005510:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005512:	64ba      	str	r2, [r7, #72]	; 0x48
 8005514:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e5      	bne.n	80054f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e067      	b.n	800560e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d04f      	beq.n	80055ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555a:	d147      	bne.n	80055ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005564:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800557a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
 8005586:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800558a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e6      	bne.n	8005566 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3308      	adds	r3, #8
 800559e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	613b      	str	r3, [r7, #16]
   return(result);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3308      	adds	r3, #8
 80055b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055b8:	623a      	str	r2, [r7, #32]
 80055ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	69f9      	ldr	r1, [r7, #28]
 80055be:	6a3a      	ldr	r2, [r7, #32]
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e5      	bne.n	8005598 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2220      	movs	r2, #32
 80055d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e010      	b.n	800560e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4013      	ands	r3, r2
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	bf0c      	ite	eq
 80055fc:	2301      	moveq	r3, #1
 80055fe:	2300      	movne	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	79fb      	ldrb	r3, [r7, #7]
 8005606:	429a      	cmp	r2, r3
 8005608:	f43f af4a 	beq.w	80054a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3770      	adds	r7, #112	; 0x70
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <ceil>:
 8005618:	ec51 0b10 	vmov	r0, r1, d0
 800561c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005620:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005624:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005628:	2e13      	cmp	r6, #19
 800562a:	ee10 5a10 	vmov	r5, s0
 800562e:	ee10 8a10 	vmov	r8, s0
 8005632:	460c      	mov	r4, r1
 8005634:	dc30      	bgt.n	8005698 <ceil+0x80>
 8005636:	2e00      	cmp	r6, #0
 8005638:	da12      	bge.n	8005660 <ceil+0x48>
 800563a:	a335      	add	r3, pc, #212	; (adr r3, 8005710 <ceil+0xf8>)
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f7fa fe1c 	bl	800027c <__adddf3>
 8005644:	2200      	movs	r2, #0
 8005646:	2300      	movs	r3, #0
 8005648:	f7fb f84c 	bl	80006e4 <__aeabi_dcmpgt>
 800564c:	b128      	cbz	r0, 800565a <ceil+0x42>
 800564e:	2c00      	cmp	r4, #0
 8005650:	db55      	blt.n	80056fe <ceil+0xe6>
 8005652:	432c      	orrs	r4, r5
 8005654:	d057      	beq.n	8005706 <ceil+0xee>
 8005656:	4c30      	ldr	r4, [pc, #192]	; (8005718 <ceil+0x100>)
 8005658:	2500      	movs	r5, #0
 800565a:	4621      	mov	r1, r4
 800565c:	4628      	mov	r0, r5
 800565e:	e025      	b.n	80056ac <ceil+0x94>
 8005660:	4f2e      	ldr	r7, [pc, #184]	; (800571c <ceil+0x104>)
 8005662:	4137      	asrs	r7, r6
 8005664:	ea01 0307 	and.w	r3, r1, r7
 8005668:	4303      	orrs	r3, r0
 800566a:	d01f      	beq.n	80056ac <ceil+0x94>
 800566c:	a328      	add	r3, pc, #160	; (adr r3, 8005710 <ceil+0xf8>)
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	f7fa fe03 	bl	800027c <__adddf3>
 8005676:	2200      	movs	r2, #0
 8005678:	2300      	movs	r3, #0
 800567a:	f7fb f833 	bl	80006e4 <__aeabi_dcmpgt>
 800567e:	2800      	cmp	r0, #0
 8005680:	d0eb      	beq.n	800565a <ceil+0x42>
 8005682:	2c00      	cmp	r4, #0
 8005684:	bfc2      	ittt	gt
 8005686:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800568a:	fa43 f606 	asrgt.w	r6, r3, r6
 800568e:	19a4      	addgt	r4, r4, r6
 8005690:	ea24 0407 	bic.w	r4, r4, r7
 8005694:	2500      	movs	r5, #0
 8005696:	e7e0      	b.n	800565a <ceil+0x42>
 8005698:	2e33      	cmp	r6, #51	; 0x33
 800569a:	dd0b      	ble.n	80056b4 <ceil+0x9c>
 800569c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80056a0:	d104      	bne.n	80056ac <ceil+0x94>
 80056a2:	ee10 2a10 	vmov	r2, s0
 80056a6:	460b      	mov	r3, r1
 80056a8:	f7fa fde8 	bl	800027c <__adddf3>
 80056ac:	ec41 0b10 	vmov	d0, r0, r1
 80056b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80056b8:	f04f 33ff 	mov.w	r3, #4294967295
 80056bc:	fa23 f707 	lsr.w	r7, r3, r7
 80056c0:	4207      	tst	r7, r0
 80056c2:	d0f3      	beq.n	80056ac <ceil+0x94>
 80056c4:	a312      	add	r3, pc, #72	; (adr r3, 8005710 <ceil+0xf8>)
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	f7fa fdd7 	bl	800027c <__adddf3>
 80056ce:	2200      	movs	r2, #0
 80056d0:	2300      	movs	r3, #0
 80056d2:	f7fb f807 	bl	80006e4 <__aeabi_dcmpgt>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d0bf      	beq.n	800565a <ceil+0x42>
 80056da:	2c00      	cmp	r4, #0
 80056dc:	dd02      	ble.n	80056e4 <ceil+0xcc>
 80056de:	2e14      	cmp	r6, #20
 80056e0:	d103      	bne.n	80056ea <ceil+0xd2>
 80056e2:	3401      	adds	r4, #1
 80056e4:	ea25 0507 	bic.w	r5, r5, r7
 80056e8:	e7b7      	b.n	800565a <ceil+0x42>
 80056ea:	2301      	movs	r3, #1
 80056ec:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80056f0:	fa03 f606 	lsl.w	r6, r3, r6
 80056f4:	4435      	add	r5, r6
 80056f6:	4545      	cmp	r5, r8
 80056f8:	bf38      	it	cc
 80056fa:	18e4      	addcc	r4, r4, r3
 80056fc:	e7f2      	b.n	80056e4 <ceil+0xcc>
 80056fe:	2500      	movs	r5, #0
 8005700:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005704:	e7a9      	b.n	800565a <ceil+0x42>
 8005706:	4625      	mov	r5, r4
 8005708:	e7a7      	b.n	800565a <ceil+0x42>
 800570a:	bf00      	nop
 800570c:	f3af 8000 	nop.w
 8005710:	8800759c 	.word	0x8800759c
 8005714:	7e37e43c 	.word	0x7e37e43c
 8005718:	3ff00000 	.word	0x3ff00000
 800571c:	000fffff 	.word	0x000fffff

08005720 <__errno>:
 8005720:	4b01      	ldr	r3, [pc, #4]	; (8005728 <__errno+0x8>)
 8005722:	6818      	ldr	r0, [r3, #0]
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	2000000c 	.word	0x2000000c

0800572c <__libc_init_array>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	4d0d      	ldr	r5, [pc, #52]	; (8005764 <__libc_init_array+0x38>)
 8005730:	4c0d      	ldr	r4, [pc, #52]	; (8005768 <__libc_init_array+0x3c>)
 8005732:	1b64      	subs	r4, r4, r5
 8005734:	10a4      	asrs	r4, r4, #2
 8005736:	2600      	movs	r6, #0
 8005738:	42a6      	cmp	r6, r4
 800573a:	d109      	bne.n	8005750 <__libc_init_array+0x24>
 800573c:	4d0b      	ldr	r5, [pc, #44]	; (800576c <__libc_init_array+0x40>)
 800573e:	4c0c      	ldr	r4, [pc, #48]	; (8005770 <__libc_init_array+0x44>)
 8005740:	f000 fc8e 	bl	8006060 <_init>
 8005744:	1b64      	subs	r4, r4, r5
 8005746:	10a4      	asrs	r4, r4, #2
 8005748:	2600      	movs	r6, #0
 800574a:	42a6      	cmp	r6, r4
 800574c:	d105      	bne.n	800575a <__libc_init_array+0x2e>
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	f855 3b04 	ldr.w	r3, [r5], #4
 8005754:	4798      	blx	r3
 8005756:	3601      	adds	r6, #1
 8005758:	e7ee      	b.n	8005738 <__libc_init_array+0xc>
 800575a:	f855 3b04 	ldr.w	r3, [r5], #4
 800575e:	4798      	blx	r3
 8005760:	3601      	adds	r6, #1
 8005762:	e7f2      	b.n	800574a <__libc_init_array+0x1e>
 8005764:	08006120 	.word	0x08006120
 8005768:	08006120 	.word	0x08006120
 800576c:	08006120 	.word	0x08006120
 8005770:	08006124 	.word	0x08006124

08005774 <memcpy>:
 8005774:	440a      	add	r2, r1
 8005776:	4291      	cmp	r1, r2
 8005778:	f100 33ff 	add.w	r3, r0, #4294967295
 800577c:	d100      	bne.n	8005780 <memcpy+0xc>
 800577e:	4770      	bx	lr
 8005780:	b510      	push	{r4, lr}
 8005782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800578a:	4291      	cmp	r1, r2
 800578c:	d1f9      	bne.n	8005782 <memcpy+0xe>
 800578e:	bd10      	pop	{r4, pc}

08005790 <memset>:
 8005790:	4402      	add	r2, r0
 8005792:	4603      	mov	r3, r0
 8005794:	4293      	cmp	r3, r2
 8005796:	d100      	bne.n	800579a <memset+0xa>
 8005798:	4770      	bx	lr
 800579a:	f803 1b01 	strb.w	r1, [r3], #1
 800579e:	e7f9      	b.n	8005794 <memset+0x4>

080057a0 <siprintf>:
 80057a0:	b40e      	push	{r1, r2, r3}
 80057a2:	b500      	push	{lr}
 80057a4:	b09c      	sub	sp, #112	; 0x70
 80057a6:	ab1d      	add	r3, sp, #116	; 0x74
 80057a8:	9002      	str	r0, [sp, #8]
 80057aa:	9006      	str	r0, [sp, #24]
 80057ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057b0:	4809      	ldr	r0, [pc, #36]	; (80057d8 <siprintf+0x38>)
 80057b2:	9107      	str	r1, [sp, #28]
 80057b4:	9104      	str	r1, [sp, #16]
 80057b6:	4909      	ldr	r1, [pc, #36]	; (80057dc <siprintf+0x3c>)
 80057b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057bc:	9105      	str	r1, [sp, #20]
 80057be:	6800      	ldr	r0, [r0, #0]
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	a902      	add	r1, sp, #8
 80057c4:	f000 f868 	bl	8005898 <_svfiprintf_r>
 80057c8:	9b02      	ldr	r3, [sp, #8]
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	b01c      	add	sp, #112	; 0x70
 80057d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057d4:	b003      	add	sp, #12
 80057d6:	4770      	bx	lr
 80057d8:	2000000c 	.word	0x2000000c
 80057dc:	ffff0208 	.word	0xffff0208

080057e0 <__ssputs_r>:
 80057e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e4:	688e      	ldr	r6, [r1, #8]
 80057e6:	429e      	cmp	r6, r3
 80057e8:	4682      	mov	sl, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	4690      	mov	r8, r2
 80057ee:	461f      	mov	r7, r3
 80057f0:	d838      	bhi.n	8005864 <__ssputs_r+0x84>
 80057f2:	898a      	ldrh	r2, [r1, #12]
 80057f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057f8:	d032      	beq.n	8005860 <__ssputs_r+0x80>
 80057fa:	6825      	ldr	r5, [r4, #0]
 80057fc:	6909      	ldr	r1, [r1, #16]
 80057fe:	eba5 0901 	sub.w	r9, r5, r1
 8005802:	6965      	ldr	r5, [r4, #20]
 8005804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005808:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800580c:	3301      	adds	r3, #1
 800580e:	444b      	add	r3, r9
 8005810:	106d      	asrs	r5, r5, #1
 8005812:	429d      	cmp	r5, r3
 8005814:	bf38      	it	cc
 8005816:	461d      	movcc	r5, r3
 8005818:	0553      	lsls	r3, r2, #21
 800581a:	d531      	bpl.n	8005880 <__ssputs_r+0xa0>
 800581c:	4629      	mov	r1, r5
 800581e:	f000 fb55 	bl	8005ecc <_malloc_r>
 8005822:	4606      	mov	r6, r0
 8005824:	b950      	cbnz	r0, 800583c <__ssputs_r+0x5c>
 8005826:	230c      	movs	r3, #12
 8005828:	f8ca 3000 	str.w	r3, [sl]
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005832:	81a3      	strh	r3, [r4, #12]
 8005834:	f04f 30ff 	mov.w	r0, #4294967295
 8005838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583c:	6921      	ldr	r1, [r4, #16]
 800583e:	464a      	mov	r2, r9
 8005840:	f7ff ff98 	bl	8005774 <memcpy>
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800584a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	6126      	str	r6, [r4, #16]
 8005852:	6165      	str	r5, [r4, #20]
 8005854:	444e      	add	r6, r9
 8005856:	eba5 0509 	sub.w	r5, r5, r9
 800585a:	6026      	str	r6, [r4, #0]
 800585c:	60a5      	str	r5, [r4, #8]
 800585e:	463e      	mov	r6, r7
 8005860:	42be      	cmp	r6, r7
 8005862:	d900      	bls.n	8005866 <__ssputs_r+0x86>
 8005864:	463e      	mov	r6, r7
 8005866:	6820      	ldr	r0, [r4, #0]
 8005868:	4632      	mov	r2, r6
 800586a:	4641      	mov	r1, r8
 800586c:	f000 faa8 	bl	8005dc0 <memmove>
 8005870:	68a3      	ldr	r3, [r4, #8]
 8005872:	1b9b      	subs	r3, r3, r6
 8005874:	60a3      	str	r3, [r4, #8]
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	4433      	add	r3, r6
 800587a:	6023      	str	r3, [r4, #0]
 800587c:	2000      	movs	r0, #0
 800587e:	e7db      	b.n	8005838 <__ssputs_r+0x58>
 8005880:	462a      	mov	r2, r5
 8005882:	f000 fb97 	bl	8005fb4 <_realloc_r>
 8005886:	4606      	mov	r6, r0
 8005888:	2800      	cmp	r0, #0
 800588a:	d1e1      	bne.n	8005850 <__ssputs_r+0x70>
 800588c:	6921      	ldr	r1, [r4, #16]
 800588e:	4650      	mov	r0, sl
 8005890:	f000 fab0 	bl	8005df4 <_free_r>
 8005894:	e7c7      	b.n	8005826 <__ssputs_r+0x46>
	...

08005898 <_svfiprintf_r>:
 8005898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	4698      	mov	r8, r3
 800589e:	898b      	ldrh	r3, [r1, #12]
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	b09d      	sub	sp, #116	; 0x74
 80058a4:	4607      	mov	r7, r0
 80058a6:	460d      	mov	r5, r1
 80058a8:	4614      	mov	r4, r2
 80058aa:	d50e      	bpl.n	80058ca <_svfiprintf_r+0x32>
 80058ac:	690b      	ldr	r3, [r1, #16]
 80058ae:	b963      	cbnz	r3, 80058ca <_svfiprintf_r+0x32>
 80058b0:	2140      	movs	r1, #64	; 0x40
 80058b2:	f000 fb0b 	bl	8005ecc <_malloc_r>
 80058b6:	6028      	str	r0, [r5, #0]
 80058b8:	6128      	str	r0, [r5, #16]
 80058ba:	b920      	cbnz	r0, 80058c6 <_svfiprintf_r+0x2e>
 80058bc:	230c      	movs	r3, #12
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	e0d1      	b.n	8005a6a <_svfiprintf_r+0x1d2>
 80058c6:	2340      	movs	r3, #64	; 0x40
 80058c8:	616b      	str	r3, [r5, #20]
 80058ca:	2300      	movs	r3, #0
 80058cc:	9309      	str	r3, [sp, #36]	; 0x24
 80058ce:	2320      	movs	r3, #32
 80058d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80058d8:	2330      	movs	r3, #48	; 0x30
 80058da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a84 <_svfiprintf_r+0x1ec>
 80058de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e2:	f04f 0901 	mov.w	r9, #1
 80058e6:	4623      	mov	r3, r4
 80058e8:	469a      	mov	sl, r3
 80058ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ee:	b10a      	cbz	r2, 80058f4 <_svfiprintf_r+0x5c>
 80058f0:	2a25      	cmp	r2, #37	; 0x25
 80058f2:	d1f9      	bne.n	80058e8 <_svfiprintf_r+0x50>
 80058f4:	ebba 0b04 	subs.w	fp, sl, r4
 80058f8:	d00b      	beq.n	8005912 <_svfiprintf_r+0x7a>
 80058fa:	465b      	mov	r3, fp
 80058fc:	4622      	mov	r2, r4
 80058fe:	4629      	mov	r1, r5
 8005900:	4638      	mov	r0, r7
 8005902:	f7ff ff6d 	bl	80057e0 <__ssputs_r>
 8005906:	3001      	adds	r0, #1
 8005908:	f000 80aa 	beq.w	8005a60 <_svfiprintf_r+0x1c8>
 800590c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800590e:	445a      	add	r2, fp
 8005910:	9209      	str	r2, [sp, #36]	; 0x24
 8005912:	f89a 3000 	ldrb.w	r3, [sl]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 80a2 	beq.w	8005a60 <_svfiprintf_r+0x1c8>
 800591c:	2300      	movs	r3, #0
 800591e:	f04f 32ff 	mov.w	r2, #4294967295
 8005922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005926:	f10a 0a01 	add.w	sl, sl, #1
 800592a:	9304      	str	r3, [sp, #16]
 800592c:	9307      	str	r3, [sp, #28]
 800592e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005932:	931a      	str	r3, [sp, #104]	; 0x68
 8005934:	4654      	mov	r4, sl
 8005936:	2205      	movs	r2, #5
 8005938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800593c:	4851      	ldr	r0, [pc, #324]	; (8005a84 <_svfiprintf_r+0x1ec>)
 800593e:	f7fa fc47 	bl	80001d0 <memchr>
 8005942:	9a04      	ldr	r2, [sp, #16]
 8005944:	b9d8      	cbnz	r0, 800597e <_svfiprintf_r+0xe6>
 8005946:	06d0      	lsls	r0, r2, #27
 8005948:	bf44      	itt	mi
 800594a:	2320      	movmi	r3, #32
 800594c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005950:	0711      	lsls	r1, r2, #28
 8005952:	bf44      	itt	mi
 8005954:	232b      	movmi	r3, #43	; 0x2b
 8005956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800595a:	f89a 3000 	ldrb.w	r3, [sl]
 800595e:	2b2a      	cmp	r3, #42	; 0x2a
 8005960:	d015      	beq.n	800598e <_svfiprintf_r+0xf6>
 8005962:	9a07      	ldr	r2, [sp, #28]
 8005964:	4654      	mov	r4, sl
 8005966:	2000      	movs	r0, #0
 8005968:	f04f 0c0a 	mov.w	ip, #10
 800596c:	4621      	mov	r1, r4
 800596e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005972:	3b30      	subs	r3, #48	; 0x30
 8005974:	2b09      	cmp	r3, #9
 8005976:	d94e      	bls.n	8005a16 <_svfiprintf_r+0x17e>
 8005978:	b1b0      	cbz	r0, 80059a8 <_svfiprintf_r+0x110>
 800597a:	9207      	str	r2, [sp, #28]
 800597c:	e014      	b.n	80059a8 <_svfiprintf_r+0x110>
 800597e:	eba0 0308 	sub.w	r3, r0, r8
 8005982:	fa09 f303 	lsl.w	r3, r9, r3
 8005986:	4313      	orrs	r3, r2
 8005988:	9304      	str	r3, [sp, #16]
 800598a:	46a2      	mov	sl, r4
 800598c:	e7d2      	b.n	8005934 <_svfiprintf_r+0x9c>
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	1d19      	adds	r1, r3, #4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	9103      	str	r1, [sp, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	bfbb      	ittet	lt
 800599a:	425b      	neglt	r3, r3
 800599c:	f042 0202 	orrlt.w	r2, r2, #2
 80059a0:	9307      	strge	r3, [sp, #28]
 80059a2:	9307      	strlt	r3, [sp, #28]
 80059a4:	bfb8      	it	lt
 80059a6:	9204      	strlt	r2, [sp, #16]
 80059a8:	7823      	ldrb	r3, [r4, #0]
 80059aa:	2b2e      	cmp	r3, #46	; 0x2e
 80059ac:	d10c      	bne.n	80059c8 <_svfiprintf_r+0x130>
 80059ae:	7863      	ldrb	r3, [r4, #1]
 80059b0:	2b2a      	cmp	r3, #42	; 0x2a
 80059b2:	d135      	bne.n	8005a20 <_svfiprintf_r+0x188>
 80059b4:	9b03      	ldr	r3, [sp, #12]
 80059b6:	1d1a      	adds	r2, r3, #4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	9203      	str	r2, [sp, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bfb8      	it	lt
 80059c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80059c4:	3402      	adds	r4, #2
 80059c6:	9305      	str	r3, [sp, #20]
 80059c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a94 <_svfiprintf_r+0x1fc>
 80059cc:	7821      	ldrb	r1, [r4, #0]
 80059ce:	2203      	movs	r2, #3
 80059d0:	4650      	mov	r0, sl
 80059d2:	f7fa fbfd 	bl	80001d0 <memchr>
 80059d6:	b140      	cbz	r0, 80059ea <_svfiprintf_r+0x152>
 80059d8:	2340      	movs	r3, #64	; 0x40
 80059da:	eba0 000a 	sub.w	r0, r0, sl
 80059de:	fa03 f000 	lsl.w	r0, r3, r0
 80059e2:	9b04      	ldr	r3, [sp, #16]
 80059e4:	4303      	orrs	r3, r0
 80059e6:	3401      	adds	r4, #1
 80059e8:	9304      	str	r3, [sp, #16]
 80059ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ee:	4826      	ldr	r0, [pc, #152]	; (8005a88 <_svfiprintf_r+0x1f0>)
 80059f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059f4:	2206      	movs	r2, #6
 80059f6:	f7fa fbeb 	bl	80001d0 <memchr>
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d038      	beq.n	8005a70 <_svfiprintf_r+0x1d8>
 80059fe:	4b23      	ldr	r3, [pc, #140]	; (8005a8c <_svfiprintf_r+0x1f4>)
 8005a00:	bb1b      	cbnz	r3, 8005a4a <_svfiprintf_r+0x1b2>
 8005a02:	9b03      	ldr	r3, [sp, #12]
 8005a04:	3307      	adds	r3, #7
 8005a06:	f023 0307 	bic.w	r3, r3, #7
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	9303      	str	r3, [sp, #12]
 8005a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a10:	4433      	add	r3, r6
 8005a12:	9309      	str	r3, [sp, #36]	; 0x24
 8005a14:	e767      	b.n	80058e6 <_svfiprintf_r+0x4e>
 8005a16:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a1a:	460c      	mov	r4, r1
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	e7a5      	b.n	800596c <_svfiprintf_r+0xd4>
 8005a20:	2300      	movs	r3, #0
 8005a22:	3401      	adds	r4, #1
 8005a24:	9305      	str	r3, [sp, #20]
 8005a26:	4619      	mov	r1, r3
 8005a28:	f04f 0c0a 	mov.w	ip, #10
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a32:	3a30      	subs	r2, #48	; 0x30
 8005a34:	2a09      	cmp	r2, #9
 8005a36:	d903      	bls.n	8005a40 <_svfiprintf_r+0x1a8>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0c5      	beq.n	80059c8 <_svfiprintf_r+0x130>
 8005a3c:	9105      	str	r1, [sp, #20]
 8005a3e:	e7c3      	b.n	80059c8 <_svfiprintf_r+0x130>
 8005a40:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a44:	4604      	mov	r4, r0
 8005a46:	2301      	movs	r3, #1
 8005a48:	e7f0      	b.n	8005a2c <_svfiprintf_r+0x194>
 8005a4a:	ab03      	add	r3, sp, #12
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	462a      	mov	r2, r5
 8005a50:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <_svfiprintf_r+0x1f8>)
 8005a52:	a904      	add	r1, sp, #16
 8005a54:	4638      	mov	r0, r7
 8005a56:	f3af 8000 	nop.w
 8005a5a:	1c42      	adds	r2, r0, #1
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	d1d6      	bne.n	8005a0e <_svfiprintf_r+0x176>
 8005a60:	89ab      	ldrh	r3, [r5, #12]
 8005a62:	065b      	lsls	r3, r3, #25
 8005a64:	f53f af2c 	bmi.w	80058c0 <_svfiprintf_r+0x28>
 8005a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a6a:	b01d      	add	sp, #116	; 0x74
 8005a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a70:	ab03      	add	r3, sp, #12
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	462a      	mov	r2, r5
 8005a76:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <_svfiprintf_r+0x1f8>)
 8005a78:	a904      	add	r1, sp, #16
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	f000 f87a 	bl	8005b74 <_printf_i>
 8005a80:	e7eb      	b.n	8005a5a <_svfiprintf_r+0x1c2>
 8005a82:	bf00      	nop
 8005a84:	080060e4 	.word	0x080060e4
 8005a88:	080060ee 	.word	0x080060ee
 8005a8c:	00000000 	.word	0x00000000
 8005a90:	080057e1 	.word	0x080057e1
 8005a94:	080060ea 	.word	0x080060ea

08005a98 <_printf_common>:
 8005a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9c:	4616      	mov	r6, r2
 8005a9e:	4699      	mov	r9, r3
 8005aa0:	688a      	ldr	r2, [r1, #8]
 8005aa2:	690b      	ldr	r3, [r1, #16]
 8005aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	bfb8      	it	lt
 8005aac:	4613      	movlt	r3, r2
 8005aae:	6033      	str	r3, [r6, #0]
 8005ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	b10a      	cbz	r2, 8005abe <_printf_common+0x26>
 8005aba:	3301      	adds	r3, #1
 8005abc:	6033      	str	r3, [r6, #0]
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	0699      	lsls	r1, r3, #26
 8005ac2:	bf42      	ittt	mi
 8005ac4:	6833      	ldrmi	r3, [r6, #0]
 8005ac6:	3302      	addmi	r3, #2
 8005ac8:	6033      	strmi	r3, [r6, #0]
 8005aca:	6825      	ldr	r5, [r4, #0]
 8005acc:	f015 0506 	ands.w	r5, r5, #6
 8005ad0:	d106      	bne.n	8005ae0 <_printf_common+0x48>
 8005ad2:	f104 0a19 	add.w	sl, r4, #25
 8005ad6:	68e3      	ldr	r3, [r4, #12]
 8005ad8:	6832      	ldr	r2, [r6, #0]
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	42ab      	cmp	r3, r5
 8005ade:	dc26      	bgt.n	8005b2e <_printf_common+0x96>
 8005ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ae4:	1e13      	subs	r3, r2, #0
 8005ae6:	6822      	ldr	r2, [r4, #0]
 8005ae8:	bf18      	it	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	0692      	lsls	r2, r2, #26
 8005aee:	d42b      	bmi.n	8005b48 <_printf_common+0xb0>
 8005af0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005af4:	4649      	mov	r1, r9
 8005af6:	4638      	mov	r0, r7
 8005af8:	47c0      	blx	r8
 8005afa:	3001      	adds	r0, #1
 8005afc:	d01e      	beq.n	8005b3c <_printf_common+0xa4>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	68e5      	ldr	r5, [r4, #12]
 8005b02:	6832      	ldr	r2, [r6, #0]
 8005b04:	f003 0306 	and.w	r3, r3, #6
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	bf08      	it	eq
 8005b0c:	1aad      	subeq	r5, r5, r2
 8005b0e:	68a3      	ldr	r3, [r4, #8]
 8005b10:	6922      	ldr	r2, [r4, #16]
 8005b12:	bf0c      	ite	eq
 8005b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b18:	2500      	movne	r5, #0
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	bfc4      	itt	gt
 8005b1e:	1a9b      	subgt	r3, r3, r2
 8005b20:	18ed      	addgt	r5, r5, r3
 8005b22:	2600      	movs	r6, #0
 8005b24:	341a      	adds	r4, #26
 8005b26:	42b5      	cmp	r5, r6
 8005b28:	d11a      	bne.n	8005b60 <_printf_common+0xc8>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	e008      	b.n	8005b40 <_printf_common+0xa8>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	4652      	mov	r2, sl
 8005b32:	4649      	mov	r1, r9
 8005b34:	4638      	mov	r0, r7
 8005b36:	47c0      	blx	r8
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d103      	bne.n	8005b44 <_printf_common+0xac>
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b44:	3501      	adds	r5, #1
 8005b46:	e7c6      	b.n	8005ad6 <_printf_common+0x3e>
 8005b48:	18e1      	adds	r1, r4, r3
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	2030      	movs	r0, #48	; 0x30
 8005b4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b52:	4422      	add	r2, r4
 8005b54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b5c:	3302      	adds	r3, #2
 8005b5e:	e7c7      	b.n	8005af0 <_printf_common+0x58>
 8005b60:	2301      	movs	r3, #1
 8005b62:	4622      	mov	r2, r4
 8005b64:	4649      	mov	r1, r9
 8005b66:	4638      	mov	r0, r7
 8005b68:	47c0      	blx	r8
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d0e6      	beq.n	8005b3c <_printf_common+0xa4>
 8005b6e:	3601      	adds	r6, #1
 8005b70:	e7d9      	b.n	8005b26 <_printf_common+0x8e>
	...

08005b74 <_printf_i>:
 8005b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b78:	7e0f      	ldrb	r7, [r1, #24]
 8005b7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b7c:	2f78      	cmp	r7, #120	; 0x78
 8005b7e:	4691      	mov	r9, r2
 8005b80:	4680      	mov	r8, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	469a      	mov	sl, r3
 8005b86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b8a:	d807      	bhi.n	8005b9c <_printf_i+0x28>
 8005b8c:	2f62      	cmp	r7, #98	; 0x62
 8005b8e:	d80a      	bhi.n	8005ba6 <_printf_i+0x32>
 8005b90:	2f00      	cmp	r7, #0
 8005b92:	f000 80d8 	beq.w	8005d46 <_printf_i+0x1d2>
 8005b96:	2f58      	cmp	r7, #88	; 0x58
 8005b98:	f000 80a3 	beq.w	8005ce2 <_printf_i+0x16e>
 8005b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ba4:	e03a      	b.n	8005c1c <_printf_i+0xa8>
 8005ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005baa:	2b15      	cmp	r3, #21
 8005bac:	d8f6      	bhi.n	8005b9c <_printf_i+0x28>
 8005bae:	a101      	add	r1, pc, #4	; (adr r1, 8005bb4 <_printf_i+0x40>)
 8005bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb4:	08005c0d 	.word	0x08005c0d
 8005bb8:	08005c21 	.word	0x08005c21
 8005bbc:	08005b9d 	.word	0x08005b9d
 8005bc0:	08005b9d 	.word	0x08005b9d
 8005bc4:	08005b9d 	.word	0x08005b9d
 8005bc8:	08005b9d 	.word	0x08005b9d
 8005bcc:	08005c21 	.word	0x08005c21
 8005bd0:	08005b9d 	.word	0x08005b9d
 8005bd4:	08005b9d 	.word	0x08005b9d
 8005bd8:	08005b9d 	.word	0x08005b9d
 8005bdc:	08005b9d 	.word	0x08005b9d
 8005be0:	08005d2d 	.word	0x08005d2d
 8005be4:	08005c51 	.word	0x08005c51
 8005be8:	08005d0f 	.word	0x08005d0f
 8005bec:	08005b9d 	.word	0x08005b9d
 8005bf0:	08005b9d 	.word	0x08005b9d
 8005bf4:	08005d4f 	.word	0x08005d4f
 8005bf8:	08005b9d 	.word	0x08005b9d
 8005bfc:	08005c51 	.word	0x08005c51
 8005c00:	08005b9d 	.word	0x08005b9d
 8005c04:	08005b9d 	.word	0x08005b9d
 8005c08:	08005d17 	.word	0x08005d17
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	1d1a      	adds	r2, r3, #4
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	602a      	str	r2, [r5, #0]
 8005c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0a3      	b.n	8005d68 <_printf_i+0x1f4>
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	6829      	ldr	r1, [r5, #0]
 8005c24:	0606      	lsls	r6, r0, #24
 8005c26:	f101 0304 	add.w	r3, r1, #4
 8005c2a:	d50a      	bpl.n	8005c42 <_printf_i+0xce>
 8005c2c:	680e      	ldr	r6, [r1, #0]
 8005c2e:	602b      	str	r3, [r5, #0]
 8005c30:	2e00      	cmp	r6, #0
 8005c32:	da03      	bge.n	8005c3c <_printf_i+0xc8>
 8005c34:	232d      	movs	r3, #45	; 0x2d
 8005c36:	4276      	negs	r6, r6
 8005c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c3c:	485e      	ldr	r0, [pc, #376]	; (8005db8 <_printf_i+0x244>)
 8005c3e:	230a      	movs	r3, #10
 8005c40:	e019      	b.n	8005c76 <_printf_i+0x102>
 8005c42:	680e      	ldr	r6, [r1, #0]
 8005c44:	602b      	str	r3, [r5, #0]
 8005c46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c4a:	bf18      	it	ne
 8005c4c:	b236      	sxthne	r6, r6
 8005c4e:	e7ef      	b.n	8005c30 <_printf_i+0xbc>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	6820      	ldr	r0, [r4, #0]
 8005c54:	1d19      	adds	r1, r3, #4
 8005c56:	6029      	str	r1, [r5, #0]
 8005c58:	0601      	lsls	r1, r0, #24
 8005c5a:	d501      	bpl.n	8005c60 <_printf_i+0xec>
 8005c5c:	681e      	ldr	r6, [r3, #0]
 8005c5e:	e002      	b.n	8005c66 <_printf_i+0xf2>
 8005c60:	0646      	lsls	r6, r0, #25
 8005c62:	d5fb      	bpl.n	8005c5c <_printf_i+0xe8>
 8005c64:	881e      	ldrh	r6, [r3, #0]
 8005c66:	4854      	ldr	r0, [pc, #336]	; (8005db8 <_printf_i+0x244>)
 8005c68:	2f6f      	cmp	r7, #111	; 0x6f
 8005c6a:	bf0c      	ite	eq
 8005c6c:	2308      	moveq	r3, #8
 8005c6e:	230a      	movne	r3, #10
 8005c70:	2100      	movs	r1, #0
 8005c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c76:	6865      	ldr	r5, [r4, #4]
 8005c78:	60a5      	str	r5, [r4, #8]
 8005c7a:	2d00      	cmp	r5, #0
 8005c7c:	bfa2      	ittt	ge
 8005c7e:	6821      	ldrge	r1, [r4, #0]
 8005c80:	f021 0104 	bicge.w	r1, r1, #4
 8005c84:	6021      	strge	r1, [r4, #0]
 8005c86:	b90e      	cbnz	r6, 8005c8c <_printf_i+0x118>
 8005c88:	2d00      	cmp	r5, #0
 8005c8a:	d04d      	beq.n	8005d28 <_printf_i+0x1b4>
 8005c8c:	4615      	mov	r5, r2
 8005c8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c92:	fb03 6711 	mls	r7, r3, r1, r6
 8005c96:	5dc7      	ldrb	r7, [r0, r7]
 8005c98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c9c:	4637      	mov	r7, r6
 8005c9e:	42bb      	cmp	r3, r7
 8005ca0:	460e      	mov	r6, r1
 8005ca2:	d9f4      	bls.n	8005c8e <_printf_i+0x11a>
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d10b      	bne.n	8005cc0 <_printf_i+0x14c>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	07de      	lsls	r6, r3, #31
 8005cac:	d508      	bpl.n	8005cc0 <_printf_i+0x14c>
 8005cae:	6923      	ldr	r3, [r4, #16]
 8005cb0:	6861      	ldr	r1, [r4, #4]
 8005cb2:	4299      	cmp	r1, r3
 8005cb4:	bfde      	ittt	le
 8005cb6:	2330      	movle	r3, #48	; 0x30
 8005cb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cc0:	1b52      	subs	r2, r2, r5
 8005cc2:	6122      	str	r2, [r4, #16]
 8005cc4:	f8cd a000 	str.w	sl, [sp]
 8005cc8:	464b      	mov	r3, r9
 8005cca:	aa03      	add	r2, sp, #12
 8005ccc:	4621      	mov	r1, r4
 8005cce:	4640      	mov	r0, r8
 8005cd0:	f7ff fee2 	bl	8005a98 <_printf_common>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d14c      	bne.n	8005d72 <_printf_i+0x1fe>
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	b004      	add	sp, #16
 8005cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce2:	4835      	ldr	r0, [pc, #212]	; (8005db8 <_printf_i+0x244>)
 8005ce4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ce8:	6829      	ldr	r1, [r5, #0]
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cf0:	6029      	str	r1, [r5, #0]
 8005cf2:	061d      	lsls	r5, r3, #24
 8005cf4:	d514      	bpl.n	8005d20 <_printf_i+0x1ac>
 8005cf6:	07df      	lsls	r7, r3, #31
 8005cf8:	bf44      	itt	mi
 8005cfa:	f043 0320 	orrmi.w	r3, r3, #32
 8005cfe:	6023      	strmi	r3, [r4, #0]
 8005d00:	b91e      	cbnz	r6, 8005d0a <_printf_i+0x196>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	f023 0320 	bic.w	r3, r3, #32
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	2310      	movs	r3, #16
 8005d0c:	e7b0      	b.n	8005c70 <_printf_i+0xfc>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	f043 0320 	orr.w	r3, r3, #32
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	2378      	movs	r3, #120	; 0x78
 8005d18:	4828      	ldr	r0, [pc, #160]	; (8005dbc <_printf_i+0x248>)
 8005d1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d1e:	e7e3      	b.n	8005ce8 <_printf_i+0x174>
 8005d20:	0659      	lsls	r1, r3, #25
 8005d22:	bf48      	it	mi
 8005d24:	b2b6      	uxthmi	r6, r6
 8005d26:	e7e6      	b.n	8005cf6 <_printf_i+0x182>
 8005d28:	4615      	mov	r5, r2
 8005d2a:	e7bb      	b.n	8005ca4 <_printf_i+0x130>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	6826      	ldr	r6, [r4, #0]
 8005d30:	6961      	ldr	r1, [r4, #20]
 8005d32:	1d18      	adds	r0, r3, #4
 8005d34:	6028      	str	r0, [r5, #0]
 8005d36:	0635      	lsls	r5, r6, #24
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	d501      	bpl.n	8005d40 <_printf_i+0x1cc>
 8005d3c:	6019      	str	r1, [r3, #0]
 8005d3e:	e002      	b.n	8005d46 <_printf_i+0x1d2>
 8005d40:	0670      	lsls	r0, r6, #25
 8005d42:	d5fb      	bpl.n	8005d3c <_printf_i+0x1c8>
 8005d44:	8019      	strh	r1, [r3, #0]
 8005d46:	2300      	movs	r3, #0
 8005d48:	6123      	str	r3, [r4, #16]
 8005d4a:	4615      	mov	r5, r2
 8005d4c:	e7ba      	b.n	8005cc4 <_printf_i+0x150>
 8005d4e:	682b      	ldr	r3, [r5, #0]
 8005d50:	1d1a      	adds	r2, r3, #4
 8005d52:	602a      	str	r2, [r5, #0]
 8005d54:	681d      	ldr	r5, [r3, #0]
 8005d56:	6862      	ldr	r2, [r4, #4]
 8005d58:	2100      	movs	r1, #0
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f7fa fa38 	bl	80001d0 <memchr>
 8005d60:	b108      	cbz	r0, 8005d66 <_printf_i+0x1f2>
 8005d62:	1b40      	subs	r0, r0, r5
 8005d64:	6060      	str	r0, [r4, #4]
 8005d66:	6863      	ldr	r3, [r4, #4]
 8005d68:	6123      	str	r3, [r4, #16]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d70:	e7a8      	b.n	8005cc4 <_printf_i+0x150>
 8005d72:	6923      	ldr	r3, [r4, #16]
 8005d74:	462a      	mov	r2, r5
 8005d76:	4649      	mov	r1, r9
 8005d78:	4640      	mov	r0, r8
 8005d7a:	47d0      	blx	sl
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d0ab      	beq.n	8005cd8 <_printf_i+0x164>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	079b      	lsls	r3, r3, #30
 8005d84:	d413      	bmi.n	8005dae <_printf_i+0x23a>
 8005d86:	68e0      	ldr	r0, [r4, #12]
 8005d88:	9b03      	ldr	r3, [sp, #12]
 8005d8a:	4298      	cmp	r0, r3
 8005d8c:	bfb8      	it	lt
 8005d8e:	4618      	movlt	r0, r3
 8005d90:	e7a4      	b.n	8005cdc <_printf_i+0x168>
 8005d92:	2301      	movs	r3, #1
 8005d94:	4632      	mov	r2, r6
 8005d96:	4649      	mov	r1, r9
 8005d98:	4640      	mov	r0, r8
 8005d9a:	47d0      	blx	sl
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d09b      	beq.n	8005cd8 <_printf_i+0x164>
 8005da0:	3501      	adds	r5, #1
 8005da2:	68e3      	ldr	r3, [r4, #12]
 8005da4:	9903      	ldr	r1, [sp, #12]
 8005da6:	1a5b      	subs	r3, r3, r1
 8005da8:	42ab      	cmp	r3, r5
 8005daa:	dcf2      	bgt.n	8005d92 <_printf_i+0x21e>
 8005dac:	e7eb      	b.n	8005d86 <_printf_i+0x212>
 8005dae:	2500      	movs	r5, #0
 8005db0:	f104 0619 	add.w	r6, r4, #25
 8005db4:	e7f5      	b.n	8005da2 <_printf_i+0x22e>
 8005db6:	bf00      	nop
 8005db8:	080060f5 	.word	0x080060f5
 8005dbc:	08006106 	.word	0x08006106

08005dc0 <memmove>:
 8005dc0:	4288      	cmp	r0, r1
 8005dc2:	b510      	push	{r4, lr}
 8005dc4:	eb01 0402 	add.w	r4, r1, r2
 8005dc8:	d902      	bls.n	8005dd0 <memmove+0x10>
 8005dca:	4284      	cmp	r4, r0
 8005dcc:	4623      	mov	r3, r4
 8005dce:	d807      	bhi.n	8005de0 <memmove+0x20>
 8005dd0:	1e43      	subs	r3, r0, #1
 8005dd2:	42a1      	cmp	r1, r4
 8005dd4:	d008      	beq.n	8005de8 <memmove+0x28>
 8005dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dde:	e7f8      	b.n	8005dd2 <memmove+0x12>
 8005de0:	4402      	add	r2, r0
 8005de2:	4601      	mov	r1, r0
 8005de4:	428a      	cmp	r2, r1
 8005de6:	d100      	bne.n	8005dea <memmove+0x2a>
 8005de8:	bd10      	pop	{r4, pc}
 8005dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005df2:	e7f7      	b.n	8005de4 <memmove+0x24>

08005df4 <_free_r>:
 8005df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005df6:	2900      	cmp	r1, #0
 8005df8:	d044      	beq.n	8005e84 <_free_r+0x90>
 8005dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dfe:	9001      	str	r0, [sp, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f1a1 0404 	sub.w	r4, r1, #4
 8005e06:	bfb8      	it	lt
 8005e08:	18e4      	addlt	r4, r4, r3
 8005e0a:	f000 f913 	bl	8006034 <__malloc_lock>
 8005e0e:	4a1e      	ldr	r2, [pc, #120]	; (8005e88 <_free_r+0x94>)
 8005e10:	9801      	ldr	r0, [sp, #4]
 8005e12:	6813      	ldr	r3, [r2, #0]
 8005e14:	b933      	cbnz	r3, 8005e24 <_free_r+0x30>
 8005e16:	6063      	str	r3, [r4, #4]
 8005e18:	6014      	str	r4, [r2, #0]
 8005e1a:	b003      	add	sp, #12
 8005e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e20:	f000 b90e 	b.w	8006040 <__malloc_unlock>
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	d908      	bls.n	8005e3a <_free_r+0x46>
 8005e28:	6825      	ldr	r5, [r4, #0]
 8005e2a:	1961      	adds	r1, r4, r5
 8005e2c:	428b      	cmp	r3, r1
 8005e2e:	bf01      	itttt	eq
 8005e30:	6819      	ldreq	r1, [r3, #0]
 8005e32:	685b      	ldreq	r3, [r3, #4]
 8005e34:	1949      	addeq	r1, r1, r5
 8005e36:	6021      	streq	r1, [r4, #0]
 8005e38:	e7ed      	b.n	8005e16 <_free_r+0x22>
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	b10b      	cbz	r3, 8005e44 <_free_r+0x50>
 8005e40:	42a3      	cmp	r3, r4
 8005e42:	d9fa      	bls.n	8005e3a <_free_r+0x46>
 8005e44:	6811      	ldr	r1, [r2, #0]
 8005e46:	1855      	adds	r5, r2, r1
 8005e48:	42a5      	cmp	r5, r4
 8005e4a:	d10b      	bne.n	8005e64 <_free_r+0x70>
 8005e4c:	6824      	ldr	r4, [r4, #0]
 8005e4e:	4421      	add	r1, r4
 8005e50:	1854      	adds	r4, r2, r1
 8005e52:	42a3      	cmp	r3, r4
 8005e54:	6011      	str	r1, [r2, #0]
 8005e56:	d1e0      	bne.n	8005e1a <_free_r+0x26>
 8005e58:	681c      	ldr	r4, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	6053      	str	r3, [r2, #4]
 8005e5e:	4421      	add	r1, r4
 8005e60:	6011      	str	r1, [r2, #0]
 8005e62:	e7da      	b.n	8005e1a <_free_r+0x26>
 8005e64:	d902      	bls.n	8005e6c <_free_r+0x78>
 8005e66:	230c      	movs	r3, #12
 8005e68:	6003      	str	r3, [r0, #0]
 8005e6a:	e7d6      	b.n	8005e1a <_free_r+0x26>
 8005e6c:	6825      	ldr	r5, [r4, #0]
 8005e6e:	1961      	adds	r1, r4, r5
 8005e70:	428b      	cmp	r3, r1
 8005e72:	bf04      	itt	eq
 8005e74:	6819      	ldreq	r1, [r3, #0]
 8005e76:	685b      	ldreq	r3, [r3, #4]
 8005e78:	6063      	str	r3, [r4, #4]
 8005e7a:	bf04      	itt	eq
 8005e7c:	1949      	addeq	r1, r1, r5
 8005e7e:	6021      	streq	r1, [r4, #0]
 8005e80:	6054      	str	r4, [r2, #4]
 8005e82:	e7ca      	b.n	8005e1a <_free_r+0x26>
 8005e84:	b003      	add	sp, #12
 8005e86:	bd30      	pop	{r4, r5, pc}
 8005e88:	2000020c 	.word	0x2000020c

08005e8c <sbrk_aligned>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	4e0e      	ldr	r6, [pc, #56]	; (8005ec8 <sbrk_aligned+0x3c>)
 8005e90:	460c      	mov	r4, r1
 8005e92:	6831      	ldr	r1, [r6, #0]
 8005e94:	4605      	mov	r5, r0
 8005e96:	b911      	cbnz	r1, 8005e9e <sbrk_aligned+0x12>
 8005e98:	f000 f8bc 	bl	8006014 <_sbrk_r>
 8005e9c:	6030      	str	r0, [r6, #0]
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f000 f8b7 	bl	8006014 <_sbrk_r>
 8005ea6:	1c43      	adds	r3, r0, #1
 8005ea8:	d00a      	beq.n	8005ec0 <sbrk_aligned+0x34>
 8005eaa:	1cc4      	adds	r4, r0, #3
 8005eac:	f024 0403 	bic.w	r4, r4, #3
 8005eb0:	42a0      	cmp	r0, r4
 8005eb2:	d007      	beq.n	8005ec4 <sbrk_aligned+0x38>
 8005eb4:	1a21      	subs	r1, r4, r0
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f000 f8ac 	bl	8006014 <_sbrk_r>
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d101      	bne.n	8005ec4 <sbrk_aligned+0x38>
 8005ec0:	f04f 34ff 	mov.w	r4, #4294967295
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	bd70      	pop	{r4, r5, r6, pc}
 8005ec8:	20000210 	.word	0x20000210

08005ecc <_malloc_r>:
 8005ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed0:	1ccd      	adds	r5, r1, #3
 8005ed2:	f025 0503 	bic.w	r5, r5, #3
 8005ed6:	3508      	adds	r5, #8
 8005ed8:	2d0c      	cmp	r5, #12
 8005eda:	bf38      	it	cc
 8005edc:	250c      	movcc	r5, #12
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	4607      	mov	r7, r0
 8005ee2:	db01      	blt.n	8005ee8 <_malloc_r+0x1c>
 8005ee4:	42a9      	cmp	r1, r5
 8005ee6:	d905      	bls.n	8005ef4 <_malloc_r+0x28>
 8005ee8:	230c      	movs	r3, #12
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	2600      	movs	r6, #0
 8005eee:	4630      	mov	r0, r6
 8005ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef4:	4e2e      	ldr	r6, [pc, #184]	; (8005fb0 <_malloc_r+0xe4>)
 8005ef6:	f000 f89d 	bl	8006034 <__malloc_lock>
 8005efa:	6833      	ldr	r3, [r6, #0]
 8005efc:	461c      	mov	r4, r3
 8005efe:	bb34      	cbnz	r4, 8005f4e <_malloc_r+0x82>
 8005f00:	4629      	mov	r1, r5
 8005f02:	4638      	mov	r0, r7
 8005f04:	f7ff ffc2 	bl	8005e8c <sbrk_aligned>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	d14d      	bne.n	8005faa <_malloc_r+0xde>
 8005f0e:	6834      	ldr	r4, [r6, #0]
 8005f10:	4626      	mov	r6, r4
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	d140      	bne.n	8005f98 <_malloc_r+0xcc>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	4631      	mov	r1, r6
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	eb04 0803 	add.w	r8, r4, r3
 8005f20:	f000 f878 	bl	8006014 <_sbrk_r>
 8005f24:	4580      	cmp	r8, r0
 8005f26:	d13a      	bne.n	8005f9e <_malloc_r+0xd2>
 8005f28:	6821      	ldr	r1, [r4, #0]
 8005f2a:	3503      	adds	r5, #3
 8005f2c:	1a6d      	subs	r5, r5, r1
 8005f2e:	f025 0503 	bic.w	r5, r5, #3
 8005f32:	3508      	adds	r5, #8
 8005f34:	2d0c      	cmp	r5, #12
 8005f36:	bf38      	it	cc
 8005f38:	250c      	movcc	r5, #12
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	4638      	mov	r0, r7
 8005f3e:	f7ff ffa5 	bl	8005e8c <sbrk_aligned>
 8005f42:	3001      	adds	r0, #1
 8005f44:	d02b      	beq.n	8005f9e <_malloc_r+0xd2>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	442b      	add	r3, r5
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	e00e      	b.n	8005f6c <_malloc_r+0xa0>
 8005f4e:	6822      	ldr	r2, [r4, #0]
 8005f50:	1b52      	subs	r2, r2, r5
 8005f52:	d41e      	bmi.n	8005f92 <_malloc_r+0xc6>
 8005f54:	2a0b      	cmp	r2, #11
 8005f56:	d916      	bls.n	8005f86 <_malloc_r+0xba>
 8005f58:	1961      	adds	r1, r4, r5
 8005f5a:	42a3      	cmp	r3, r4
 8005f5c:	6025      	str	r5, [r4, #0]
 8005f5e:	bf18      	it	ne
 8005f60:	6059      	strne	r1, [r3, #4]
 8005f62:	6863      	ldr	r3, [r4, #4]
 8005f64:	bf08      	it	eq
 8005f66:	6031      	streq	r1, [r6, #0]
 8005f68:	5162      	str	r2, [r4, r5]
 8005f6a:	604b      	str	r3, [r1, #4]
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	f104 060b 	add.w	r6, r4, #11
 8005f72:	f000 f865 	bl	8006040 <__malloc_unlock>
 8005f76:	f026 0607 	bic.w	r6, r6, #7
 8005f7a:	1d23      	adds	r3, r4, #4
 8005f7c:	1af2      	subs	r2, r6, r3
 8005f7e:	d0b6      	beq.n	8005eee <_malloc_r+0x22>
 8005f80:	1b9b      	subs	r3, r3, r6
 8005f82:	50a3      	str	r3, [r4, r2]
 8005f84:	e7b3      	b.n	8005eee <_malloc_r+0x22>
 8005f86:	6862      	ldr	r2, [r4, #4]
 8005f88:	42a3      	cmp	r3, r4
 8005f8a:	bf0c      	ite	eq
 8005f8c:	6032      	streq	r2, [r6, #0]
 8005f8e:	605a      	strne	r2, [r3, #4]
 8005f90:	e7ec      	b.n	8005f6c <_malloc_r+0xa0>
 8005f92:	4623      	mov	r3, r4
 8005f94:	6864      	ldr	r4, [r4, #4]
 8005f96:	e7b2      	b.n	8005efe <_malloc_r+0x32>
 8005f98:	4634      	mov	r4, r6
 8005f9a:	6876      	ldr	r6, [r6, #4]
 8005f9c:	e7b9      	b.n	8005f12 <_malloc_r+0x46>
 8005f9e:	230c      	movs	r3, #12
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	f000 f84c 	bl	8006040 <__malloc_unlock>
 8005fa8:	e7a1      	b.n	8005eee <_malloc_r+0x22>
 8005faa:	6025      	str	r5, [r4, #0]
 8005fac:	e7de      	b.n	8005f6c <_malloc_r+0xa0>
 8005fae:	bf00      	nop
 8005fb0:	2000020c 	.word	0x2000020c

08005fb4 <_realloc_r>:
 8005fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb8:	4680      	mov	r8, r0
 8005fba:	4614      	mov	r4, r2
 8005fbc:	460e      	mov	r6, r1
 8005fbe:	b921      	cbnz	r1, 8005fca <_realloc_r+0x16>
 8005fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	f7ff bf81 	b.w	8005ecc <_malloc_r>
 8005fca:	b92a      	cbnz	r2, 8005fd8 <_realloc_r+0x24>
 8005fcc:	f7ff ff12 	bl	8005df4 <_free_r>
 8005fd0:	4625      	mov	r5, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd8:	f000 f838 	bl	800604c <_malloc_usable_size_r>
 8005fdc:	4284      	cmp	r4, r0
 8005fde:	4607      	mov	r7, r0
 8005fe0:	d802      	bhi.n	8005fe8 <_realloc_r+0x34>
 8005fe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fe6:	d812      	bhi.n	800600e <_realloc_r+0x5a>
 8005fe8:	4621      	mov	r1, r4
 8005fea:	4640      	mov	r0, r8
 8005fec:	f7ff ff6e 	bl	8005ecc <_malloc_r>
 8005ff0:	4605      	mov	r5, r0
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d0ed      	beq.n	8005fd2 <_realloc_r+0x1e>
 8005ff6:	42bc      	cmp	r4, r7
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	bf28      	it	cs
 8005ffe:	463a      	movcs	r2, r7
 8006000:	f7ff fbb8 	bl	8005774 <memcpy>
 8006004:	4631      	mov	r1, r6
 8006006:	4640      	mov	r0, r8
 8006008:	f7ff fef4 	bl	8005df4 <_free_r>
 800600c:	e7e1      	b.n	8005fd2 <_realloc_r+0x1e>
 800600e:	4635      	mov	r5, r6
 8006010:	e7df      	b.n	8005fd2 <_realloc_r+0x1e>
	...

08006014 <_sbrk_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4d06      	ldr	r5, [pc, #24]	; (8006030 <_sbrk_r+0x1c>)
 8006018:	2300      	movs	r3, #0
 800601a:	4604      	mov	r4, r0
 800601c:	4608      	mov	r0, r1
 800601e:	602b      	str	r3, [r5, #0]
 8006020:	f7fb fc32 	bl	8001888 <_sbrk>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_sbrk_r+0x1a>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_sbrk_r+0x1a>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	20000214 	.word	0x20000214

08006034 <__malloc_lock>:
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <__malloc_lock+0x8>)
 8006036:	f000 b811 	b.w	800605c <__retarget_lock_acquire_recursive>
 800603a:	bf00      	nop
 800603c:	20000218 	.word	0x20000218

08006040 <__malloc_unlock>:
 8006040:	4801      	ldr	r0, [pc, #4]	; (8006048 <__malloc_unlock+0x8>)
 8006042:	f000 b80c 	b.w	800605e <__retarget_lock_release_recursive>
 8006046:	bf00      	nop
 8006048:	20000218 	.word	0x20000218

0800604c <_malloc_usable_size_r>:
 800604c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006050:	1f18      	subs	r0, r3, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	bfbc      	itt	lt
 8006056:	580b      	ldrlt	r3, [r1, r0]
 8006058:	18c0      	addlt	r0, r0, r3
 800605a:	4770      	bx	lr

0800605c <__retarget_lock_acquire_recursive>:
 800605c:	4770      	bx	lr

0800605e <__retarget_lock_release_recursive>:
 800605e:	4770      	bx	lr

08006060 <_init>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr

0800606c <_fini>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	bf00      	nop
 8006070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006072:	bc08      	pop	{r3}
 8006074:	469e      	mov	lr, r3
 8006076:	4770      	bx	lr
